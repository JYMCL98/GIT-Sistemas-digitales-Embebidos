CCS PCM C Compiler, Version 5.091, 13314               25-jul.-21 01:08

               Filename:   C:\Users\jymcl\Documents\Chapingo\6 Semestre\Sistemas digitales embebidos\Practica20\practica20.lst

               ROM used:   293 words (14%)
                           Largest free fragment is 1755
               RAM used:   6 (3%) at main() level
                           16 (7%) worst case
               Stack used: 4 locations
               Stack size: 8

0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   0FC
0003:  NOP
.................... #include <practica20.h>
.................... #include <16F628A.h>
.................... //////////// Standard Header file for the PIC16F628A device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F628A
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  48
0009:  RETLW  6F
000A:  RETLW  6C
000B:  RETLW  61
000C:  RETLW  20
000D:  RETLW  55
000E:  RETLW  41
000F:  RETLW  43
0010:  RETLW  68
0011:  RETLW  00
0012:  BCF    0A.0
0013:  BCF    0A.1
0014:  BCF    0A.2
0015:  ADDWF  02,F
0016:  RETLW  44
0017:  RETLW  49
0018:  RETLW  4D
0019:  RETLW  41
001A:  RETLW  00
.................... 
.................... #list
.................... 
.................... #use delay(crystal=4MHz)
001B:  MOVLW  26
001C:  MOVWF  04
001D:  BCF    03.7
001E:  MOVF   00,W
001F:  BTFSC  03.2
0020:  GOTO   02F
0021:  MOVLW  01
0022:  MOVWF  78
0023:  CLRF   77
0024:  DECFSZ 77,F
0025:  GOTO   024
0026:  DECFSZ 78,F
0027:  GOTO   023
0028:  MOVLW  4A
0029:  MOVWF  77
002A:  DECFSZ 77,F
002B:  GOTO   02A
002C:  GOTO   02D
002D:  DECFSZ 00,F
002E:  GOTO   021
002F:  RETURN
.................... 
.................... 
.................... #include <lcd.c>
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////                             LCD.C                                     ////
.................... ////                 Driver for common LCD modules                         ////
.................... ////                                                                       ////
.................... ////  lcd_init()   Must be called before any other function.               ////
.................... ////                                                                       ////
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         ////
.................... ////                 \a  Set cursor position to upper left                 ////
.................... ////                 \f  Clear display, set cursor to upper left           ////
.................... ////                 \n  Go to start of second line                        ////
.................... ////                 \b  Move back one position                            ////
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     ////
.................... ////              will erase all remanining characters on the current      ////
.................... ////              line, and move the cursor to the beginning of the next   ////
.................... ////              line.                                                    ////
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     ////
.................... ////              will move the cursor to the start of the current         ////
.................... ////              line.                                                    ////
.................... ////                                                                       ////
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        ////
.................... ////                                                                       ////
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             ////
.................... ////                                                                       ////
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         ////
.................... ////              (on=FALSE).                                              ////
.................... ////                                                                       ////
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   ////
.................... ////                                                                       ////
.................... ////                                                                       ////
.................... ////  CONFIGURATION                                                        ////
.................... ////  The LCD can be configured in one of two ways: a.) port access or     ////
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     ////
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     ////
.................... ////  connected to sequential pins on the GPIO.  Pin access                ////
.................... ////  has no requirements, all 7 bits of the control interface can         ////
.................... ////  can be connected to any GPIO using several ports.                    ////
.................... ////                                                                       ////
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     ////
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    ////
.................... ////  of this file to configure the pin order.  If you are using a         ////
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  ////
.................... ////  be defined.                                                          ////
.................... ////                                                                       ////
.................... ////  Example of port access:                                              ////
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         ////
.................... ////                                                                       ////
.................... ////  To use pin access, the following pins must be defined:               ////
.................... ////     LCD_ENABLE_PIN                                                    ////
.................... ////     LCD_RS_PIN                                                        ////
.................... ////     LCD_RW_PIN                                                        ////
.................... ////     LCD_DATA4                                                         ////
.................... ////     LCD_DATA5                                                         ////
.................... ////     LCD_DATA6                                                         ////
.................... ////     LCD_DATA7                                                         ////
.................... ////                                                                       ////
.................... ////  Example of pin access:                                               ////
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    ////
.................... ////     #define LCD_RS_PIN      PIN_E1                                    ////
.................... ////     #define LCD_RW_PIN      PIN_E2                                    ////
.................... ////     #define LCD_DATA4       PIN_D4                                    ////
.................... ////     #define LCD_DATA5       PIN_D5                                    ////
.................... ////     #define LCD_DATA6       PIN_D6                                    ////
.................... ////     #define LCD_DATA7       PIN_D7                                    ////
.................... ////                                                                       ////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef __LCD_C__
.................... #define __LCD_C__
.................... 
.................... // define the pinout.
.................... // only required if port access is being used.
.................... typedef struct  
.................... {                            // This structure is overlayed
....................    int1 enable;           // on to an I/O port to gain
....................    int1 rs;               // access to the LCD pins.
....................    int1 rw;               // The bits are allocated from
....................    int1 unused;           // low order up.  ENABLE will
....................    unsigned int     data : 4;         // be LSB pin of that port.
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT.
....................    unsigned int    reserved: 8;
....................   #endif
.................... } LCD_PIN_MAP;
.................... 
.................... // this is to improve compatability with previous LCD drivers that accepted
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B.
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE))
....................  #define LCD_DATA_PORT getenv("SFR:PORTB")
.................... #endif
.................... 
.................... #if defined(__PCB__)
....................    // these definitions only need to be modified for baseline PICs.
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions.
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0};
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF};
.................... #endif
.................... 
.................... ////////////////////// END CONFIGURATION ///////////////////////////////////
.................... 
.................... #ifndef LCD_ENABLE_PIN
....................    #define lcd_output_enable(x) lcdlat.enable=x
....................    #define lcd_enable_tris()   lcdtris.enable=0
.................... #else
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x)
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN)
.................... #endif
.................... 
.................... #ifndef LCD_RS_PIN
....................    #define lcd_output_rs(x) lcdlat.rs=x
....................    #define lcd_rs_tris()   lcdtris.rs=0
.................... #else
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x)
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN)
.................... #endif
.................... 
.................... #ifndef LCD_RW_PIN
....................    #define lcd_output_rw(x) lcdlat.rw=x
....................    #define lcd_rw_tris()   lcdtris.rw=0
.................... #else
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x)
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN)
.................... #endif
.................... 
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4,
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver
.................... // compatible with any code written for the original library
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7))
....................    #define  LCD_DATA4    LCD_DATA0
....................    #define  LCD_DATA5    LCD_DATA1
....................    #define  LCD_DATA6    LCD_DATA2
....................    #define  LCD_DATA7    LCD_DATA3
.................... #endif
.................... 
.................... #ifndef LCD_DATA4
.................... #ifndef LCD_DATA_PORT
....................    #if defined(__PCB__)
....................       #define LCD_DATA_PORT      0x06     //portb
....................       #define set_tris_lcd(x)   set_tris_b(x)
....................    #else
....................      #if defined(PIN_D0)
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd
....................      #else
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb
....................      #endif
....................    #endif   
.................... #endif
.................... 
.................... #if defined(__PCB__)
....................    LCD_PIN_MAP lcd, lcdlat;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT
.................... #elif defined(__PCM__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT
....................    #byte lcdtris = LCD_DATA_PORT+0x80
.................... #elif defined(__PCH__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT+9
....................    #byte lcdtris = LCD_DATA_PORT+0x12
.................... #elif defined(__PCD__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #word lcd = LCD_DATA_PORT
....................    #word lcdlat = LCD_DATA_PORT+2
....................    #word lcdtris = LCD_DATA_PORT-0x02
.................... #endif
.................... #endif   //LCD_DATA4 not defined
.................... 
.................... #ifndef LCD_TYPE
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines
.................... #endif
.................... 
.................... #ifndef LCD_LINE_TWO
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line
.................... #endif
.................... 
.................... #ifndef LCD_LINE_LENGTH
....................    #define LCD_LINE_LENGTH 20
.................... #endif
.................... 
.................... unsigned int8 lcd_read_nibble(void);
.................... 
.................... unsigned int8 lcd_read_byte(void)
.................... {
....................    unsigned int8 low,high;
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_INPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_float(LCD_DATA4);
....................    output_float(LCD_DATA5);
....................    output_float(LCD_DATA6);
....................    output_float(LCD_DATA7);
....................   #else
....................    lcdtris.data = 0xF;
*
0048:  MOVLW  0F
0049:  BSF    03.5
004A:  ANDWF  06,W
004B:  IORLW  F0
004C:  MOVWF  06
....................   #endif
....................  #endif
....................         
....................    lcd_output_rw(1);
004D:  BCF    03.5
004E:  BSF    06.2
....................    delay_cycles(1);
004F:  NOP
....................    lcd_output_enable(1);
0050:  BSF    06.0
....................    delay_cycles(1);
0051:  NOP
....................    high = lcd_read_nibble();
0052:  CALL   03C
0053:  MOVF   78,W
0054:  MOVWF  2A
....................       
....................    lcd_output_enable(0);
0055:  BCF    06.0
....................    delay_cycles(1);
0056:  NOP
....................    lcd_output_enable(1);
0057:  BSF    06.0
....................    delay_us(1);
0058:  NOP
....................    low = lcd_read_nibble();
0059:  CALL   03C
005A:  MOVF   78,W
005B:  MOVWF  29
....................       
....................    lcd_output_enable(0);
005C:  BCF    06.0
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_drive(LCD_DATA4);
....................    output_drive(LCD_DATA5);
....................    output_drive(LCD_DATA6);
....................    output_drive(LCD_DATA7);
....................   #else
....................    lcdtris.data = 0x0;
005D:  MOVLW  0F
005E:  BSF    03.5
005F:  ANDWF  06,W
0060:  MOVWF  06
....................   #endif
....................  #endif
.................... 
....................    return( (high<<4) | low);
0061:  BCF    03.5
0062:  SWAPF  2A,W
0063:  MOVWF  77
0064:  MOVLW  F0
0065:  ANDWF  77,F
0066:  MOVF   77,W
0067:  IORWF  29,W
0068:  MOVWF  78
.................... }
.................... 
.................... unsigned int8 lcd_read_nibble(void)
.................... {
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    unsigned int8 n = 0x00;
.................... 
....................    /* Read the data port */
....................    n |= input(LCD_DATA4);
....................    n |= input(LCD_DATA5) << 1;
....................    n |= input(LCD_DATA6) << 2;
....................    n |= input(LCD_DATA7) << 3;
....................    
....................    return(n);
....................   #else
....................    return(lcd.data);
*
003C:  MOVF   06,W
003D:  MOVWF  77
003E:  SWAPF  06,W
003F:  ANDLW  0F
0040:  MOVWF  78
....................   #endif
0041:  RETURN
.................... }
.................... 
.................... void lcd_send_nibble(unsigned int8 n)
.................... {
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    /* Write to the data port */
....................    output_bit(LCD_DATA4, bit_test(n, 0));
....................    output_bit(LCD_DATA5, bit_test(n, 1));
....................    output_bit(LCD_DATA6, bit_test(n, 2));
....................    output_bit(LCD_DATA7, bit_test(n, 3));
....................   #else      
....................    lcdlat.data = n;
*
0030:  SWAPF  2A,W
0031:  ANDLW  F0
0032:  MOVWF  77
0033:  MOVLW  0F
0034:  ANDWF  06,W
0035:  IORWF  77,W
0036:  MOVWF  06
....................   #endif
....................       
....................    delay_cycles(1);
0037:  NOP
....................    lcd_output_enable(1);
0038:  BSF    06.0
....................    delay_us(2);
0039:  GOTO   03A
....................    lcd_output_enable(0);
003A:  BCF    06.0
003B:  RETURN
.................... }
.................... 
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n)
.................... {
....................   #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................   #else
....................    lcd_enable_tris();
*
0042:  BSF    03.5
0043:  BCF    06.0
....................    lcd_rs_tris();
0044:  BCF    06.1
....................    lcd_rw_tris();
0045:  BCF    06.2
....................   #endif
.................... 
....................    lcd_output_rs(0);
0046:  BCF    03.5
0047:  BCF    06.1
....................    while ( bit_test(lcd_read_byte(),7) ) ;
*
0069:  MOVF   78,W
006A:  MOVWF  29
006B:  BTFSC  29.7
006C:  GOTO   048
....................    lcd_output_rs(address);
006D:  BTFSS  27.0
006E:  BCF    06.1
006F:  BTFSC  27.0
0070:  BSF    06.1
....................    delay_cycles(1);
0071:  NOP
....................    lcd_output_rw(0);
0072:  BCF    06.2
....................    delay_cycles(1);
0073:  NOP
....................    lcd_output_enable(0);
0074:  BCF    06.0
....................    lcd_send_nibble(n >> 4);
0075:  SWAPF  28,W
0076:  MOVWF  29
0077:  MOVLW  0F
0078:  ANDWF  29,F
0079:  MOVF   29,W
007A:  MOVWF  2A
007B:  CALL   030
....................    lcd_send_nibble(n & 0xf);
007C:  MOVF   28,W
007D:  ANDLW  0F
007E:  MOVWF  29
007F:  MOVWF  2A
0080:  CALL   030
0081:  RETURN
.................... }
.................... 
.................... #if defined(LCD_EXTENDED_NEWLINE)
.................... unsigned int8 g_LcdX, g_LcdY;
.................... #endif
.................... 
.................... void lcd_init(void) 
.................... {
....................    unsigned int8 i;
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6};
0082:  MOVLW  28
0083:  MOVWF  22
0084:  MOVLW  0C
0085:  MOVWF  23
0086:  MOVLW  01
0087:  MOVWF  24
0088:  MOVLW  06
0089:  MOVWF  25
....................                              // These bytes need to be sent to the LCD
....................                              // to start it up.
....................    
.................... 
....................    lcd_output_enable(0);
008A:  BCF    06.0
....................    lcd_output_rs(0);
008B:  BCF    06.1
....................    lcd_output_rw(0);
008C:  BCF    06.2
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_drive(LCD_DATA4);
....................    output_drive(LCD_DATA5);
....................    output_drive(LCD_DATA6);
....................    output_drive(LCD_DATA7);
....................   #else
....................    lcdtris.data = 0x0;
008D:  MOVLW  0F
008E:  BSF    03.5
008F:  ANDWF  06,W
0090:  MOVWF  06
....................   #endif
....................    lcd_enable_tris();
0091:  BCF    06.0
....................    lcd_rs_tris();
0092:  BCF    06.1
....................    lcd_rw_tris();
0093:  BCF    06.2
....................  #endif
....................     
....................    delay_ms(15);
0094:  MOVLW  0F
0095:  BCF    03.5
0096:  MOVWF  26
0097:  CALL   01B
....................    for(i=1;i<=3;++i)
0098:  MOVLW  01
0099:  MOVWF  21
009A:  MOVF   21,W
009B:  SUBLW  03
009C:  BTFSS  03.0
009D:  GOTO   0A6
....................    {
....................        lcd_send_nibble(3);
009E:  MOVLW  03
009F:  MOVWF  2A
00A0:  CALL   030
....................        delay_ms(5);
00A1:  MOVLW  05
00A2:  MOVWF  26
00A3:  CALL   01B
00A4:  INCF   21,F
00A5:  GOTO   09A
....................    }
....................    
....................    lcd_send_nibble(2);
00A6:  MOVLW  02
00A7:  MOVWF  2A
00A8:  CALL   030
....................    delay_ms(5);
00A9:  MOVLW  05
00AA:  MOVWF  26
00AB:  CALL   01B
....................    for(i=0;i<=3;++i)
00AC:  CLRF   21
00AD:  MOVF   21,W
00AE:  SUBLW  03
00AF:  BTFSS  03.0
00B0:  GOTO   0BD
....................       lcd_send_byte(0,LCD_INIT_STRING[i]);
00B1:  MOVLW  22
00B2:  ADDWF  21,W
00B3:  MOVWF  04
00B4:  BCF    03.7
00B5:  MOVF   00,W
00B6:  MOVWF  26
00B7:  CLRF   27
00B8:  MOVF   26,W
00B9:  MOVWF  28
00BA:  CALL   042
.................... 
....................   #if defined(LCD_EXTENDED_NEWLINE)
00BB:  INCF   21,F
00BC:  GOTO   0AD
00BD:  GOTO   103 (RETURN)
....................    g_LcdX = 0;
....................    g_LcdY = 0;
....................   #endif
.................... }
.................... 
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y)
.................... {
....................    unsigned int8 address;
....................    
....................    if(y!=1)
00BE:  DECFSZ 24,W
00BF:  GOTO   0C1
00C0:  GOTO   0C4
....................       address=LCD_LINE_TWO;
00C1:  MOVLW  40
00C2:  MOVWF  25
00C3:  GOTO   0C5
....................    else
....................       address=0;
00C4:  CLRF   25
....................      
....................    address+=x-1;
00C5:  MOVLW  01
00C6:  SUBWF  23,W
00C7:  ADDWF  25,F
....................    lcd_send_byte(0,0x80|address);
00C8:  MOVF   25,W
00C9:  IORLW  80
00CA:  MOVWF  26
00CB:  CLRF   27
00CC:  MOVF   26,W
00CD:  MOVWF  28
00CE:  CALL   042
.................... 
....................   #if defined(LCD_EXTENDED_NEWLINE)
00CF:  RETURN
....................    g_LcdX = x - 1;
....................    g_LcdY = y - 1;
....................   #endif
.................... }
.................... 
.................... void lcd_putc(char c)
.................... {
....................    switch (c)
00D0:  MOVF   22,W
00D1:  XORLW  07
00D2:  BTFSC  03.2
00D3:  GOTO   0DE
00D4:  XORLW  0B
00D5:  BTFSC  03.2
00D6:  GOTO   0E3
00D7:  XORLW  06
00D8:  BTFSC  03.2
00D9:  GOTO   0EB
00DA:  XORLW  02
00DB:  BTFSC  03.2
00DC:  GOTO   0F1
00DD:  GOTO   0F6
....................    {
....................       case '\a'   :  lcd_gotoxy(1,1);     break;
00DE:  MOVLW  01
00DF:  MOVWF  23
00E0:  MOVWF  24
00E1:  CALL   0BE
00E2:  GOTO   0FB
.................... 
....................       case '\f'   :  lcd_send_byte(0,1);
00E3:  CLRF   27
00E4:  MOVLW  01
00E5:  MOVWF  28
00E6:  CALL   042
....................                      delay_ms(2);
00E7:  MOVLW  02
00E8:  MOVWF  26
00E9:  CALL   01B
....................                     #if defined(LCD_EXTENDED_NEWLINE)
....................                      g_LcdX = 0;
....................                      g_LcdY = 0;
....................                     #endif
....................                      break;
00EA:  GOTO   0FB
.................... 
....................      #if defined(LCD_EXTENDED_NEWLINE)
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break;
....................       case '\n'   :
....................          while (g_LcdX++ < LCD_LINE_LENGTH)
....................          {
....................             lcd_send_byte(1, ' ');
....................          }
....................          lcd_gotoxy(1, g_LcdY+2);
....................          break;
....................      #else
....................       case '\n'   : lcd_gotoxy(1,2);        break;
00EB:  MOVLW  01
00EC:  MOVWF  23
00ED:  MOVLW  02
00EE:  MOVWF  24
00EF:  CALL   0BE
00F0:  GOTO   0FB
....................      #endif
....................      
....................       case '\b'   : lcd_send_byte(0,0x10);  break;
00F1:  CLRF   27
00F2:  MOVLW  10
00F3:  MOVWF  28
00F4:  CALL   042
00F5:  GOTO   0FB
....................      
....................      #if defined(LCD_EXTENDED_NEWLINE)
....................       default     : 
....................          if (g_LcdX < LCD_LINE_LENGTH)
....................          {
....................             lcd_send_byte(1, c);
....................             g_LcdX++;
....................          }
....................          break;
....................      #else
....................       default     : lcd_send_byte(1,c);     break;
00F6:  MOVLW  01
00F7:  MOVWF  27
00F8:  MOVF   22,W
00F9:  MOVWF  28
00FA:  CALL   042
....................      #endif
....................    }
00FB:  RETURN
.................... }
....................  
.................... char lcd_getc(unsigned int8 x, unsigned int8 y)
.................... {
....................    char value;
.................... 
....................    lcd_gotoxy(x,y);
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low
....................    lcd_output_rs(1);
....................    value = lcd_read_byte();
....................    lcd_output_rs(0);
....................    
....................    return(value);
.................... }
.................... 
.................... // write a custom character to the ram
.................... // which is 0-7 and specifies which character array we are modifying.
.................... // ptr points to an array of 8 bytes, where each byte is the next row of
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and
.................... //    usually you will want to leave this byte 0x00.
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr)
.................... {
....................    unsigned int i;
.................... 
....................    which <<= 3;
....................    which &= 0x38;
.................... 
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address
.................... 
....................    for(i=0; i<8; i++)
....................    {
....................       lcd_send_byte(1, *ptr++);
....................    }
....................   
....................    #if defined(LCD_EXTENDED_NEWLINE)
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address
....................    #endif
.................... }
.................... 
.................... void lcd_cursor_on(int1 on)
.................... {
....................    if (on)
....................    {
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON
....................    }
....................    else
....................    {
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF
....................    }
.................... }
.................... 
.................... #endif
.................... 
.................... 
.................... void main()
00FC:  MOVF   03,W
00FD:  ANDLW  1F
00FE:  MOVWF  03
00FF:  MOVLW  07
0100:  MOVWF  1F
0101:  BCF    03.7
.................... {
....................    lcd_init();
0102:  GOTO   082
....................    while(TRUE)
....................    {
....................       lcd_gotoxy(5,1);
0103:  MOVLW  05
0104:  MOVWF  23
0105:  MOVLW  01
0106:  MOVWF  24
0107:  CALL   0BE
....................       printf(lcd_putc,"Hola UACh");
0108:  CLRF   21
0109:  MOVF   21,W
010A:  CALL   004
010B:  INCF   21,F
010C:  MOVWF  77
010D:  MOVWF  22
010E:  CALL   0D0
010F:  MOVLW  09
0110:  SUBWF  21,W
0111:  BTFSS  03.2
0112:  GOTO   109
....................       lcd_gotoxy(7,2);
0113:  MOVLW  07
0114:  MOVWF  23
0115:  MOVLW  02
0116:  MOVWF  24
0117:  CALL   0BE
....................       printf(lcd_putc,"DIMA");
0118:  CLRF   21
0119:  MOVF   21,W
011A:  CALL   012
011B:  INCF   21,F
011C:  MOVWF  77
011D:  MOVWF  22
011E:  CALL   0D0
011F:  MOVLW  04
0120:  SUBWF  21,W
0121:  BTFSS  03.2
0122:  GOTO   119
0123:  GOTO   103
....................    }
.................... 
.................... }
0124:  SLEEP

Configuration Fuses:
   Word  1: 3F61   NOWDT PUT XT MCLR BROWNOUT NOLVP NOCPD NOPROTECT
