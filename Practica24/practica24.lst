CCS PCM C Compiler, Version 5.091, 13314               22-jun.-21 08:54

               Filename:   C:\Users\jymcl\Documents\Chapingo\6 Semestre\Sistemas digitales embebidos\Practica24\practica24.lst

               ROM used:   536 words (7%)
                           Largest free fragment is 2048
               RAM used:   15 (4%) at main() level
                           27 (7%) worst case
               Stack used: 5 locations
               Stack size: 8

0000:  MOVLW  01
0001:  MOVWF  0A
0002:  GOTO   166
0003:  NOP
.................... #include <practica24.h>
.................... #include <16F876A.h>
.................... //////////// Standard Header file for the PIC16F876A device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F876A
0004:  DATA A0,26
0005:  DATA 6F,3A
0006:  DATA 6F,39
0007:  DATA 20,33
0008:  DATA 75,37
0009:  DATA E3,34
000A:  DATA 6F,37
000B:  DATA 61,37
000C:  DATA E4,37
000D:  DATA 00,00
000E:  DATA 49,3D
000F:  DATA F1,3A
0010:  DATA E9,32
0011:  DATA 72,32
0012:  DATA 61,00
0013:  DATA A0,26
0014:  DATA 6F,3A
0015:  DATA 6F,39
0016:  DATA 20,33
0017:  DATA 75,37
0018:  DATA E3,34
0019:  DATA 6F,37
001A:  DATA 61,37
001B:  DATA E4,37
001C:  DATA 00,01
001D:  DATA C4,32
001E:  DATA F2,32
001F:  DATA 63,34
0020:  DATA 61,00
0021:  DATA CD,37
0022:  DATA F4,37
0023:  DATA 72,10
0024:  DATA E6,3A
0025:  DATA 65,39
0026:  DATA 61,00
0027:  DATA C4,32
0028:  DATA A0,39
0029:  DATA 65,39
002A:  DATA F6,34
002B:  DATA E3,34
002C:  DATA 6F,00
*
0110:  MOVF   0B,W
0111:  MOVWF  29
0112:  BCF    0B.7
0113:  BSF    03.5
0114:  BSF    03.6
0115:  BSF    0C.7
0116:  BSF    0C.0
0117:  NOP
0118:  NOP
0119:  BCF    03.5
011A:  BCF    03.6
011B:  BTFSC  29.7
011C:  BSF    0B.7
011D:  BSF    03.6
011E:  MOVF   0C,W
011F:  ANDLW  7F
0120:  BTFSC  03.2
0121:  GOTO   164
0122:  BCF    03.6
0123:  MOVWF  29
0124:  BSF    03.6
0125:  MOVF   0D,W
0126:  BCF    03.6
0127:  MOVWF  2A
0128:  BSF    03.6
0129:  MOVF   0F,W
012A:  BCF    03.6
012B:  MOVWF  2B
012C:  MOVF   29,W
012D:  MOVWF  2C
012E:  CALL   0E4
012F:  MOVF   2A,W
0130:  BSF    03.6
0131:  MOVWF  0D
0132:  BCF    03.6
0133:  MOVF   2B,W
0134:  BSF    03.6
0135:  MOVWF  0F
0136:  BCF    03.6
0137:  MOVF   0B,W
0138:  MOVWF  2C
0139:  BCF    0B.7
013A:  BSF    03.5
013B:  BSF    03.6
013C:  BSF    0C.7
013D:  BSF    0C.0
013E:  NOP
013F:  NOP
0140:  BCF    03.5
0141:  BCF    03.6
0142:  BTFSC  2C.7
0143:  BSF    0B.7
0144:  BSF    03.6
0145:  RLF    0C,W
0146:  RLF    0E,W
0147:  ANDLW  7F
0148:  BTFSC  03.2
0149:  GOTO   164
014A:  BCF    03.6
014B:  MOVWF  29
014C:  BSF    03.6
014D:  MOVF   0D,W
014E:  BCF    03.6
014F:  MOVWF  2A
0150:  BSF    03.6
0151:  MOVF   0F,W
0152:  BCF    03.6
0153:  MOVWF  2B
0154:  MOVF   29,W
0155:  MOVWF  2C
0156:  CALL   0E4
0157:  MOVF   2A,W
0158:  BSF    03.6
0159:  MOVWF  0D
015A:  BCF    03.6
015B:  MOVF   2B,W
015C:  BSF    03.6
015D:  MOVWF  0F
015E:  INCF   0D,F
015F:  BTFSC  03.2
0160:  INCF   0F,F
0161:  BCF    03.6
0162:  GOTO   110
0163:  BSF    03.6
0164:  BCF    03.6
0165:  RETURN
.................... 
.................... #list
.................... 
.................... #device ADC=10
.................... #use delay(crystal=4MHz)
*
002D:  MOVLW  2E
002E:  MOVWF  04
002F:  BCF    03.7
0030:  MOVF   00,W
0031:  BTFSC  03.2
0032:  GOTO   041
0033:  MOVLW  01
0034:  MOVWF  78
0035:  CLRF   77
0036:  DECFSZ 77,F
0037:  GOTO   036
0038:  DECFSZ 78,F
0039:  GOTO   035
003A:  MOVLW  4A
003B:  MOVWF  77
003C:  DECFSZ 77,F
003D:  GOTO   03C
003E:  GOTO   03F
003F:  DECFSZ 00,F
0040:  GOTO   033
0041:  RETURN
.................... 
.................... 
.................... #include <lcd.c>
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////                             LCD.C                                     ////
.................... ////                 Driver for common LCD modules                         ////
.................... ////                                                                       ////
.................... ////  lcd_init()   Must be called before any other function.               ////
.................... ////                                                                       ////
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         ////
.................... ////                 \a  Set cursor position to upper left                 ////
.................... ////                 \f  Clear display, set cursor to upper left           ////
.................... ////                 \n  Go to start of second line                        ////
.................... ////                 \b  Move back one position                            ////
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     ////
.................... ////              will erase all remanining characters on the current      ////
.................... ////              line, and move the cursor to the beginning of the next   ////
.................... ////              line.                                                    ////
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     ////
.................... ////              will move the cursor to the start of the current         ////
.................... ////              line.                                                    ////
.................... ////                                                                       ////
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        ////
.................... ////                                                                       ////
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             ////
.................... ////                                                                       ////
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         ////
.................... ////              (on=FALSE).                                              ////
.................... ////                                                                       ////
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   ////
.................... ////                                                                       ////
.................... ////                                                                       ////
.................... ////  CONFIGURATION                                                        ////
.................... ////  The LCD can be configured in one of two ways: a.) port access or     ////
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     ////
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     ////
.................... ////  connected to sequential pins on the GPIO.  Pin access                ////
.................... ////  has no requirements, all 7 bits of the control interface can         ////
.................... ////  can be connected to any GPIO using several ports.                    ////
.................... ////                                                                       ////
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     ////
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    ////
.................... ////  of this file to configure the pin order.  If you are using a         ////
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  ////
.................... ////  be defined.                                                          ////
.................... ////                                                                       ////
.................... ////  Example of port access:                                              ////
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         ////
.................... ////                                                                       ////
.................... ////  To use pin access, the following pins must be defined:               ////
.................... ////     LCD_ENABLE_PIN                                                    ////
.................... ////     LCD_RS_PIN                                                        ////
.................... ////     LCD_RW_PIN                                                        ////
.................... ////     LCD_DATA4                                                         ////
.................... ////     LCD_DATA5                                                         ////
.................... ////     LCD_DATA6                                                         ////
.................... ////     LCD_DATA7                                                         ////
.................... ////                                                                       ////
.................... ////  Example of pin access:                                               ////
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    ////
.................... ////     #define LCD_RS_PIN      PIN_E1                                    ////
.................... ////     #define LCD_RW_PIN      PIN_E2                                    ////
.................... ////     #define LCD_DATA4       PIN_D4                                    ////
.................... ////     #define LCD_DATA5       PIN_D5                                    ////
.................... ////     #define LCD_DATA6       PIN_D6                                    ////
.................... ////     #define LCD_DATA7       PIN_D7                                    ////
.................... ////                                                                       ////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef __LCD_C__
.................... #define __LCD_C__
.................... 
.................... // define the pinout.
.................... // only required if port access is being used.
.................... typedef struct  
.................... {                            // This structure is overlayed
....................    int1 enable;           // on to an I/O port to gain
....................    int1 rs;               // access to the LCD pins.
....................    int1 rw;               // The bits are allocated from
....................    int1 unused;           // low order up.  ENABLE will
....................    unsigned int     data : 4;         // be LSB pin of that port.
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT.
....................    unsigned int    reserved: 8;
....................   #endif
.................... } LCD_PIN_MAP;
.................... 
.................... // this is to improve compatability with previous LCD drivers that accepted
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B.
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE))
....................  #define LCD_DATA_PORT getenv("SFR:PORTB")
.................... #endif
.................... 
.................... #if defined(__PCB__)
....................    // these definitions only need to be modified for baseline PICs.
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions.
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0};
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF};
.................... #endif
.................... 
.................... ////////////////////// END CONFIGURATION ///////////////////////////////////
.................... 
.................... #ifndef LCD_ENABLE_PIN
....................    #define lcd_output_enable(x) lcdlat.enable=x
....................    #define lcd_enable_tris()   lcdtris.enable=0
.................... #else
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x)
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN)
.................... #endif
.................... 
.................... #ifndef LCD_RS_PIN
....................    #define lcd_output_rs(x) lcdlat.rs=x
....................    #define lcd_rs_tris()   lcdtris.rs=0
.................... #else
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x)
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN)
.................... #endif
.................... 
.................... #ifndef LCD_RW_PIN
....................    #define lcd_output_rw(x) lcdlat.rw=x
....................    #define lcd_rw_tris()   lcdtris.rw=0
.................... #else
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x)
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN)
.................... #endif
.................... 
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4,
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver
.................... // compatible with any code written for the original library
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7))
....................    #define  LCD_DATA4    LCD_DATA0
....................    #define  LCD_DATA5    LCD_DATA1
....................    #define  LCD_DATA6    LCD_DATA2
....................    #define  LCD_DATA7    LCD_DATA3
.................... #endif
.................... 
.................... #ifndef LCD_DATA4
.................... #ifndef LCD_DATA_PORT
....................    #if defined(__PCB__)
....................       #define LCD_DATA_PORT      0x06     //portb
....................       #define set_tris_lcd(x)   set_tris_b(x)
....................    #else
....................      #if defined(PIN_D0)
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd
....................      #else
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb
....................      #endif
....................    #endif   
.................... #endif
.................... 
.................... #if defined(__PCB__)
....................    LCD_PIN_MAP lcd, lcdlat;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT
.................... #elif defined(__PCM__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT
....................    #byte lcdtris = LCD_DATA_PORT+0x80
.................... #elif defined(__PCH__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT+9
....................    #byte lcdtris = LCD_DATA_PORT+0x12
.................... #elif defined(__PCD__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #word lcd = LCD_DATA_PORT
....................    #word lcdlat = LCD_DATA_PORT+2
....................    #word lcdtris = LCD_DATA_PORT-0x02
.................... #endif
.................... #endif   //LCD_DATA4 not defined
.................... 
.................... #ifndef LCD_TYPE
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines
.................... #endif
.................... 
.................... #ifndef LCD_LINE_TWO
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line
.................... #endif
.................... 
.................... #ifndef LCD_LINE_LENGTH
....................    #define LCD_LINE_LENGTH 20
.................... #endif
.................... 
.................... unsigned int8 lcd_read_nibble(void);
.................... 
.................... unsigned int8 lcd_read_byte(void)
.................... {
....................    unsigned int8 low,high;
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_INPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_float(LCD_DATA4);
....................    output_float(LCD_DATA5);
....................    output_float(LCD_DATA6);
....................    output_float(LCD_DATA7);
....................   #else
....................    lcdtris.data = 0xF;
*
005A:  MOVLW  0F
005B:  BSF    03.5
005C:  ANDWF  06,W
005D:  IORLW  F0
005E:  MOVWF  06
....................   #endif
....................  #endif
....................         
....................    lcd_output_rw(1);
005F:  BCF    03.5
0060:  BSF    06.2
....................    delay_cycles(1);
0061:  NOP
....................    lcd_output_enable(1);
0062:  BSF    06.0
....................    delay_cycles(1);
0063:  NOP
....................    high = lcd_read_nibble();
0064:  CALL   04E
0065:  MOVF   78,W
0066:  MOVWF  34
....................       
....................    lcd_output_enable(0);
0067:  BCF    06.0
....................    delay_cycles(1);
0068:  NOP
....................    lcd_output_enable(1);
0069:  BSF    06.0
....................    delay_us(1);
006A:  NOP
....................    low = lcd_read_nibble();
006B:  CALL   04E
006C:  MOVF   78,W
006D:  MOVWF  33
....................       
....................    lcd_output_enable(0);
006E:  BCF    06.0
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_drive(LCD_DATA4);
....................    output_drive(LCD_DATA5);
....................    output_drive(LCD_DATA6);
....................    output_drive(LCD_DATA7);
....................   #else
....................    lcdtris.data = 0x0;
006F:  MOVLW  0F
0070:  BSF    03.5
0071:  ANDWF  06,W
0072:  MOVWF  06
....................   #endif
....................  #endif
.................... 
....................    return( (high<<4) | low);
0073:  BCF    03.5
0074:  SWAPF  34,W
0075:  MOVWF  77
0076:  MOVLW  F0
0077:  ANDWF  77,F
0078:  MOVF   77,W
0079:  IORWF  33,W
007A:  MOVWF  78
.................... }
.................... 
.................... unsigned int8 lcd_read_nibble(void)
.................... {
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    unsigned int8 n = 0x00;
.................... 
....................    /* Read the data port */
....................    n |= input(LCD_DATA4);
....................    n |= input(LCD_DATA5) << 1;
....................    n |= input(LCD_DATA6) << 2;
....................    n |= input(LCD_DATA7) << 3;
....................    
....................    return(n);
....................   #else
....................    return(lcd.data);
*
004E:  MOVF   06,W
004F:  MOVWF  77
0050:  SWAPF  06,W
0051:  ANDLW  0F
0052:  MOVWF  78
....................   #endif
0053:  RETURN
.................... }
.................... 
.................... void lcd_send_nibble(unsigned int8 n)
.................... {
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    /* Write to the data port */
....................    output_bit(LCD_DATA4, bit_test(n, 0));
....................    output_bit(LCD_DATA5, bit_test(n, 1));
....................    output_bit(LCD_DATA6, bit_test(n, 2));
....................    output_bit(LCD_DATA7, bit_test(n, 3));
....................   #else      
....................    lcdlat.data = n;
*
0042:  SWAPF  34,W
0043:  ANDLW  F0
0044:  MOVWF  77
0045:  MOVLW  0F
0046:  ANDWF  06,W
0047:  IORWF  77,W
0048:  MOVWF  06
....................   #endif
....................       
....................    delay_cycles(1);
0049:  NOP
....................    lcd_output_enable(1);
004A:  BSF    06.0
....................    delay_us(2);
004B:  GOTO   04C
....................    lcd_output_enable(0);
004C:  BCF    06.0
004D:  RETURN
.................... }
.................... 
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n)
.................... {
....................   #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................   #else
....................    lcd_enable_tris();
*
0054:  BSF    03.5
0055:  BCF    06.0
....................    lcd_rs_tris();
0056:  BCF    06.1
....................    lcd_rw_tris();
0057:  BCF    06.2
....................   #endif
.................... 
....................    lcd_output_rs(0);
0058:  BCF    03.5
0059:  BCF    06.1
....................    while ( bit_test(lcd_read_byte(),7) ) ;
*
007B:  MOVF   78,W
007C:  MOVWF  33
007D:  BTFSC  33.7
007E:  GOTO   05A
....................    lcd_output_rs(address);
007F:  BTFSS  31.0
0080:  BCF    06.1
0081:  BTFSC  31.0
0082:  BSF    06.1
....................    delay_cycles(1);
0083:  NOP
....................    lcd_output_rw(0);
0084:  BCF    06.2
....................    delay_cycles(1);
0085:  NOP
....................    lcd_output_enable(0);
0086:  BCF    06.0
....................    lcd_send_nibble(n >> 4);
0087:  SWAPF  32,W
0088:  MOVWF  33
0089:  MOVLW  0F
008A:  ANDWF  33,F
008B:  MOVF   33,W
008C:  MOVWF  34
008D:  CALL   042
....................    lcd_send_nibble(n & 0xf);
008E:  MOVF   32,W
008F:  ANDLW  0F
0090:  MOVWF  33
0091:  MOVWF  34
0092:  CALL   042
0093:  RETURN
.................... }
.................... 
.................... #if defined(LCD_EXTENDED_NEWLINE)
.................... unsigned int8 g_LcdX, g_LcdY;
.................... #endif
.................... 
.................... void lcd_init(void) 
.................... {
....................    unsigned int8 i;
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6};
0094:  MOVLW  28
0095:  MOVWF  2A
0096:  MOVLW  0C
0097:  MOVWF  2B
0098:  MOVLW  01
0099:  MOVWF  2C
009A:  MOVLW  06
009B:  MOVWF  2D
....................                              // These bytes need to be sent to the LCD
....................                              // to start it up.
....................    
.................... 
....................    lcd_output_enable(0);
009C:  BCF    06.0
....................    lcd_output_rs(0);
009D:  BCF    06.1
....................    lcd_output_rw(0);
009E:  BCF    06.2
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_drive(LCD_DATA4);
....................    output_drive(LCD_DATA5);
....................    output_drive(LCD_DATA6);
....................    output_drive(LCD_DATA7);
....................   #else
....................    lcdtris.data = 0x0;
009F:  MOVLW  0F
00A0:  BSF    03.5
00A1:  ANDWF  06,W
00A2:  MOVWF  06
....................   #endif
....................    lcd_enable_tris();
00A3:  BCF    06.0
....................    lcd_rs_tris();
00A4:  BCF    06.1
....................    lcd_rw_tris();
00A5:  BCF    06.2
....................  #endif
....................     
....................    delay_ms(15);
00A6:  MOVLW  0F
00A7:  BCF    03.5
00A8:  MOVWF  2E
00A9:  CALL   02D
....................    for(i=1;i<=3;++i)
00AA:  MOVLW  01
00AB:  MOVWF  29
00AC:  MOVF   29,W
00AD:  SUBLW  03
00AE:  BTFSS  03.0
00AF:  GOTO   0B8
....................    {
....................        lcd_send_nibble(3);
00B0:  MOVLW  03
00B1:  MOVWF  34
00B2:  CALL   042
....................        delay_ms(5);
00B3:  MOVLW  05
00B4:  MOVWF  2E
00B5:  CALL   02D
00B6:  INCF   29,F
00B7:  GOTO   0AC
....................    }
....................    
....................    lcd_send_nibble(2);
00B8:  MOVLW  02
00B9:  MOVWF  34
00BA:  CALL   042
....................    delay_ms(5);
00BB:  MOVLW  05
00BC:  MOVWF  2E
00BD:  CALL   02D
....................    for(i=0;i<=3;++i)
00BE:  CLRF   29
00BF:  MOVF   29,W
00C0:  SUBLW  03
00C1:  BTFSS  03.0
00C2:  GOTO   0CF
....................       lcd_send_byte(0,LCD_INIT_STRING[i]);
00C3:  MOVLW  2A
00C4:  ADDWF  29,W
00C5:  MOVWF  04
00C6:  BCF    03.7
00C7:  MOVF   00,W
00C8:  MOVWF  2E
00C9:  CLRF   31
00CA:  MOVF   2E,W
00CB:  MOVWF  32
00CC:  CALL   054
.................... 
....................   #if defined(LCD_EXTENDED_NEWLINE)
00CD:  INCF   29,F
00CE:  GOTO   0BF
00CF:  BCF    0A.3
00D0:  BCF    0A.4
00D1:  GOTO   177 (RETURN)
....................    g_LcdX = 0;
....................    g_LcdY = 0;
....................   #endif
.................... }
.................... 
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y)
.................... {
....................    unsigned int8 address;
....................    
....................    if(y!=1)
00D2:  DECFSZ 2E,W
00D3:  GOTO   0D5
00D4:  GOTO   0D8
....................       address=LCD_LINE_TWO;
00D5:  MOVLW  40
00D6:  MOVWF  2F
00D7:  GOTO   0D9
....................    else
....................       address=0;
00D8:  CLRF   2F
....................      
....................    address+=x-1;
00D9:  MOVLW  01
00DA:  SUBWF  2D,W
00DB:  ADDWF  2F,F
....................    lcd_send_byte(0,0x80|address);
00DC:  MOVF   2F,W
00DD:  IORLW  80
00DE:  MOVWF  30
00DF:  CLRF   31
00E0:  MOVF   30,W
00E1:  MOVWF  32
00E2:  CALL   054
.................... 
....................   #if defined(LCD_EXTENDED_NEWLINE)
00E3:  RETURN
....................    g_LcdX = x - 1;
....................    g_LcdY = y - 1;
....................   #endif
.................... }
.................... 
.................... void lcd_putc(char c)
.................... {
....................    switch (c)
00E4:  MOVF   2C,W
00E5:  XORLW  07
00E6:  BTFSC  03.2
00E7:  GOTO   0F2
00E8:  XORLW  0B
00E9:  BTFSC  03.2
00EA:  GOTO   0F7
00EB:  XORLW  06
00EC:  BTFSC  03.2
00ED:  GOTO   0FF
00EE:  XORLW  02
00EF:  BTFSC  03.2
00F0:  GOTO   105
00F1:  GOTO   10A
....................    {
....................       case '\a'   :  lcd_gotoxy(1,1);     break;
00F2:  MOVLW  01
00F3:  MOVWF  2D
00F4:  MOVWF  2E
00F5:  CALL   0D2
00F6:  GOTO   10F
.................... 
....................       case '\f'   :  lcd_send_byte(0,1);
00F7:  CLRF   31
00F8:  MOVLW  01
00F9:  MOVWF  32
00FA:  CALL   054
....................                      delay_ms(2);
00FB:  MOVLW  02
00FC:  MOVWF  2E
00FD:  CALL   02D
....................                     #if defined(LCD_EXTENDED_NEWLINE)
....................                      g_LcdX = 0;
....................                      g_LcdY = 0;
....................                     #endif
....................                      break;
00FE:  GOTO   10F
.................... 
....................      #if defined(LCD_EXTENDED_NEWLINE)
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break;
....................       case '\n'   :
....................          while (g_LcdX++ < LCD_LINE_LENGTH)
....................          {
....................             lcd_send_byte(1, ' ');
....................          }
....................          lcd_gotoxy(1, g_LcdY+2);
....................          break;
....................      #else
....................       case '\n'   : lcd_gotoxy(1,2);        break;
00FF:  MOVLW  01
0100:  MOVWF  2D
0101:  MOVLW  02
0102:  MOVWF  2E
0103:  CALL   0D2
0104:  GOTO   10F
....................      #endif
....................      
....................       case '\b'   : lcd_send_byte(0,0x10);  break;
0105:  CLRF   31
0106:  MOVLW  10
0107:  MOVWF  32
0108:  CALL   054
0109:  GOTO   10F
....................      
....................      #if defined(LCD_EXTENDED_NEWLINE)
....................       default     : 
....................          if (g_LcdX < LCD_LINE_LENGTH)
....................          {
....................             lcd_send_byte(1, c);
....................             g_LcdX++;
....................          }
....................          break;
....................      #else
....................       default     : lcd_send_byte(1,c);     break;
010A:  MOVLW  01
010B:  MOVWF  31
010C:  MOVF   2C,W
010D:  MOVWF  32
010E:  CALL   054
....................      #endif
....................    }
010F:  RETURN
.................... }
....................  
.................... char lcd_getc(unsigned int8 x, unsigned int8 y)
.................... {
....................    char value;
.................... 
....................    lcd_gotoxy(x,y);
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low
....................    lcd_output_rs(1);
....................    value = lcd_read_byte();
....................    lcd_output_rs(0);
....................    
....................    return(value);
.................... }
.................... 
.................... // write a custom character to the ram
.................... // which is 0-7 and specifies which character array we are modifying.
.................... // ptr points to an array of 8 bytes, where each byte is the next row of
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and
.................... //    usually you will want to leave this byte 0x00.
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr)
.................... {
....................    unsigned int i;
.................... 
....................    which <<= 3;
....................    which &= 0x38;
.................... 
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address
.................... 
....................    for(i=0; i<8; i++)
....................    {
....................       lcd_send_byte(1, *ptr++);
....................    }
....................   
....................    #if defined(LCD_EXTENDED_NEWLINE)
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address
....................    #endif
.................... }
.................... 
.................... void lcd_cursor_on(int1 on)
.................... {
....................    if (on)
....................    {
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON
....................    }
....................    else
....................    {
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF
....................    }
.................... }
.................... 
.................... #endif
.................... 
.................... #use standard_io(a)
.................... #use standard_io(c)
.................... 
.................... 
.................... void main()
*
0166:  MOVF   03,W
0167:  ANDLW  1F
0168:  MOVWF  03
0169:  MOVLW  FF
016A:  MOVWF  20
016B:  CLRF   22
016C:  CLRF   21
016D:  BSF    03.5
016E:  BSF    1F.0
016F:  BSF    1F.1
0170:  BSF    1F.2
0171:  BCF    1F.3
0172:  MOVLW  07
0173:  MOVWF  1C
0174:  BCF    03.7
.................... {
....................    lcd_init();
0175:  BCF    03.5
0176:  GOTO   094
....................    set_tris_a(0b11111);
0177:  MOVLW  1F
0178:  BSF    03.5
0179:  MOVWF  05
....................    set_tris_c(0b00000000);
017A:  MOVLW  00
017B:  MOVWF  07
017C:  BCF    03.5
017D:  MOVWF  20
....................    int steps[4] = {0b00001010,0b00001001,0b00000101,0b00000110};
017E:  MOVLW  0A
017F:  MOVWF  23
0180:  MOVLW  09
0181:  MOVWF  24
0182:  MOVLW  05
0183:  MOVWF  25
0184:  MOVLW  06
0185:  MOVWF  26
....................    
....................    while(TRUE)
....................    {
....................       if(input(PIN_A0))
0186:  BSF    03.5
0187:  BSF    05.0
0188:  BCF    03.5
0189:  BTFSS  05.0
018A:  GOTO   1BE
....................       {
....................          lcd_gotoxy(1,1);
018B:  MOVLW  01
018C:  MOVWF  2D
018D:  MOVWF  2E
018E:  CALL   0D2
....................          printf(lcd_putc," Motor funcionando");
018F:  MOVLW  04
0190:  BSF    03.6
0191:  MOVWF  0D
0192:  MOVLW  00
0193:  MOVWF  0F
0194:  BCF    03.6
0195:  CALL   110
....................          lcd_gotoxy(1,2);
0196:  MOVLW  01
0197:  MOVWF  2D
0198:  MOVLW  02
0199:  MOVWF  2E
019A:  CALL   0D2
....................          printf(lcd_putc,"Izquierda");
019B:  MOVLW  0E
019C:  BSF    03.6
019D:  MOVWF  0D
019E:  MOVLW  00
019F:  MOVWF  0F
01A0:  BCF    03.6
01A1:  CALL   110
....................          for(int i=0; i<4; i++)
01A2:  CLRF   27
01A3:  MOVF   27,W
01A4:  SUBLW  03
01A5:  BTFSS  03.0
01A6:  GOTO   1BD
....................          {
....................             output_c(steps[i]);
01A7:  MOVLW  23
01A8:  ADDWF  27,W
01A9:  MOVWF  04
01AA:  BCF    03.7
01AB:  MOVF   00,W
01AC:  MOVWF  29
01AD:  MOVLW  00
01AE:  MOVWF  20
01AF:  BSF    03.5
01B0:  CLRF   07
01B1:  BCF    03.5
01B2:  MOVF   29,W
01B3:  MOVWF  07
....................             delay_ms(500);
01B4:  MOVLW  02
01B5:  MOVWF  29
01B6:  MOVLW  FA
01B7:  MOVWF  2E
01B8:  CALL   02D
01B9:  DECFSZ 29,F
01BA:  GOTO   1B6
01BB:  INCF   27,F
01BC:  GOTO   1A3
....................          }
....................       }
01BD:  GOTO   216
....................       else if (input(PIN_A1))
01BE:  BSF    03.5
01BF:  BSF    05.1
01C0:  BCF    03.5
01C1:  BTFSS  05.1
01C2:  GOTO   1F8
....................       {
....................          lcd_gotoxy(1,1);
01C3:  MOVLW  01
01C4:  MOVWF  2D
01C5:  MOVWF  2E
01C6:  CALL   0D2
....................          printf(lcd_putc," Motor funcionando");
01C7:  MOVLW  13
01C8:  BSF    03.6
01C9:  MOVWF  0D
01CA:  MOVLW  00
01CB:  MOVWF  0F
01CC:  BCF    03.6
01CD:  CALL   110
....................          lcd_gotoxy(1,2);
01CE:  MOVLW  01
01CF:  MOVWF  2D
01D0:  MOVLW  02
01D1:  MOVWF  2E
01D2:  CALL   0D2
....................          printf(lcd_putc,"Derecha");
01D3:  MOVLW  1D
01D4:  BSF    03.6
01D5:  MOVWF  0D
01D6:  MOVLW  00
01D7:  MOVWF  0F
01D8:  BCF    03.6
01D9:  CALL   110
....................          for(int j=5; j>=1;j--)
01DA:  MOVLW  05
01DB:  MOVWF  28
01DC:  MOVF   28,W
01DD:  SUBLW  00
01DE:  BTFSC  03.0
01DF:  GOTO   1F7
....................          {
....................             output_c(steps[j-1]);
01E0:  MOVLW  01
01E1:  SUBWF  28,W
01E2:  ADDLW  23
01E3:  MOVWF  04
01E4:  BCF    03.7
01E5:  MOVF   00,W
01E6:  MOVWF  29
01E7:  MOVLW  00
01E8:  MOVWF  20
01E9:  BSF    03.5
01EA:  CLRF   07
01EB:  BCF    03.5
01EC:  MOVF   29,W
01ED:  MOVWF  07
....................             delay_ms(500);
01EE:  MOVLW  02
01EF:  MOVWF  29
01F0:  MOVLW  FA
01F1:  MOVWF  2E
01F2:  CALL   02D
01F3:  DECFSZ 29,F
01F4:  GOTO   1F0
01F5:  DECF   28,F
01F6:  GOTO   1DC
....................          }
....................       }
01F7:  GOTO   216
....................       else
....................       {
....................          lcd_gotoxy(1,1);
01F8:  MOVLW  01
01F9:  MOVWF  2D
01FA:  MOVWF  2E
01FB:  CALL   0D2
....................          printf(lcd_putc,"Motor fuera");
01FC:  MOVLW  21
01FD:  BSF    03.6
01FE:  MOVWF  0D
01FF:  MOVLW  00
0200:  MOVWF  0F
0201:  BCF    03.6
0202:  CALL   110
....................          lcd_gotoxy(1,2);
0203:  MOVLW  01
0204:  MOVWF  2D
0205:  MOVLW  02
0206:  MOVWF  2E
0207:  CALL   0D2
....................          printf(lcd_putc,"De servicio");
0208:  MOVLW  27
0209:  BSF    03.6
020A:  MOVWF  0D
020B:  MOVLW  00
020C:  MOVWF  0F
020D:  BCF    03.6
020E:  CALL   110
....................          delay_ms(500);
020F:  MOVLW  02
0210:  MOVWF  29
0211:  MOVLW  FA
0212:  MOVWF  2E
0213:  CALL   02D
0214:  DECFSZ 29,F
0215:  GOTO   211
....................       }
0216:  GOTO   186
....................    }
.................... 
.................... }
0217:  SLEEP

Configuration Fuses:
   Word  1: 3F71   XT NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
