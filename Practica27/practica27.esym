D G "__PCM__" 0 61 ""5.091""
D G "__DEVICE__" 0 61 "886"
D G "__DATE__" 0 61 ""28-Jun-21""
D G "__TIME__" 0 61 ""22:44:23""
D G "_UNICODE" 0 61 ""?""
D G "__EVAL" 0 61 ""?"" "Standard Header file for the PIC16F886 device ////////////////"
c L "set_tris_a" 2 3 6 "FUNCTION"
f N "set_tris_a" 2 39 ""
v L "value" 2 39 "int8" `55 
f B "set_tris_a" 2 39 "void(int8 value)" `54 
f N "set_tris_b" 2 40 ""
v L "value" 2 40 "int8" `57 
f B "set_tris_b" 2 40 "void(int8 value)" `56 
f N "set_tris_c" 2 41 ""
v L "value" 2 41 "int8" `59 
f B "set_tris_c" 2 41 "void(int8 value)" `58 
f N "set_tris_e" 2 42 ""
v L "value" 2 42 "int8" `61 
f B "set_tris_e" 2 42 "void(int8 value)" `60 
f N "get_tris_a" 2 43 ""
f B "get_tris_a" 2 43 "int8()" `62 
f N "get_tris_b" 2 44 ""
f B "get_tris_b" 2 44 "int8()" `63 
f N "get_tris_c" 2 45 ""
f B "get_tris_c" 2 45 "int8()" `64 
f N "get_tris_e" 2 46 ""
f B "get_tris_e" 2 46 "int8()" `65 
f N "output_a" 2 47 ""
v L "value" 2 47 "int8" `67 
f B "output_a" 2 47 "void(int8 value)" `66 
f N "output_b" 2 48 ""
v L "value" 2 48 "int8" `69 
f B "output_b" 2 48 "void(int8 value)" `68 
f N "output_c" 2 49 ""
v L "value" 2 49 "int8" `71 
f B "output_c" 2 49 "void(int8 value)" `70 
f N "output_e" 2 50 ""
v L "value" 2 50 "int8" `73 
f B "output_e" 2 50 "void(int8 value)" `72 
f N "input_a" 2 51 ""
f B "input_a" 2 51 "int8()" `74 
f N "input_b" 2 52 ""
f B "input_b" 2 52 "int8()" `75 
f N "input_c" 2 53 ""
f B "input_c" 2 53 "int8()" `76 
f N "input_e" 2 54 ""
f B "input_e" 2 54 "int8()" `77 
f N "input_change_a" 2 55 ""
f B "input_change_a" 2 55 "int8()" `78 
f N "input_change_b" 2 56 ""
f B "input_change_b" 2 56 "int8()" `79 
f N "input_change_c" 2 57 ""
f B "input_change_c" 2 57 "int8()" `80 
f N "input_change_e" 2 58 ""
f B "input_change_e" 2 58 "int8()" `81 
f N "port_b_pullups" 2 59 ""
v L "upmask" 2 59 "int8" `83 
f B "port_b_pullups" 2 59 "void(int8 upmask)" `82 
f N "input" 2 60 ""
v L "pin" 2 60 "int16" `85 
f B "input" 2 60 "int8(int16 pin)" `84 
f N "input_state" 2 61 ""
v L "pin" 2 61 "int16" `87 
f B "input_state" 2 61 "int8(int16 pin)" `86 
f N "output_low" 2 62 ""
v L "pin" 2 62 "int16" `89 
f B "output_low" 2 62 "void(int16 pin)" `88 
f N "output_high" 2 63 ""
v L "pin" 2 63 "int16" `91 
f B "output_high" 2 63 "void(int16 pin)" `90 
f N "output_toggle" 2 64 ""
v L "pin" 2 64 "int16" `93 
f B "output_toggle" 2 64 "void(int16 pin)" `92 
f N "output_bit" 2 65 ""
v L "pin" 2 65 "int16" `95 
v L "level" 2 65 "int8" `96 
f B "output_bit" 2 65 "void(int16 pin,int8 level)" `94 
f N "output_float" 2 66 ""
v L "pin" 2 66 "int16" `98 
f B "output_float" 2 66 "void(int16 pin)" `97 
f N "output_drive" 2 67 ""
v L "pin" 2 67 "int16" `100 
f B "output_drive" 2 67 "void(int16 pin)" `99  "Constants used to identify pins in the above are:"
d G "PIN_A0" 2 71 "40"
d G "PIN_A1" 2 72 "41"
d G "PIN_A2" 2 73 "42"
d G "PIN_A3" 2 74 "43"
d G "PIN_A4" 2 75 "44"
d G "PIN_A5" 2 76 "45"
d G "PIN_A6" 2 77 "46"
d G "PIN_A7" 2 78 "47"
d G "PIN_B0" 2 80 "48"
d G "PIN_B1" 2 81 "49"
d G "PIN_B2" 2 82 "50"
d G "PIN_B3" 2 83 "51"
d G "PIN_B4" 2 84 "52"
d G "PIN_B5" 2 85 "53"
d G "PIN_B6" 2 86 "54"
d G "PIN_B7" 2 87 "55"
d G "PIN_C0" 2 89 "56"
d G "PIN_C1" 2 90 "57"
d G "PIN_C2" 2 91 "58"
d G "PIN_C3" 2 92 "59"
d G "PIN_C4" 2 93 "60"
d G "PIN_C5" 2 94 "61"
d G "PIN_C6" 2 95 "62"
d G "PIN_C7" 2 96 "63"
d G "PIN_E3" 2 98 "75"
d G "FALSE" 2 101 "0"
d G "TRUE" 2 102 "1"
d G "BYTE" 2 104 "int8"
d G "BOOLEAN" 2 105 "int1"
d G "getc" 2 107 "getch"
d G "fgetc" 2 108 "getch"
d G "getchar" 2 109 "getch"
d G "putc" 2 110 "putchar"
d G "fputc" 2 111 "putchar"
d G "fgets" 2 112 "gets"
d G "fputs" 2 113 "puts"
c L "output_drive" 2 3 3 "FUNCTION"
f N "restart_cause" 2 118 ""
f B "restart_cause" 2 118 "int8()" `101 
f N "reset_cpu" 2 119 ""
f B "reset_cpu" 2 119 "void()" `102 
f N "sleep" 2 120 ""
f B "sleep" 2 120 "void()" `103  "Constants returned from RESTART_CAUSE() are:"
d G "WDT_FROM_SLEEP" 2 122 "3"
d G "WDT_TIMEOUT" 2 123 "11"
d G "MCLR_FROM_SLEEP" 2 124 "19"
d G "MCLR_FROM_RUN" 2 125 "27"
d G "NORMAL_POWER_UP" 2 126 "25"
d G "BROWNOUT_RESTART" 2 127 "26"
c L "sleep" 2 3 5 "FUNCTION"
f N "setup_timer_0" 2 134 ""
v L "mode" 2 134 "int8" `105 
f B "setup_timer_0" 2 134 "void(int8 mode)" `104 
f N "set_timer0" 2 135 ""
v L "value" 2 135 "int8" `107 
f B "set_timer0" 2 135 "void(int8 value)" `106 
f N "get_timer0" 2 136 ""
f B "get_timer0" 2 136 "int8()" `108 
f N "setup_counters" 2 137 ""
v L "mode" 2 137 "int8" `110 
v L "prescaler" 2 137 "int8" `111 
f B "setup_counters" 2 137 "void(int8 mode,int8 prescaler)" `109 
f N "set_rtcc" 2 138 ""
v L "value" 2 138 "int8" `113 
f B "set_rtcc" 2 138 "void(int8 value)" `112 
f N "get_rtcc" 2 139 ""
f B "get_rtcc" 2 139 "int8()" `114  "Constants used for SETUP_TIMER_0() are:"
d G "T0_INTERNAL" 2 141 "0"
d G "T0_EXT_L_TO_H" 2 142 "32"
d G "T0_EXT_H_TO_L" 2 143 "48"
d G "T0_DIV_1" 2 145 "8"
d G "T0_DIV_2" 2 146 "0"
d G "T0_DIV_4" 2 147 "1"
d G "T0_DIV_8" 2 148 "2"
d G "T0_DIV_16" 2 149 "3"
d G "T0_DIV_32" 2 150 "4"
d G "T0_DIV_64" 2 151 "5"
d G "T0_DIV_128" 2 152 "6"
d G "T0_DIV_256" 2 153 "7"
d G "T0_8_BIT" 2 156 "0"
d G "RTCC_INTERNAL" 2 160 "0"
d G "RTCC_EXT_L_TO_H" 2 161 "32"
d G "RTCC_EXT_H_TO_L" 2 162 "48"
d G "RTCC_DIV_1" 2 163 "8"
d G "RTCC_DIV_2" 2 164 "0"
d G "RTCC_DIV_4" 2 165 "1"
d G "RTCC_DIV_8" 2 166 "2"
d G "RTCC_DIV_16" 2 167 "3"
d G "RTCC_DIV_32" 2 168 "4"
d G "RTCC_DIV_64" 2 169 "5"
d G "RTCC_DIV_128" 2 170 "6"
d G "RTCC_DIV_256" 2 171 "7"
d G "RTCC_8_BIT" 2 172 "0"
c L "get_rtcc" 2 3 8 "FUNCTION"
f N "setup_wdt" 2 183 ""
v L "mode" 2 183 "int16" `116 
f B "setup_wdt" 2 183 "void(int16 mode)" `115 
f N "restart_wdt" 2 184 ""
f B "restart_wdt" 2 184 "void()" `117  "Constants used for SETUP_WDT() are:"
d G "WDT_18MS" 2 187 "8"
d G "WDT_36MS" 2 188 "9"
d G "WDT_72MS" 2 189 "10"
d G "WDT_144MS" 2 190 "11"
d G "WDT_288MS" 2 191 "12"
d G "WDT_576MS" 2 192 "13"
d G "WDT_1152MS" 2 193 "14"
d G "WDT_2304MS" 2 194 "15"
d G "WDT_ON" 2 199 "0x4000"
d G "WDT_OFF" 2 200 "0"
d G "WDT_DIV_16" 2 201 "0x100"
d G "WDT_DIV_8" 2 202 "0x300"
d G "WDT_DIV_4" 2 203 "0x500"
d G "WDT_DIV_2" 2 204 "0x700"
d G "WDT_TIMES_1" 2 205 "0x900" "Default"
d G "WDT_TIMES_2" 2 206 "0xB00"
d G "WDT_TIMES_4" 2 207 "0xD00"
d G "WDT_TIMES_8" 2 208 "0xF00"
d G "WDT_TIMES_16" 2 209 "0x1100"
d G "WDT_TIMES_32" 2 210 "0x1300"
d G "WDT_TIMES_64" 2 211 "0x1500"
d G "WDT_TIMES_128" 2 212 "0x1700"
c L "restart_wdt" 2 3 3 "FUNCTION"
f N "setup_timer_1" 2 217 ""
v L "mode" 2 217 "int16" `119 
f B "setup_timer_1" 2 217 "void(int16 mode)" `118 
f N "get_timer1" 2 218 ""
f B "get_timer1" 2 218 "int16()" `120 
f N "set_timer1" 2 219 ""
v L "value" 2 219 "int16" `122 
f B "set_timer1" 2 219 "void(int16 value)" `121  "Constants used for SETUP_TIMER_1() are:"
d G "T1_DISABLED" 2 222 "0"
d G "T1_INTERNAL" 2 223 "5"
d G "T1_EXTERNAL" 2 224 "7"
d G "T1_EXTERNAL_SYNC" 2 225 "3"
d G "T1_CLK_OUT" 2 227 "8"
d G "T1_DIV_BY_1" 2 229 "0"
d G "T1_DIV_BY_2" 2 230 "0x10"
d G "T1_DIV_BY_4" 2 231 "0x20"
d G "T1_DIV_BY_8" 2 232 "0x30"
d G "T1_GATE" 2 234 "0x40"
d G "T1_GATE_INVERTED" 2 235 "0xC0"
c L "set_timer1" 2 3 3 "FUNCTION"
f N "setup_timer_2" 2 240 ""
v L "mode" 2 240 "int8" `124 
v L "period" 2 240 "int8" `125 
v L "postscale" 2 240 "int8" `126 
f B "setup_timer_2" 2 240 "void(int8 mode,int8 period,int8 postscale)" `123 
f N "get_timer2" 2 241 ""
f B "get_timer2" 2 241 "int8()" `127 
f N "set_timer2" 2 242 ""
v L "value" 2 242 "int8" `129 
f B "set_timer2" 2 242 "void(int8 value)" `128  "Constants used for SETUP_TIMER_2() are:"
d G "T2_DISABLED" 2 244 "0"
d G "T2_DIV_BY_1" 2 245 "4"
d G "T2_DIV_BY_4" 2 246 "5"
d G "T2_DIV_BY_16" 2 247 "6"
c L "set_timer2" 2 3 4 "FUNCTION"
f N "setup_ccp1" 2 253 ""
v L "mode" 2 253 "int32" `131 
f B "setup_ccp1" 2 253 "void(int32 mode)" `130 
f N "setup_ccp1" 2 254 ""
v L "mode" 2 254 "int32" `133 
v L "pwm" 2 254 "int8" `134 
f B "setup_ccp1" 2 254 "void(int32 mode,int8 pwm)" `132 
f N "set_pwm1_duty" 2 255 ""
v L "value" 2 255 "int8" `136 
f B "set_pwm1_duty" 2 255 "void(int8 value)" `135 
f N "set_pwm1_duty" 2 256 ""
v L "value" 2 256 "int16" `138 
f B "set_pwm1_duty" 2 256 "void(int16 value)" `137  "Constants used for SETUP_CCPx() are:"
d G "CCP_OFF" 2 258 "0"
d G "CCP_CAPTURE_FE" 2 259 "0x04"
d G "CCP_CAPTURE_RE" 2 260 "0x05"
d G "CCP_CAPTURE_DIV_4" 2 261 "0x06"
d G "CCP_CAPTURE_DIV_16" 2 262 "0x07"
d G "CCP_COMPARE_SET_ON_MATCH" 2 263 "0x08"
d G "CCP_COMPARE_CLR_ON_MATCH" 2 264 "0x09"
d G "CCP_COMPARE_INT" 2 265 "0x0A"
d G "CCP_COMPARE_RESET_TIMER" 2 266 "0x0B"
d G "CCP_PWM" 2 267 "0x0C"
d G "CCP_PWM_PLUS_1" 2 268 "0x1c"
d G "CCP_PWM_PLUS_2" 2 269 "0x2c"
d G "CCP_PWM_PLUS_3" 2 270 "0x3c"
d G "CCP_PWM_H_H" 2 277 "0x0c"
d G "CCP_PWM_H_L" 2 278 "0x0d"
d G "CCP_PWM_L_H" 2 279 "0x0e"
d G "CCP_PWM_L_L" 2 280 "0x0f"
d G "CCP_PWM_FULL_BRIDGE" 2 282 "0x40"
d G "CCP_PWM_FULL_BRIDGE_REV" 2 283 "0xC0"
d G "CCP_PWM_HALF_BRIDGE" 2 284 "0x80"
d G "CCP_SHUTDOWN_ON_COMP1" 2 286 "0x100000"
d G "CCP_SHUTDOWN_ON_COMP2" 2 287 "0x200000"
d G "CCP_SHUTDOWN_ON_COMP" 2 288 "0x300000"
d G "CCP_SHUTDOWN_ON_INT0" 2 289 "0x400000"
d G "CCP_SHUTDOWN_ON_COMP1_INT0" 2 290 "0x500000"
d G "CCP_SHUTDOWN_ON_COMP2_INT0" 2 291 "0x600000"
d G "CCP_SHUTDOWN_ON_COMP_INT0" 2 292 "0x700000"
d G "CCP_SHUTDOWN_AC_L" 2 294 "0x000000"
d G "CCP_SHUTDOWN_AC_H" 2 295 "0x040000"
d G "CCP_SHUTDOWN_AC_F" 2 296 "0x080000"
d G "CCP_SHUTDOWN_BD_L" 2 298 "0x000000"
d G "CCP_SHUTDOWN_BD_H" 2 299 "0x010000"
d G "CCP_SHUTDOWN_BD_F" 2 300 "0x020000"
d G "CCP_SHUTDOWN_RESTART" 2 302 "0x80000000"
d G "CCP_PULSE_STEERING_A" 2 304 "0x01000000"
d G "CCP_PULSE_STEERING_B" 2 305 "0x02000000"
d G "CCP_PULSE_STEERING_C" 2 306 "0x04000000"
d G "CCP_PULSE_STEERING_D" 2 307 "0x08000000"
d G "CCP_PULSE_STEERING_SYNC" 2 308 "0x10000000"
c L "set_pwm1_duty" 2 3 1 "FUNCTION"
f N "setup_ccp2" 2 311 ""
v L "mode" 2 311 "int32" `143 
f B "setup_ccp2" 2 311 "void(int32 mode)" `142 
f N "setup_ccp2" 2 312 ""
v L "mode" 2 312 "int32" `145 
v L "pwm" 2 312 "int8" `146 
f B "setup_ccp2" 2 312 "void(int32 mode,int8 pwm)" `144 
f N "set_pwm2_duty" 2 313 ""
v L "value" 2 313 "int8" `148 
f B "set_pwm2_duty" 2 313 "void(int8 value)" `147 
f N "set_pwm2_duty" 2 314 ""
v L "value" 2 314 "int16" `150 
f B "set_pwm2_duty" 2 314 "void(int16 value)" `149 
c L "set_pwm2_duty" 2 3 3 "FUNCTION"
f N "setup_spi" 2 322 ""
v L "mode" 2 322 "int32" `155 
f B "setup_spi" 2 322 "void(int32 mode)" `154 
f N "spi_write" 2 323 ""
v L "value" 2 323 "int8" `157 
f B "spi_write" 2 323 "void(int8 value)" `156 
f N "spi_write" 2 324 ""
v L "wait" 2 324 "int8" `159 
v L "value" 2 324 "int8" `160 
f B "spi_write" 2 324 "void(int8 wait,int8 value)" `158 
f N "spi_read" 2 325 ""
f B "spi_read" 2 325 "int8()" `161 
f N "spi_read" 2 326 ""
v L "value" 2 326 "int8" `163 
f B "spi_read" 2 326 "int8(int8 value)" `162 
f N "spi_data_is_in" 2 327 ""
f B "spi_data_is_in" 2 327 "int8()" `164  "Constants used in SETUP_SPI() are:"
d G "SPI_DISABLED" 2 329 "0x00"
d G "SPI_MASTER" 2 330 "0x20"
d G "SPI_SLAVE" 2 331 "0x24"
d G "SPI_SCK_IDLE_HIGH" 2 332 "0x10"
d G "SPI_SCK_IDLE_LOW" 2 333 "0x00"
d G "SPI_CLK_DIV_4" 2 334 "0x00"
d G "SPI_CLK_DIV_16" 2 335 "0x01"
d G "SPI_CLK_DIV_64" 2 336 "0x02"
d G "SPI_CLK_T2" 2 337 "0x03"
d G "SPI_SS_DISABLED" 2 338 "0x01"
d G "SPI_XMIT_L_TO_H" 2 340 "0x4000"
d G "SPI_XMIT_H_TO_L" 2 341 "0x0000"
d G "SPI_SAMPLE_AT_MIDDLE" 2 343 "0x0000"
d G "SPI_SAMPLE_AT_END" 2 344 "0x8000"
d G "SPI_L_TO_H" 2 347 "SPI_SCK_IDLE_LOW"
d G "SPI_H_TO_L" 2 348 "SPI_SCK_IDLE_HIGH"
c L "spi_data_is_in" 2 3 2 "FUNCTION"
f N "setup_uart" 2 352 ""
v L "baud" 2 352 "int32" `166 
f B "setup_uart" 2 352 "void(int32 baud)" `165 
f N "setup_uart" 2 353 ""
v L "baud" 2 353 "int32" `168 
v L "stream" 2 353 "int8" `169 
f B "setup_uart" 2 353 "void(int32 baud,int8 stream)" `167 
f N "setup_uart" 2 354 ""
v L "baud" 2 354 "int32" `171 
v L "stream" 2 354 "int8" `172 
v L "clock" 2 354 "int32" `173 
f B "setup_uart" 2 354 "void(int32 baud,int8 stream,int32 clock)" `170 
f N "set_uart_speed" 2 355 ""
v L "baud" 2 355 "int32" `175 
f B "set_uart_speed" 2 355 "void(int32 baud)" `174 
f N "set_uart_speed" 2 356 ""
v L "baud" 2 356 "int32" `177 
v L "stream" 2 356 "int8" `178 
f B "set_uart_speed" 2 356 "void(int32 baud,int8 stream)" `176 
f N "set_uart_speed" 2 357 ""
v L "baud" 2 357 "int32" `180 
v L "stream" 2 357 "int8" `181 
v L "clock" 2 357 "int32" `182 
f B "set_uart_speed" 2 357 "void(int32 baud,int8 stream,int32 clock)" `179  "Constants used in setup_uart() are:"
d G "UART_ADDRESS" 2 361 "2"
d G "UART_DATA" 2 362 "4"
d G "UART_AUTODETECT" 2 363 "8"
d G "UART_AUTODETECT_NOWAIT" 2 364 "9"
d G "UART_WAKEUP_ON_RDA" 2 365 "10"
d G "UART_SEND_BREAK" 2 366 "13"
c L "set_uart_speed" 2 3 3 "FUNCTION"
f N "setup_comparator" 2 371 ""
v L "mode" 2 371 "int32" `184 
f B "setup_comparator" 2 371 "void(int32 mode)" `183  "Constants used in setup_comparator() are:"
d G "NC_NC_NC_NC" 2 375 "0x00"
d G "NC_NC" 2 376 "0x00"
d G "CP1_A0_A3" 2 379 "0x00090080"
d G "CP1_A1_A3" 2 380 "0x000A0081"
d G "CP1_B3_A3" 2 381 "0x00880082"
d G "CP1_B1_A3" 2 382 "0x00280083"
d G "CP1_A0_VREF" 2 383 "0x00010084"
d G "CP1_A1_VREF" 2 384 "0x00020085"
d G "CP1_B3_VREF" 2 385 "0x00800086"
d G "CP1_B1_VREF" 2 386 "0x00200087"
d G "CP1_OUT_ON_A4" 2 388 "0x00000020"
d G "CP1_INVERT" 2 389 "0x00000010"
d G "CP1_ABSOLUTE_VREF" 2 390 "0x20000000"
d G "CP2_A0_A2" 2 393 "0x00058000"
d G "CP2_A1_A2" 2 394 "0x00068100"
d G "CP2_B3_A2" 2 395 "0x00848200"
d G "CP2_B1_A2" 2 396 "0x00248300"
d G "CP2_A0_VREF" 2 397 "0x00018400"
d G "CP2_A1_VREF" 2 398 "0x00028500"
d G "CP2_B3_VREF" 2 399 "0x00808600"
d G "CP2_B1_VREF" 2 400 "0x00208700"
d G "CP2_OUT_ON_A5" 2 402 "0x00002000"
d G "CP2_INVERT" 2 403 "0x00001000"
d G "CP2_ABSOLUTE_VREF" 2 404 "0x10000000"
d G "CP2_T1_SYNC" 2 407 "0x01000000"
d G "CP2_T1_GATE" 2 408 "0x02000000"
c L "setup_comparator" 2 3 2 "FUNCTION"
f N "setup_vref" 2 416 ""
v L "mode" 2 416 "int8" `188 
f B "setup_vref" 2 416 "void(int8 mode)" `187  "Constants used in setup_vref() are:"
d G "VREF_LOW" 2 418 "0xa0"
d G "VREF_HIGH" 2 419 "0x80"
c L "setup_vref" 2 3 3 "FUNCTION"
f N "setup_oscillator" 2 425 ""
v L "mode" 2 425 "int8" `190 
f B "setup_oscillator" 2 425 "int8(int8 mode)" `189 
f N "setup_oscillator" 2 426 ""
v L "mode" 2 426 "int8" `192 
v L "tune" 2 426 "sint8" `193 
f B "setup_oscillator" 2 426 "int8(int8 mode,sint8 tune)" `191  "Constants used in setup_oscillator() are:"
d G "OSC_31KHZ" 2 428 "1"
d G "OSC_125KHZ" 2 429 "0x11"
d G "OSC_250KHZ" 2 430 "0x21"
d G "OSC_500KHZ" 2 431 "0x31"
d G "OSC_1MHZ" 2 432 "0x41"
d G "OSC_2MHZ" 2 433 "0x51"
d G "OSC_4MHZ" 2 434 "0x61"
d G "OSC_8MHZ" 2 435 "0x71"
d G "OSC_INTRC" 2 436 "1"
d G "OSC_NORMAL" 2 437 "0"
d G "OSC_STATE_STABLE" 2 441 "4"
d G "OSC_31KHZ_STABLE" 2 442 "2"
c L "setup_oscillator" 2 3 4 "FUNCTION"
f N "setup_adc" 2 449 ""
v L "mode" 2 449 "int16" `195 
f B "setup_adc" 2 449 "void(int16 mode)" `194 
f N "read_adc" 2 450 ""
f B "read_adc" 2 450 "int8()" `196 
f N "read_adc" 2 451 ""
v L "mode" 2 451 "int8" `198 
f B "read_adc" 2 451 "int8(int8 mode)" `197 
f N "read_adc" 2 452 ""
f G "read_adc" 2 452 "int16()" `199 
f N "read_adc" 2 453 ""
v L "mode" 2 453 "int8" `200 
f G "read_adc" 2 453 "int16(int8 mode,int32 pins)" `199 
f N "adc_done" 2 454 ""
f B "adc_done" 2 454 "int8(int8 mode,int32 pins)" `199  "Constants used for SETUP_ADC() are:"
d G "ADC_OFF" 2 456 "0" "ADC Off"
d G "ADC_CLOCK_DIV_2" 2 457 "0x100"
d G "ADC_CLOCK_DIV_8" 2 458 "0x40"
d G "ADC_CLOCK_DIV_32" 2 459 "0x80"
d G "ADC_CLOCK_INTERNAL" 2 460 "0xc0" "Internal 2-6us"
c L "adc_done" 2 3 1 "FUNCTION"
f N "setup_adc_ports" 2 463 ""
v L "pins" 2 463 "int32" `201 
f B "setup_adc_ports" 2 463 "void(int32 pins)" `200 
f N "setup_adc_ports" 2 464 ""
v L "pins" 2 464 "int32" `203 
v L "reference" 2 464 "int32" `204 
f B "setup_adc_ports" 2 464 "void(int32 pins,int32 reference)" `202 
f N "set_analog_pins" 2 465 ""
v L "pins" 2 465 "int32" `206 
f B "set_analog_pins" 2 465 "void(int32 pins)" `205 
f N "set_analog_pins" 2 466 ""
v L "pins" 2 466 "int32" `208 
v L "reference" 2 466 "int32" `209 
f B "set_analog_pins" 2 466 "void(int32 pins,int32 reference)" `207 
f N "set_adc_channel" 2 467 ""
v L "channel" 2 467 "int8" `211 
f B "set_adc_channel" 2 467 "void(int8 channel)" `210  "Constants used in SETUP_ADC_PORTS() and SET_ANALOG_PINS() are:"
d G "sAN0" 2 471 "1" "| A0"
d G "sAN1" 2 472 "2" "| A1"
d G "sAN2" 2 473 "4" "| A2"
d G "sAN3" 2 474 "8" "| A3"
d G "sAN4" 2 475 "16" "| A5"
d G "sAN5" 2 476 "32" "| E0"
d G "sAN6" 2 477 "64" "| E1"
d G "sAN7" 2 478 "128" "| E2"
d G "sAN8" 2 479 "0x10000" "| B2"
d G "sAN9" 2 480 "0x20000" "| B3"
d G "sAN10" 2 481 "0x40000" "| B1"
d G "sAN11" 2 482 "0x80000" "| B4"
d G "sAN12" 2 483 "0x100000" "| B0"
d G "sAN13" 2 484 "0x200000" "| B5"
d G "NO_ANALOGS" 2 485 "0" "None"
d G "ALL_ANALOG" 2 486 "0x1F00FF" "A0 A1 A2 A3 A5 E0 E1 E2 B0 B1 B2 B3 B4 B5"
d G "VSS_VDD" 2 489 "0x0000" "| Range 0-Vdd"
d G "VSS_VREF" 2 490 "0x1000" "| Range 0-Vref"
d G "VREF_VREF" 2 491 "0x3000" "| Range Vref-Vref"
d G "VREF_VDD" 2 492 "0x2000" "| Range Vref-Vdd"
d G "ADC_START_AND_READ" 2 495 "7" "This is the default if nothing is specified"
d G "ADC_START_ONLY" 2 496 "1"
d G "ADC_READ_ONLY" 2 497 "6"
c L "set_adc_channel" 2 3 3 "FUNCTION"
f N "abs" 2 503 ""
v L "x" 2 503 "sint8" `213 
f B "abs" 2 503 "sint8(sint8 x)" `212 
f N "abs" 2 504 ""
v L "x" 2 504 "sint16" `215 
f B "abs" 2 504 "sint16(sint16 x)" `214 
f N "abs" 2 505 ""
v L "x" 2 505 "sint32" `217 
f B "abs" 2 505 "sint32(sint32 x)" `216 
f N "abs" 2 506 ""
v L "x" 2 506 "float" `219 
f B "abs" 2 506 "float(float x)" `218 
f N "_mul" 2 507 ""
v L "??65535" 2 507 "int8" `221 
v L "??65535" 2 507 "int8" `222 
f B "_mul" 2 507 "int16(int8 ,int8 )" `220 
f N "_mul" 2 508 ""
v L "??65535" 2 508 "sint8" `224 
v L "??65535" 2 508 "sint8" `225 
f B "_mul" 2 508 "sint16(sint8 ,sint8 )" `223 
f N "_mul" 2 509 ""
v L "??65535" 2 509 "int16" `227 
v L "??65535" 2 509 "int16" `228 
f B "_mul" 2 509 "int32(int16 ,int16 )" `226 
f N "_mul" 2 510 ""
v L "??65535" 2 510 "sint16" `230 
v L "??65535" 2 510 "sint16" `231 
f B "_mul" 2 510 "sint32(sint16 ,sint16 )" `229  "Memory Manipulation Prototypes:"
f N "read_bank" 2 513 ""
v L "bank" 2 513 "int8" `233 
v L "offset" 2 513 "int8" `234 
f B "read_bank" 2 513 "int8(int8 bank,int8 offset)" `232 
f N "write_bank" 2 514 ""
v L "bank" 2 514 "int8" `236 
v L "offset" 2 514 "int8" `237 
v L "value" 2 514 "int8" `238 
f B "write_bank" 2 514 "void(int8 bank,int8 offset,int8 value)" `235 
f N "strcpy" 2 515 ""
v L "dest" 2 515 "*int8" `240 
v L "src" 2 515 "*int8" `241 
f B "strcpy" 2 515 "void(*int8 dest,*int8 src)" `239 
f N "memset" 2 516 ""
v L "destination" 2 516 "*int8" `243 
v L "value" 2 516 "int8" `244 
v L "num" 2 516 "int16" `245 
f B "memset" 2 516 "void(*int8 destination,int8 value,int16 num)" `242 
f N "memcpy" 2 517 ""
v L "destination" 2 517 "*int8" `247 
v L "source" 2 517 "*int8" `248 
v L "num" 2 517 "int16" `249 
f B "memcpy" 2 517 "void(*int8 destination,*int8 source,int16 num)" `246  "String Prototypes:"
f N "toupper" 2 520 ""
v L "cvalue" 2 520 "int8" `251 
f B "toupper" 2 520 "int8(int8 cvalue)" `250 
f N "tolower" 2 521 ""
v L "cvalue" 2 521 "int8" `253 
f B "tolower" 2 521 "int8(int8 cvalue)" `252 
f N "sprintf" 2 522 ""
v L "string" 2 522 "*int8" `255 
v L "cstring" 2 522 "*int8" `256 
f B "sprintf" 2 522 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `254  "Data Manipulators Prototypes:"
f N "shift_left" 2 525 ""
v L "address" 2 525 "*int8" `259 
v L "bytes" 2 525 "int8" `260 
v L "value" 2 525 "int8" `261 
f B "shift_left" 2 525 "int8(*int8 address,int8 bytes,int8 value)" `258 
f N "shift_right" 2 526 ""
v L "address" 2 526 "*int8" `263 
v L "bytes" 2 526 "int8" `264 
v L "value" 2 526 "int8" `265 
f B "shift_right" 2 526 "int8(*int8 address,int8 bytes,int8 value)" `262 
f N "rotate_left" 2 527 ""
v L "address" 2 527 "*int8" `267 
v L "bytes" 2 527 "int8" `268 
f B "rotate_left" 2 527 "void(*int8 address,int8 bytes)" `266 
f N "rotate_right" 2 528 ""
v L "address" 2 528 "*int8" `270 
v L "bytes" 2 528 "int8" `271 
f B "rotate_right" 2 528 "void(*int8 address,int8 bytes)" `269 
f N "swap" 2 529 ""
v L "value" 2 529 "int8" `273 
f B "swap" 2 529 "void(int8 value)" `272 
f N "make8" 2 530 ""
v L "var" 2 530 "int16" `275 
v L "offset" 2 530 "int8" `276 
f B "make8" 2 530 "int8(int16 var,int8 offset)" `274 
f N "make8" 2 531 ""
v L "var" 2 531 "int32" `278 
v L "offset" 2 531 "int8" `279 
f B "make8" 2 531 "int8(int32 var,int8 offset)" `277 
f N "make16" 2 532 ""
v L "varhigh" 2 532 "int8" `281 
v L "varlow" 2 532 "int8" `282 
f B "make16" 2 532 "int16(int8 varhigh,int8 varlow)" `280 
f N "make32" 2 533 ""
v L "var1" 2 533 "int16" `284 
f B "make32" 2 533 "int32(int16 var1)" `283 
f N "make32" 2 534 ""
v L "var1" 2 534 "int16" `286 
v L "var2" 2 534 "int16" `287 
f B "make32" 2 534 "int32(int16 var1,int16 var2)" `285 
f N "make32" 2 535 ""
v L "var1" 2 535 "int16" `289 
v L "var2" 2 535 "int8" `290 
f B "make32" 2 535 "int32(int16 var1,int8 var2)" `288 
f N "make32" 2 536 ""
v L "var1" 2 536 "int16" `292 
v L "var2" 2 536 "int8" `293 
v L "var3" 2 536 "int8" `294 
f B "make32" 2 536 "int32(int16 var1,int8 var2,int8 var3)" `291 
f N "make32" 2 537 ""
v L "var1" 2 537 "int8" `296 
f B "make32" 2 537 "int32(int8 var1)" `295 
f N "make32" 2 538 ""
v L "var1" 2 538 "int8" `298 
v L "var2" 2 538 "int8" `299 
f B "make32" 2 538 "int32(int8 var1,int8 var2)" `297 
f N "make32" 2 539 ""
v L "var1" 2 539 "int8" `301 
v L "var2" 2 539 "int8" `302 
v L "var3" 2 539 "int8" `303 
f B "make32" 2 539 "int32(int8 var1,int8 var2,int8 var3)" `300 
f N "make32" 2 540 ""
v L "var1" 2 540 "int8" `305 
v L "var2" 2 540 "int8" `306 
v L "var3" 2 540 "int8" `307 
v L "var4" 2 540 "int8" `308 
f B "make32" 2 540 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `304 
f N "make32" 2 541 ""
v L "var1" 2 541 "int8" `310 
v L "var2" 2 541 "int16" `311 
f B "make32" 2 541 "int32(int8 var1,int16 var2)" `309 
f N "make32" 2 542 ""
v L "var1" 2 542 "int8" `313 
v L "var2" 2 542 "int16" `314 
v L "var3" 2 542 "int8" `315 
f B "make32" 2 542 "int32(int8 var1,int16 var2,int8 var3)" `312 
f N "make32" 2 543 ""
v L "var1" 2 543 "int8" `317 
v L "var2" 2 543 "int8" `318 
v L "var3" 2 543 "int16" `319 
f B "make32" 2 543 "int32(int8 var1,int8 var2,int16 var3)" `316 
f N "bit_set" 2 544 ""
v L "var" 2 544 "int8" `321 
v L "bit" 2 544 "int8" `322 
f B "bit_set" 2 544 "void(int8 var,int8 bit)" `320 
f N "bit_set" 2 545 ""
v L "var" 2 545 "int16" `324 
v L "bit" 2 545 "int8" `325 
f B "bit_set" 2 545 "void(int16 var,int8 bit)" `323 
f N "bit_set" 2 546 ""
v L "var" 2 546 "int32" `327 
v L "bit" 2 546 "int8" `328 
f B "bit_set" 2 546 "void(int32 var,int8 bit)" `326 
f N "bit_clear" 2 547 ""
v L "var" 2 547 "int8" `330 
v L "bit" 2 547 "int8" `331 
f B "bit_clear" 2 547 "void(int8 var,int8 bit)" `329 
f N "bit_clear" 2 548 ""
v L "var" 2 548 "int16" `333 
v L "bit" 2 548 "int8" `334 
f B "bit_clear" 2 548 "void(int16 var,int8 bit)" `332 
f N "bit_clear" 2 549 ""
v L "var" 2 549 "int32" `336 
v L "bit" 2 549 "int8" `337 
f B "bit_clear" 2 549 "void(int32 var,int8 bit)" `335 
f N "bit_test" 2 550 ""
v L "var" 2 550 "int8" `339 
v L "bit" 2 550 "int8" `340 
f B "bit_test" 2 550 "int8(int8 var,int8 bit)" `338 
f N "bit_test" 2 551 ""
v L "var" 2 551 "int16" `342 
v L "bit" 2 551 "int8" `343 
f B "bit_test" 2 551 "int8(int16 var,int8 bit)" `341 
f N "bit_test" 2 552 ""
v L "var" 2 552 "int32" `345 
v L "bit" 2 552 "int8" `346 
f B "bit_test" 2 552 "int8(int32 var,int8 bit)" `344  "#use delay() Prototypes:"
f N "delay_cycles" 2 555 ""
v L "count" 2 555 "int8" `348 
f B "delay_cycles" 2 555 "void(int8 count)" `347 
f N "delay_ms" 2 556 ""
v L "time" 2 556 "int16" `350 
f B "delay_ms" 2 556 "void(int16 time)" `349 
f N "delay_us" 2 557 ""
v L "time" 2 557 "int16" `352 
f B "delay_us" 2 557 "void(int16 time)" `351  "#use rs232() Prototypes:"
f N "putchar" 2 560 ""
v L "cdata" 2 560 "int8" `354 
f B "putchar" 2 560 "void(int8 cdata)" `353 
f N "putchar" 2 561 ""
v L "cdata" 2 561 "int8" `356 
v L "stream" 2 561 "int8" `357 
f B "putchar" 2 561 "void(int8 cdata,int8 stream)" `355 
f N "puts" 2 562 ""
v L "string" 2 562 "*int8" `359 
f B "puts" 2 562 "void(*int8 string)" `358 
f N "puts" 2 563 ""
v L "string" 2 563 "*int8" `361 
v L "stream" 2 563 "int8" `362 
f B "puts" 2 563 "void(*int8 string,int8 stream)" `360 
f N "getch" 2 564 ""
f B "getch" 2 564 "int8()" `363 
f N "getch" 2 565 ""
v L "stream" 2 565 "int8" `365 
f B "getch" 2 565 "int8(int8 stream)" `364 
f N "gets" 2 566 ""
v L "string" 2 566 "*int8" `367 
f B "gets" 2 566 "void(*int8 string)" `366 
f N "gets" 2 567 ""
v L "string" 2 567 "*int8" `369 
v L "stream" 2 567 "int8" `370 
f B "gets" 2 567 "void(*int8 string,int8 stream)" `368 
f N "kbhit" 2 568 ""
f B "kbhit" 2 568 "int8()" `371 
f N "kbhit" 2 569 ""
v L "stream" 2 569 "int8" `373 
f B "kbhit" 2 569 "int8(int8 stream)" `372 
f N "printf" 2 570 ""
v L "string" 2 570 "*int8" `375 
f B "printf" 2 570 "void(*int8 string,*int8 _VA_LIST)" `374 
f N "fprintf" 2 571 ""
v L "stream" 2 571 "int8" `378 
v L "string" 2 571 "*int8" `379 
f B "fprintf" 2 571 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `377 
f N "putc_send" 2 572 ""
f B "putc_send" 2 572 "void()" `381 
f N "fputc_send" 2 573 ""
v L "stream" 2 573 "int8" `383 
f B "fputc_send" 2 573 "void(int8 stream)" `382 
f N "rcv_buffer_full" 2 574 ""
f B "rcv_buffer_full" 2 574 "int8()" `384 
f N "rcv_buffer_full" 2 575 ""
v L "stream" 2 575 "int8" `386 
f B "rcv_buffer_full" 2 575 "int8(int8 stream)" `385 
f N "rcv_buffer_bytes" 2 576 ""
f B "rcv_buffer_bytes" 2 576 "int16()" `387 
f N "rcv_buffer_bytes" 2 577 ""
v L "stream" 2 577 "int8" `389 
f B "rcv_buffer_bytes" 2 577 "int16(int8 stream)" `388 
f N "tx_buffer_full" 2 578 ""
f B "tx_buffer_full" 2 578 "int8()" `390 
f N "tx_buffer_full" 2 579 ""
v L "stream" 2 579 "int8" `392 
f B "tx_buffer_full" 2 579 "int8(int8 stream)" `391 
f N "tx_buffer_bytes" 2 580 ""
f B "tx_buffer_bytes" 2 580 "int16()" `393 
f N "tx_buffer_bytes" 2 581 ""
v L "stream" 2 581 "int8" `395 
f B "tx_buffer_bytes" 2 581 "int16(int8 stream)" `394  "#use i2c() Prototypes:"
f N "i2c_read" 2 584 ""
f B "i2c_read" 2 584 "int8()" `396 
f N "i2c_read" 2 585 ""
v L "ack" 2 585 "int8" `398 
f B "i2c_read" 2 585 "int8(int8 ack)" `397 
f N "i2c_read" 2 586 ""
v L "stream" 2 586 "int8" `400 
v L "ack" 2 586 "int8" `401 
f B "i2c_read" 2 586 "int8(int8 stream,int8 ack)" `399 
f N "i2c_write" 2 587 ""
v L "data" 2 587 "int8" `403 
f B "i2c_write" 2 587 "int8(int8 data)" `402 
f N "i2c_write" 2 588 ""
v L "stream" 2 588 "int8" `405 
v L "data" 2 588 "int8" `406 
f B "i2c_write" 2 588 "int8(int8 stream,int8 data)" `404 
f N "i2c_start" 2 589 ""
f B "i2c_start" 2 589 "void()" `407 
f N "i2c_start" 2 590 ""
v L "stream" 2 590 "int8" `409 
f B "i2c_start" 2 590 "void(int8 stream)" `408 
f N "i2c_start" 2 591 ""
v L "stream" 2 591 "int8" `411 
v L "restart" 2 591 "int8" `412 
f B "i2c_start" 2 591 "void(int8 stream,int8 restart)" `410 
f N "i2c_stop" 2 592 ""
f B "i2c_stop" 2 592 "void()" `413 
f N "i2c_stop" 2 593 ""
v L "stream" 2 593 "int8" `415 
f B "i2c_stop" 2 593 "void(int8 stream)" `414 
f N "i2c_isr_state" 2 594 ""
f B "i2c_isr_state" 2 594 "int8()" `416 
f N "i2c_slaveaddr" 2 595 ""
v L "addr" 2 595 "int8" `418 
f B "i2c_slaveaddr" 2 595 "void(int8 addr)" `417 
f N "i2c_slaveaddr" 2 596 ""
v L "stream" 2 596 "int8" `420 
v L "addr" 2 596 "int8" `421 
f B "i2c_slaveaddr" 2 596 "void(int8 stream,int8 addr)" `419 
f N "i2c_poll" 2 597 ""
f B "i2c_poll" 2 597 "int8()" `422 
f N "i2c_poll" 2 598 ""
v L "stream" 2 598 "int8" `424 
f B "i2c_poll" 2 598 "int8(int8 stream)" `423 
f N "i2c_init" 2 599 ""
v L "baud" 2 599 "int32" `426 
f B "i2c_init" 2 599 "void(int32 baud)" `425 
f N "i2c_init" 2 600 ""
v L "stream" 2 600 "int8" `428 
v L "baud" 2 600 "int32" `429 
f B "i2c_init" 2 600 "void(int8 stream,int32 baud)" `427 
f N "i2c_transfer" 2 601 ""
v L "address" 2 601 "int8" `431 
v L "wData" 2 601 "*int8" `432 
v L "wCount" 2 601 "int8" `433 
f B "i2c_transfer" 2 601 "int8(int8 address,*int8 wData,int8 wCount)" `430 
f N "i2c_transfer" 2 602 ""
v L "address" 2 602 "int8" `435 
v L "wData" 2 602 "*int8" `436 
v L "wCount" 2 602 "int8" `437 
v L "rData" 2 602 "*int8" `438 
v L "rCount" 2 602 "*int8" `439 
f B "i2c_transfer" 2 602 "int8(int8 address,*int8 wData,int8 wCount,*int8 rData,*int8 rCount)" `434 
f N "i2c_transfer" 2 603 ""
v L "stream" 2 603 "int8" `441 
v L "address" 2 603 "int8" `442 
v L "wData" 2 603 "*int8" `443 
v L "wCount" 2 603 "int8" `444 
f B "i2c_transfer" 2 603 "int8(int8 stream,int8 address,*int8 wData,int8 wCount)" `440 
f N "i2c_transfer" 2 604 ""
v L "stream" 2 604 "int8" `446 
v L "address" 2 604 "int8" `447 
v L "wData" 2 604 "*int8" `448 
v L "wCount" 2 604 "int8" `449 
v L "rData" 2 604 "*int8" `450 
v L "rCount" 2 604 "*int8" `451 
f B "i2c_transfer" 2 604 "int8(int8 stream,int8 address,*int8 wData,int8 wCount,*int8 rData,*int8 rCount)" `445 
f N "i2c_transfer_out" 2 605 ""
v L "address" 2 605 "int8" `453 
v L "wData" 2 605 "*int8" `454 
v L "wCount" 2 605 "int8" `455 
f B "i2c_transfer_out" 2 605 "int8(int8 address,*int8 wData,int8 wCount)" `452 
f N "i2c_transfer_out" 2 606 ""
v L "stream" 2 606 "int8" `457 
v L "address" 2 606 "int8" `458 
v L "wData" 2 606 "*int8" `459 
v L "wCount" 2 606 "int8" `460 
f B "i2c_transfer_out" 2 606 "int8(int8 stream,int8 address,*int8 wData,int8 wCount)" `456 
f N "i2c_transfer_in" 2 607 ""
v L "address" 2 607 "int8" `462 
v L "rData" 2 607 "*int8" `463 
v L "rCount" 2 607 "int8" `464 
f B "i2c_transfer_in" 2 607 "int8(int8 address,*int8 rData,int8 rCount)" `461 
f N "i2c_transfer_in" 2 608 ""
v L "stream" 2 608 "int8" `466 
v L "address" 2 608 "int8" `467 
v L "rData" 2 608 "*int8" `468 
v L "rCount" 2 608 "int8" `469 
f B "i2c_transfer_in" 2 608 "int8(int8 stream,int8 address,*int8 rData,int8 rCount)" `465  "#use spi() Prototypes:"
f N "spi_xfer" 2 611 ""
f B "spi_xfer" 2 611 "int8()" `470 
f N "spi_xfer" 2 612 ""
f G "spi_xfer" 2 612 "int16(int8 data)" `471 
f N "spi_xfer" 2 613 ""
f G "spi_xfer" 2 613 "int32(int8 data)" `471 
f N "spi_xfer" 2 614 ""
v L "data" 2 614 "int8" `472 
f B "spi_xfer" 2 614 "int8(int8 data)" `471 
f N "spi_xfer" 2 615 ""
v L "data" 2 615 "int16" `474 
f B "spi_xfer" 2 615 "int16(int16 data)" `473 
f N "spi_xfer" 2 616 ""
v L "data" 2 616 "int32" `476 
f B "spi_xfer" 2 616 "int32(int32 data)" `475 
f N "spi_xfer" 2 617 ""
v L "stream" 2 617 "int8" `478 
v L "data" 2 617 "int8" `479 
f B "spi_xfer" 2 617 "int8(int8 stream,int8 data)" `477 
f N "spi_xfer" 2 618 ""
v L "stream" 2 618 "int8" `481 
v L "data" 2 618 "int16" `482 
f B "spi_xfer" 2 618 "int16(int8 stream,int16 data)" `480 
f N "spi_xfer" 2 619 ""
v L "stream" 2 619 "int8" `484 
v L "data" 2 619 "int32" `485 
f B "spi_xfer" 2 619 "int32(int8 stream,int32 data)" `483 
f N "spi_xfer" 2 620 ""
v L "stream" 2 620 "int8" `487 
v L "data" 2 620 "int8" `488 
v L "bits" 2 620 "int8" `489 
f B "spi_xfer" 2 620 "int8(int8 stream,int8 data,int8 bits)" `486 
f N "spi_xfer" 2 621 ""
v L "stream" 2 621 "int8" `491 
v L "data" 2 621 "int16" `492 
v L "bits" 2 621 "int8" `493 
f B "spi_xfer" 2 621 "int16(int8 stream,int16 data,int8 bits)" `490 
f N "spi_xfer" 2 622 ""
v L "stream" 2 622 "int8" `495 
v L "data" 2 622 "int32" `496 
v L "bits" 2 622 "int8" `497 
f B "spi_xfer" 2 622 "int32(int8 stream,int32 data,int8 bits)" `494 
f N "spi_init" 2 623 ""
v L "baud" 2 623 "int32" `499 
f B "spi_init" 2 623 "void(int32 baud)" `498 
f N "spi_init" 2 624 ""
v L "stream" 2 624 "int8" `501 
v L "baud" 2 624 "int32" `502 
f B "spi_init" 2 624 "void(int8 stream,int32 baud)" `500 
f N "spi_speed" 2 625 ""
v L "baud" 2 625 "int32" `504 
f B "spi_speed" 2 625 "void(int32 baud)" `503 
f N "spi_speed" 2 626 ""
v L "stream" 2 626 "int8" `506 
v L "baud" 2 626 "int32" `507 
f B "spi_speed" 2 626 "void(int8 stream,int32 baud)" `505 
f N "spi_speed" 2 627 ""
v L "stream" 2 627 "int8" `509 
v L "baud" 2 627 "int32" `510 
v L "clock" 2 627 "int32" `511 
f B "spi_speed" 2 627 "void(int8 stream,int32 baud,int32 clock)" `508 
f N "spi_prewrite" 2 628 ""
v L "data" 2 628 "int8" `513 
f B "spi_prewrite" 2 628 "void(int8 data)" `512 
f N "spi_prewrite" 2 629 ""
v L "data" 2 629 "int16" `515 
f B "spi_prewrite" 2 629 "void(int16 data)" `514 
f N "spi_prewrite" 2 630 ""
v L "data" 2 630 "int32" `517 
f B "spi_prewrite" 2 630 "void(int32 data)" `516 
f N "spi_prewrite" 2 631 ""
v L "??65535" 2 631 "int8" `519 
v L "data" 2 631 "int8" `520 
f B "spi_prewrite" 2 631 "void(int8 ,int8 data)" `518 
f N "spi_prewrite" 2 632 ""
v L "??65535" 2 632 "int8" `522 
v L "data" 2 632 "int16" `523 
f B "spi_prewrite" 2 632 "void(int8 ,int16 data)" `521 
f N "spi_prewrite" 2 633 ""
v L "??65535" 2 633 "int8" `525 
v L "data" 2 633 "int32" `526 
f B "spi_prewrite" 2 633 "void(int8 ,int32 data)" `524 
f N "spi_xfer_in" 2 634 ""
f B "spi_xfer_in" 2 634 "int8()" `527 
f N "spi_xfer_in" 2 635 ""
f G "spi_xfer_in" 2 635 "int16(int8 bits)" `528 
f N "spi_xfer_in" 2 636 ""
f G "spi_xfer_in" 2 636 "int32(int8 bits)" `528 
f N "spi_xfer_in" 2 637 ""
v L "bits" 2 637 "int8" `529 
f B "spi_xfer_in" 2 637 "int8(int8 bits)" `528 
f N "spi_xfer_in" 2 638 ""
v L "bits" 2 638 "int8" `531 
f G "spi_xfer_in" 2 638 "int16(int8 bits,int8 bits)" `530 
f N "spi_xfer_in" 2 639 ""
v L "bits" 2 639 "int8" `531 
f G "spi_xfer_in" 2 639 "int32(int8 bits,int8 bits)" `530 
f N "spi_xfer_in" 2 640 ""
v L "stream" 2 640 "int8" `531 
v L "bits" 2 640 "int8" `532 
f B "spi_xfer_in" 2 640 "int8(int8 stream,int8 bits)" `530 
f N "spi_xfer_in" 2 641 ""
v L "stream" 2 641 "int8" `531 
v L "bits" 2 641 "int8" `535 
f G "spi_xfer_in" 2 641 "int16(int8 stream,int8 bits,int16 count)" `533 
f N "spi_xfer_in" 2 642 ""
v L "stream" 2 642 "int8" `531 
v L "bits" 2 642 "int8" `535 
f G "spi_xfer_in" 2 642 "int32(int8 stream,int8 bits,int16 count)" `533 
f N "spi_transfer" 2 643 ""
v L "wData" 2 643 "*int8" `534 
v L "rData" 2 643 "*int8" `535 
v L "count" 2 643 "int16" `536 
f B "spi_transfer" 2 643 "void(*int8 wData,*int8 rData,int16 count)" `533 
f N "spi_transfer" 2 644 ""
v L "stream" 2 644 "int8" `538 
v L "wData" 2 644 "*int8" `539 
v L "rData" 2 644 "*int8" `540 
v L "count" 2 644 "int16" `541 
f B "spi_transfer" 2 644 "void(int8 stream,*int8 wData,*int8 rData,int16 count)" `537 
f N "spi_transfer_write" 2 645 ""
v L "wData" 2 645 "*int8" `543 
v L "count" 2 645 "int16" `544 
f B "spi_transfer_write" 2 645 "void(*int8 wData,int16 count)" `542 
f N "spi_transfer_write" 2 646 ""
v L "stream" 2 646 "int8" `546 
v L "wData" 2 646 "*int8" `547 
v L "count" 2 646 "int16" `548 
f B "spi_transfer_write" 2 646 "void(int8 stream,*int8 wData,int16 count)" `545 
f N "spi_transfer_read" 2 647 ""
v L "rData" 2 647 "*int8" `550 
v L "count" 2 647 "int16" `551 
f B "spi_transfer_read" 2 647 "void(*int8 rData,int16 count)" `549 
f N "spi_transfer_read" 2 648 ""
v L "stream" 2 648 "int8" `553 
v L "rData" 2 648 "*int8" `554 
v L "count" 2 648 "int16" `555 
f B "spi_transfer_read" 2 648 "void(int8 stream,*int8 rData,int16 count)" `552  "#use rtos() Prototypes:"
f N "rtos_run" 2 651 ""
f B "rtos_run" 2 651 "void()" `556 
f N "rtos_yield" 2 652 ""
f B "rtos_yield" 2 652 "void()" `557 
f N "rtos_enable" 2 653 ""
v L "task" 2 653 "int8" `559 
f B "rtos_enable" 2 653 "void(int8 task)" `558 
f N "rtos_disable" 2 654 ""
v L "task" 2 654 "int8" `561 
f B "rtos_disable" 2 654 "void(int8 task)" `560 
f N "rtos_terminate" 2 655 ""
f B "rtos_terminate" 2 655 "void()" `562 
f N "rtos_await" 2 656 ""
v L "flag" 2 656 "int8" `564 
f B "rtos_await" 2 656 "void(int8 flag)" `563 
f N "rtos_wait" 2 657 ""
v L "sem" 2 657 "int8" `566 
f B "rtos_wait" 2 657 "void(int8 sem)" `565 
f N "rtos_signal" 2 658 ""
v L "sem" 2 658 "int8" `568 
f B "rtos_signal" 2 658 "void(int8 sem)" `567 
f N "rtos_msg_send" 2 659 ""
v L "task" 2 659 "int8" `570 
v L "msg" 2 659 "int8" `571 
f B "rtos_msg_send" 2 659 "void(int8 task,int8 msg)" `569 
f N "rtos_msg_read" 2 660 ""
f B "rtos_msg_read" 2 660 "int8()" `572 
f N "rtos_msg_poll" 2 661 ""
f B "rtos_msg_poll" 2 661 "int8()" `573 
f N "rtos_overrun" 2 662 ""
v L "task" 2 662 "int8" `575 
f B "rtos_overrun" 2 662 "int8(int8 task)" `574 
f N "rtos_stats" 2 663 ""
v L "task" 2 663 "int8" `577 
v L "stat" 2 663 "*int8" `578 
f B "rtos_stats" 2 663 "void(int8 task,*int8 stat)" `576  "#use timer() Prototypes:"
f N "get_ticks" 2 666 ""
f B "get_ticks" 2 666 "int8()" `579 
f N "get_ticks" 2 667 ""
f G "get_ticks" 2 667 "int16(int8 stream)" `580 
f N "get_ticks" 2 668 ""
f G "get_ticks" 2 668 "int32(int8 stream)" `580 
f N "get_ticks" 2 669 ""
v L "stream" 2 669 "int8" `581 
f B "get_ticks" 2 669 "int8(int8 stream)" `580 
f N "get_ticks" 2 670 ""
v L "stream" 2 670 "int8" `583 
f G "get_ticks" 2 670 "int16(int8 stream)" `582 
f N "get_ticks" 2 671 ""
v L "stream" 2 671 "int8" `583 
f G "get_ticks" 2 671 "int32(int8 stream)" `582 
f N "set_ticks" 2 672 ""
v L "value" 2 672 "int8" `583 
f B "set_ticks" 2 672 "void(int8 value)" `582 
f N "set_ticks" 2 673 ""
v L "value" 2 673 "int16" `585 
f B "set_ticks" 2 673 "void(int16 value)" `584 
f N "set_ticks" 2 674 ""
v L "value" 2 674 "int32" `587 
f B "set_ticks" 2 674 "void(int32 value)" `586 
f N "set_ticks" 2 675 ""
v L "stream" 2 675 "int8" `589 
v L "value" 2 675 "int8" `590 
f B "set_ticks" 2 675 "void(int8 stream,int8 value)" `588 
f N "set_ticks" 2 676 ""
v L "stream" 2 676 "int8" `592 
v L "value" 2 676 "int16" `593 
f B "set_ticks" 2 676 "void(int8 stream,int16 value)" `591 
f N "set_ticks" 2 677 ""
v L "stream" 2 677 "int8" `595 
v L "value" 2 677 "int32" `596 
f B "set_ticks" 2 677 "void(int8 stream,int32 value)" `594  "#use pwm() Prototypes:"
f N "pwm_on" 2 680 ""
f B "pwm_on" 2 680 "void()" `597 
f N "pwm_on" 2 681 ""
v L "stream" 2 681 "int8" `599 
f B "pwm_on" 2 681 "void(int8 stream)" `598 
f N "pwm_off" 2 682 ""
f B "pwm_off" 2 682 "void()" `600 
f N "pwm_off" 2 683 ""
v L "stream" 2 683 "int8" `602 
f B "pwm_off" 2 683 "void(int8 stream)" `601 
f N "pwm_set_duty" 2 684 ""
v L "duty" 2 684 "int16" `604 
f B "pwm_set_duty" 2 684 "void(int16 duty)" `603 
f N "pwm_set_duty" 2 685 ""
v L "stream" 2 685 "int8" `606 
v L "duty" 2 685 "int16" `607 
f B "pwm_set_duty" 2 685 "void(int8 stream,int16 duty)" `605 
f N "pwm_set_duty_percent" 2 686 ""
v L "percent" 2 686 "int16" `609 
f B "pwm_set_duty_percent" 2 686 "void(int16 percent)" `608 
f N "pwm_set_duty_percent" 2 687 ""
v L "stream" 2 687 "int8" `611 
v L "percent" 2 687 "int16" `612 
f B "pwm_set_duty_percent" 2 687 "void(int8 stream,int16 percent)" `610 
f N "pwm_set_frequency" 2 688 ""
v L "frequency" 2 688 "int32" `614 
f B "pwm_set_frequency" 2 688 "void(int32 frequency)" `613 
f N "pwm_set_frequency" 2 689 ""
v L "stream" 2 689 "int8" `616 
v L "frequency" 2 689 "int32" `617 
f B "pwm_set_frequency" 2 689 "void(int8 stream,int32 frequency)" `615  "#use capture() Prototypes:"
f N "get_capture_time" 2 692 ""
f B "get_capture_time" 2 692 "int16()" `618 
f N "get_capture_time" 2 693 ""
v L "stream" 2 693 "int8" `620 
f B "get_capture_time" 2 693 "int16(int8 stream)" `619 
f N "get_capture_event" 2 694 ""
f B "get_capture_event" 2 694 "int8()" `621 
f N "get_capture_event" 2 695 ""
v L "stream" 2 695 "int8" `623 
f B "get_capture_event" 2 695 "int8(int8 stream)" `622  "Enviroment Prototypes:"
c L "get_capture_event" 2 3 2 "FUNCTION"
f N "goto_address" 2 708 ""
v L "address" 2 708 "int16" `625 
f B "goto_address" 2 708 "void(int16 address)" `624 
f N "label_address" 2 709 ""
v L "label" 2 709 "int16" `627 
f B "label_address" 2 709 "int16(int16 label)" `626  "Program Memory Read Prototypes:"
f N "read_program_memory" 2 712 ""
v L "address" 2 712 "int16" `629 
v L "dataptr" 2 712 "*int8" `630 
v L "count" 2 712 "int16" `631 
f B "read_program_memory" 2 712 "void(int16 address,*int8 dataptr,int16 count)" `628 
f N "read_program_eeprom" 2 713 ""
v L "address" 2 713 "int16" `633 
f B "read_program_eeprom" 2 713 "int16(int16 address)" `632  "Program Memory Write Prototypes:"
f N "erase_program_eeprom" 2 716 ""
v L "address" 2 716 "int16" `635 
f B "erase_program_eeprom" 2 716 "void(int16 address)" `634 
f N "write_program_memory" 2 717 ""
v L "address" 2 717 "int16" `637 
v L "dataptr" 2 717 "*int8" `638 
v L "count" 2 717 "int16" `639 
f B "write_program_memory" 2 717 "void(int16 address,*int8 dataptr,int16 count)" `636 
f N "write_program_eeprom" 2 718 ""
v L "address" 2 718 "int16" `641 
v L "data" 2 718 "int16" `642 
f B "write_program_eeprom" 2 718 "void(int16 address,int16 data)" `640  "EEPROM Prototypes:"
d G "__EEADDRESS__" 2 725 "unsigned int8"
f N "read_eeprom" 2 728 ""
v L "address" 2 728 "int8" `644 
f B "read_eeprom" 2 728 "int8(int8 address)" `643 
f N "write_eeprom" 2 729 ""
v L "address" 2 729 "int8" `646 
v L "value" 2 729 "int8" `647 
f B "write_eeprom" 2 729 "void(int8 address,int8 value)" `645  "INT"
c L "write_eeprom" 2 3 4 "FUNCTION"
f N "enable_interrupts" 2 736 ""
v L "interrupt" 2 736 "int32" `649 
f B "enable_interrupts" 2 736 "void(int32 interrupt)" `648 
f N "disable_interrupts" 2 737 ""
v L "interrupt" 2 737 "int32" `651 
f B "disable_interrupts" 2 737 "void(int32 interrupt)" `650 
f N "clear_interrupt" 2 738 ""
v L "interrupt" 2 738 "int32" `653 
f B "clear_interrupt" 2 738 "void(int32 interrupt)" `652 
f N "interrupt_active" 2 739 ""
v L "interrupt" 2 739 "int32" `655 
f B "interrupt_active" 2 739 "int8(int32 interrupt)" `654 
f N "interrupt_enabled" 2 740 ""
v L "interrupt" 2 740 "int32" `657 
f B "interrupt_enabled" 2 740 "int8(int32 interrupt)" `656 
f N "ext_int_edge" 2 741 ""
v L "source" 2 741 "int8" `659 
v L "edge" 2 741 "int8" `660 
f B "ext_int_edge" 2 741 "void(int8 source,int8 edge)" `658 
f N "jump_to_isr" 2 742 ""
v L "address" 2 742 "int16" `662 
f B "jump_to_isr" 2 742 "void(int16 address)" `661  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 2 744 "0x40"
d G "H_TO_L" 2 745 "0"
d G "GLOBAL" 2 747 "0x0BC0"
d G "PERIPH" 2 748 "0x0B40"
d G "INT_RTCC" 2 749 "0x000B20"
d G "INT_RB" 2 750 "0x01FF0B08"
d G "INT_EXT_L2H" 2 751 "0x50000B10"
d G "INT_EXT_H2L" 2 752 "0x60000B10"
d G "INT_EXT" 2 753 "0x000B10"
d G "INT_AD" 2 754 "0x008C40"
d G "INT_TBE" 2 755 "0x008C10"
d G "INT_RDA" 2 756 "0x008C20"
d G "INT_TIMER1" 2 757 "0x008C01"
d G "INT_TIMER2" 2 758 "0x008C02"
d G "INT_CCP1" 2 759 "0x008C04"
d G "INT_CCP2" 2 760 "0x008D01"
d G "INT_SSP" 2 761 "0x008C08"
d G "INT_BUSCOL" 2 762 "0x008D08"
d G "INT_EEPROM" 2 763 "0x008D10"
d G "INT_TIMER0" 2 764 "0x000B20"
d G "INT_OSC_FAIL" 2 765 "0x008D80"
d G "INT_COMP" 2 766 "0x008D20"
d G "INT_COMP2" 2 767 "0x008D40"
d G "INT_ULPWU" 2 768 "0x008D04"
d G "INT_RB0" 2 769 "0x1010B08"
d G "INT_RB1" 2 770 "0x1020B08"
d G "INT_RB2" 2 771 "0x1040B08"
d G "INT_RB3" 2 772 "0x1080B08"
d G "INT_RB4" 2 773 "0x1100B08"
d G "INT_RB5" 2 774 "0x1200B08"
d G "INT_RB6" 2 775 "0x1400B08"
d G "INT_RB7" 2 776 "0x1800B08"
D G "LCD_RS_PIN" 0 2 "PIN_B1"
D G "LCD_RW_PIN" 0 3 "PIN_B2"
D G "LCD_ENABLE_PIN" 0 4 "PIN_B3"
D G "LCD_DATA4" 0 5 "PIN_B4"
D G "LCD_DATA5" 0 6 "PIN_B5"
D G "LCD_DATA6" 0 7 "PIN_B6"
D G "LCD_DATA7" 0 8 "PIN_B7"
D G "__LCD_C__" 3 76 ""
C L "jump_to_isr" 3 2 2 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 2 "FUNCTION"
T G "LCD_PIN_MAP" 3 90 "{int1 enable,int1 rs,int1 rw,int1 unused,int4 data}" `673  "this is to improve compatability with previous LCD drivers that accepted"
D G "lcd_output_enable" 3 112 "(x) output_bit(LCD_ENABLE_PIN, x)"
D G "lcd_enable_tris" 3 113 "()  output_drive(LCD_ENABLE_PIN)"
D G "lcd_output_rs" 3 120 "(x) output_bit(LCD_RS_PIN, x)"
D G "lcd_rs_tris" 3 121 "()  output_drive(LCD_RS_PIN)"
D G "lcd_output_rw" 3 128 "(x) output_bit(LCD_RW_PIN, x)"
D G "lcd_rw_tris" 3 129 "()  output_drive(LCD_RW_PIN)"
D G "LCD_TYPE" 3 179 "2" "0=5x7, 1=5x10, 2=2 lines"
D G "LCD_LINE_TWO" 3 183 "0x40" "LCD RAM address for the second line"
D G "LCD_LINE_LENGTH" 3 187 "20"
F N "lcd_read_nibble" 3 190 ""
f G "lcd_read_nibble" 3 190 "int8()" `674 
F N "lcd_read_byte" 3 192 ""
F G "lcd_read_byte" 3 193 "int8()" `675 
V L "low" 3 194 "int8" `676 
V L "high" 3 194 "int8" `677 
F N "lcd_read_nibble" 3 239 ""
F G "lcd_read_nibble" 3 240 "int8()" `674 
V L "n" 3 242 "int8" `678 
C L "lcd_read_nibble" 3 2 1 "FUNCTION"
F N "lcd_send_nibble" 3 256 ""
V L "n" 3 256 "int8" `680 
F G "lcd_send_nibble" 3 257 "void(int8 n)" `679 
C L "lcd_send_nibble" 3 2 1 "FUNCTION"
F N "lcd_send_byte" 3 274 ""
V L "address" 3 274 "int8" `682 
V L "n" 3 274 "int8" `683 
F G "lcd_send_byte" 3 275 "void(int8 address,int8 n,int8 address,int8 high)" `681 
F N "lcd_init" 3 299 ""
F G "lcd_init" 3 300 "void(int8 high)" `684 
V L "i" 3 301 "int8" `685 
V L "LCD_INIT_STRING" 3 302 "int8[4]" `686 
C L "lcd_init" 3 2 2 "FUNCTION"
F N "lcd_gotoxy" 3 345 ""
V L "x" 3 345 "int8" `688 
V L "y" 3 345 "int8" `689 
F G "lcd_gotoxy" 3 346 "void(int8 x,int8 y,int8 x,int8 i)" `687 
V L "address" 3 347 "int8" `690 
F N "lcd_putc" 3 363 ""
V L "c" 3 363 "int8" `692 
F G "lcd_putc" 3 364 "void(int8 c)" `691 
F N "lcd_getc" 3 406 ""
V L "x" 3 406 "int8" `694 
V L "y" 3 406 "int8" `695 
F G "lcd_getc" 3 407 "int8(int8 x,int8 y,int8 x,int8 i)" `693 
V L "value" 3 408 "int8" `696 
C L "lcd_getc" 3 2 1 "FUNCTION"
C L "lcd_set_cgram_char" 3 2 5 "FUNCTION"
F N "lcd_set_cgram_char" 3 424 ""
V L "which" 3 424 "int8" `698 
V L "ptr" 3 424 "*int8" `699 
F G "lcd_set_cgram_char" 3 425 "void(int8 which,*int8 ptr,int8 c,*int8 lcd_getc)" `697 
V L "i" 3 426 "int8" `700 
C L "lcd_set_cgram_char" 3 2 1 "FUNCTION"
F N "lcd_cursor_on" 3 443 ""
V L "on" 3 443 "int8" `702 
F G "lcd_cursor_on" 3 444 "void(int8 on)" `701 
C L "lcd_cursor_on" 3 2 1 "FUNCTION"
C L "lcd_cursor_on" 3 2 1 "FUNCTION"
V G "cont" 0 11 "int16" `703 
V G "valor_ADC" 0 12 "int16" `704 
V G "rpm" 0 13 "float" `705 
C L "ext_isr" 0 11 1 "FUNCTION"
F N "ext_isr" 0 16 ""
F G "ext_isr" 0 16 "void()" `706 
C L "ext_isr" 0 11 1 "FUNCTION"
F N "MAIN" 0 21 ""
F G "MAIN" 0 22 "void()" `707 
C L "MAIN" 0 11 1 "FUNCTION"
C L "MAIN" 0 11 1 "FUNCTION"
C L "MAIN" 0 11 1 "FUNCTION"
C L "MAIN" 0 11 1 "FUNCTION"
C L "MAIN" 0 11 1 "FUNCTION"
C L "MAIN" 0 11 1 "FUNCTION"
C L "MAIN" 0 11 1 "FUNCTION"
C L "MAIN" 0 11 1 "FUNCTION"
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep_ulpwu" 1 0
F B "sleep" 0 0
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "scanf" 1 255
F B "fscanf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "profileout" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "interrupt_enabled" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_eeprom" 1 0
F B "write_eeprom" 2 0
F B "read_program_eeprom" 1 0
F B "write_program_eeprom" 2 0
F B "write_program_memory" 4 0
F B "write_program_memory8" 4 0
F B "read_program_memory" 4 0
F B "read_program_memory8" 4 0
F B "read_rom_memory" 3 0
F B "erase_program_eeprom" 1 0
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "output_c" 1 0
F B "output_e" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "input_c" 0 0
F B "input_e" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "set_tris_c" 1 0
F B "set_tris_e" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "get_tris_c" 0 0
F B "get_tris_e" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "input_change_c" 0 0
F B "input_change_e" 0 0
F B "port_b_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_comparator" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "set_analog_pins" 1 2
F B "get_capture" 0 1
F B "set_compare_time" 1 2
F B "setup_timer_0" 1 0
F B "setup_vref" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_ccp1" 1 2
F B "set_pwm1_duty" 1 0
F B "setup_ccp2" 1 0
F B "set_pwm2_duty" 1 0
F B "setup_oscillator" 0 2
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 2
F B "spi_data_is_in2" 0 0
F B "brownout_enable" 1 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
