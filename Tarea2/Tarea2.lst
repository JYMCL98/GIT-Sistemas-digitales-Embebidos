CCS PCM C Compiler, Version 5.091, 13314               20-jun.-21 20:20

               Filename:   C:\Users\jymcl\Documents\Chapingo\6 Semestre\Sistemas digitales embebidos\Tarea2\Tarea2.lst

               ROM used:   1123 words (14%)
                           Largest free fragment is 2048
               RAM used:   79 (21%) at main() level
                           97 (26%) worst case
               Stack used: 6 locations (5 in main + 1 for interrupts)
               Stack size: 8

0000:  MOVLW  03
0001:  MOVWF  0A
0002:  GOTO   3C4
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BSF    03.6
0016:  MOVF   0D,W
0017:  BCF    03.6
0018:  MOVWF  27
0019:  BSF    03.6
001A:  MOVF   0F,W
001B:  BCF    03.6
001C:  MOVWF  28
001D:  BSF    03.6
001E:  MOVF   0C,W
001F:  BCF    03.6
0020:  MOVWF  29
0021:  BSF    03.6
0022:  MOVF   0E,W
0023:  BCF    03.6
0024:  MOVWF  2A
0025:  BCF    03.7
0026:  BCF    03.5
0027:  BTFSS  0B.5
0028:  GOTO   02B
0029:  BTFSC  0B.2
002A:  GOTO   04C
002B:  MOVF   22,W
002C:  MOVWF  04
002D:  MOVF   23,W
002E:  MOVWF  77
002F:  MOVF   24,W
0030:  MOVWF  78
0031:  MOVF   25,W
0032:  MOVWF  79
0033:  MOVF   26,W
0034:  MOVWF  7A
0035:  MOVF   27,W
0036:  BSF    03.6
0037:  MOVWF  0D
0038:  BCF    03.6
0039:  MOVF   28,W
003A:  BSF    03.6
003B:  MOVWF  0F
003C:  BCF    03.6
003D:  MOVF   29,W
003E:  BSF    03.6
003F:  MOVWF  0C
0040:  BCF    03.6
0041:  MOVF   2A,W
0042:  BSF    03.6
0043:  MOVWF  0E
0044:  BCF    03.6
0045:  MOVF   20,W
0046:  MOVWF  0A
0047:  SWAPF  21,W
0048:  MOVWF  03
0049:  SWAPF  7F,F
004A:  SWAPF  7F,W
004B:  RETFIE
004C:  BCF    0A.3
004D:  BCF    0A.4
004E:  GOTO   065
.................... // Universidad Autónoma Chapingo
.................... // Mecatrónica Agrícola
.................... // 6° 7
.................... // Realizado por:
.................... // Jym Emmanuel Cocotle Lara
.................... 
.................... #include <Tarea2.h>
.................... #include <16F877A.h>
.................... //////////// Standard Header file for the PIC16F877A device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F877A
004F:  DATA C8,37
0050:  DATA F2,30
0051:  DATA 3A,10
0052:  DATA 25,32
0053:  DATA 25,32
0054:  DATA BA,12
0055:  DATA E4,12
0056:  DATA 64,1D
0057:  DATA 25,32
0058:  DATA 25,32
0059:  DATA 00,00
005A:  DATA C8,37
005B:  DATA F2,30
005C:  DATA 3A,10
005D:  DATA 25,32
005E:  DATA 25,32
005F:  DATA BA,12
0060:  DATA E4,12
0061:  DATA 64,1D
0062:  DATA 25,32
0063:  DATA 25,32
0064:  DATA 00,01
*
0217:  MOVF   0B,W
0218:  MOVWF  6C
0219:  BCF    0B.7
021A:  BSF    03.5
021B:  BSF    03.6
021C:  BSF    0C.7
021D:  BSF    0C.0
021E:  NOP
021F:  NOP
0220:  BCF    03.5
0221:  BCF    03.6
0222:  BTFSC  6C.7
0223:  BSF    0B.7
0224:  BTFSC  03.0
0225:  GOTO   24E
0226:  BSF    03.6
0227:  MOVF   0C,W
0228:  ANDLW  7F
0229:  BCF    03.6
022A:  MOVWF  6C
022B:  BSF    03.6
022C:  MOVF   0D,W
022D:  BCF    03.6
022E:  MOVWF  6D
022F:  BSF    03.6
0230:  MOVF   0F,W
0231:  BCF    03.6
0232:  MOVWF  6E
0233:  MOVF   6C,W
0234:  MOVWF  71
0235:  CALL   1EB
0236:  MOVF   6D,W
0237:  BSF    03.6
0238:  MOVWF  0D
0239:  BCF    03.6
023A:  MOVF   6E,W
023B:  BSF    03.6
023C:  MOVWF  0F
023D:  BCF    03.6
023E:  MOVF   0B,W
023F:  MOVWF  6F
0240:  BCF    0B.7
0241:  BSF    03.5
0242:  BSF    03.6
0243:  BSF    0C.7
0244:  BSF    0C.0
0245:  NOP
0246:  NOP
0247:  BCF    03.5
0248:  BCF    03.6
0249:  BTFSC  6F.7
024A:  BSF    0B.7
024B:  DECFSZ 6B,F
024C:  GOTO   24E
024D:  GOTO   26D
024E:  BSF    03.6
024F:  RLF    0C,W
0250:  RLF    0E,W
0251:  ANDLW  7F
0252:  BCF    03.6
0253:  MOVWF  6C
0254:  BSF    03.6
0255:  MOVF   0D,W
0256:  BCF    03.6
0257:  MOVWF  6D
0258:  BSF    03.6
0259:  MOVF   0F,W
025A:  BCF    03.6
025B:  MOVWF  6E
025C:  MOVF   6C,W
025D:  MOVWF  71
025E:  CALL   1EB
025F:  MOVF   6D,W
0260:  BSF    03.6
0261:  MOVWF  0D
0262:  BCF    03.6
0263:  MOVF   6E,W
0264:  BSF    03.6
0265:  MOVWF  0F
0266:  INCF   0D,F
0267:  BTFSC  03.2
0268:  INCF   0F,F
0269:  BCF    03.0
026A:  BCF    03.6
026B:  DECFSZ 6B,F
026C:  GOTO   217
026D:  RETURN
026E:  MOVF   72,W
026F:  CLRF   78
0270:  SUBWF  71,W
0271:  BTFSC  03.0
0272:  GOTO   276
0273:  MOVF   71,W
0274:  MOVWF  77
0275:  GOTO   282
0276:  CLRF   77
0277:  MOVLW  08
0278:  MOVWF  73
0279:  RLF    71,F
027A:  RLF    77,F
027B:  MOVF   72,W
027C:  SUBWF  77,W
027D:  BTFSC  03.0
027E:  MOVWF  77
027F:  RLF    78,F
0280:  DECFSZ 73,F
0281:  GOTO   279
0282:  RETURN
0283:  MOVLW  20
0284:  BTFSS  6C.4
0285:  MOVLW  30
0286:  MOVWF  6D
0287:  MOVF   6B,W
0288:  MOVWF  77
0289:  BTFSS  6B.7
028A:  GOTO   293
028B:  COMF   77,F
028C:  INCF   77,F
028D:  MOVF   77,W
028E:  MOVWF  6B
028F:  MOVLW  2D
0290:  MOVWF  6D
0291:  BSF    6C.7
0292:  BSF    6C.0
0293:  MOVF   6B,W
0294:  MOVWF  71
0295:  MOVLW  64
0296:  MOVWF  72
0297:  CALL   26E
0298:  MOVF   77,W
0299:  MOVWF  6B
029A:  MOVLW  30
029B:  ADDWF  78,W
029C:  MOVWF  6E
029D:  MOVF   6B,W
029E:  MOVWF  71
029F:  MOVLW  0A
02A0:  MOVWF  72
02A1:  CALL   26E
02A2:  MOVLW  30
02A3:  ADDWF  77,W
02A4:  MOVWF  70
02A5:  MOVLW  30
02A6:  ADDWF  78,W
02A7:  MOVWF  6F
02A8:  MOVF   6D,W
02A9:  MOVWF  77
02AA:  MOVLW  30
02AB:  SUBWF  6E,W
02AC:  BTFSC  03.2
02AD:  GOTO   2B2
02AE:  BSF    6C.1
02AF:  BTFSC  6C.7
02B0:  BSF    6C.2
02B1:  GOTO   2C6
02B2:  MOVF   6D,W
02B3:  MOVWF  6E
02B4:  MOVLW  20
02B5:  MOVWF  6D
02B6:  MOVLW  30
02B7:  SUBWF  6F,W
02B8:  BTFSC  03.2
02B9:  GOTO   2BE
02BA:  BSF    6C.0
02BB:  BTFSC  6C.7
02BC:  BSF    6C.1
02BD:  GOTO   2C6
02BE:  BTFSS  03.2
02BF:  BSF    6C.0
02C0:  BTFSS  03.2
02C1:  GOTO   2C6
02C2:  MOVF   6E,W
02C3:  MOVWF  6F
02C4:  MOVLW  20
02C5:  MOVWF  6E
02C6:  BTFSC  6C.2
02C7:  GOTO   2CD
02C8:  BTFSC  6C.1
02C9:  GOTO   2D0
02CA:  BTFSC  6C.0
02CB:  GOTO   2D3
02CC:  GOTO   2D6
02CD:  MOVF   6D,W
02CE:  MOVWF  71
02CF:  CALL   1EB
02D0:  MOVF   6E,W
02D1:  MOVWF  71
02D2:  CALL   1EB
02D3:  MOVF   6F,W
02D4:  MOVWF  71
02D5:  CALL   1EB
02D6:  MOVF   70,W
02D7:  MOVWF  71
02D8:  CALL   1EB
02D9:  RETURN
.................... 
.................... #list
.................... 
.................... #device ADC=10
.................... #use delay(crystal=4MHz)
*
0099:  MOVLW  72
009A:  MOVWF  04
009B:  BCF    03.7
009C:  MOVF   00,W
009D:  BTFSC  03.2
009E:  GOTO   0AD
009F:  MOVLW  01
00A0:  MOVWF  78
00A1:  CLRF   77
00A2:  DECFSZ 77,F
00A3:  GOTO   0A2
00A4:  DECFSZ 78,F
00A5:  GOTO   0A1
00A6:  MOVLW  4A
00A7:  MOVWF  77
00A8:  DECFSZ 77,F
00A9:  GOTO   0A8
00AA:  GOTO   0AB
00AB:  DECFSZ 00,F
00AC:  GOTO   09F
00AD:  RETURN
.................... 
.................... 
.................... // Definimos los pines a usar del microcontrolador
.................... #define LCD_RS_PIN      PIN_B1
.................... #define LCD_RW_PIN      PIN_B2
.................... #define LCD_ENABLE_PIN  PIN_B3
.................... #define LCD_DATA4       PIN_B4
.................... #define LCD_DATA5       PIN_B5
.................... #define LCD_DATA6       PIN_B6
.................... #define LCD_DATA7       PIN_B7
.................... // Incluimos la librería LCD
.................... #include <lcd.c>
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////                             LCD.C                                     ////
.................... ////                 Driver for common LCD modules                         ////
.................... ////                                                                       ////
.................... ////  lcd_init()   Must be called before any other function.               ////
.................... ////                                                                       ////
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         ////
.................... ////                 \a  Set cursor position to upper left                 ////
.................... ////                 \f  Clear display, set cursor to upper left           ////
.................... ////                 \n  Go to start of second line                        ////
.................... ////                 \b  Move back one position                            ////
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     ////
.................... ////              will erase all remanining characters on the current      ////
.................... ////              line, and move the cursor to the beginning of the next   ////
.................... ////              line.                                                    ////
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     ////
.................... ////              will move the cursor to the start of the current         ////
.................... ////              line.                                                    ////
.................... ////                                                                       ////
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        ////
.................... ////                                                                       ////
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             ////
.................... ////                                                                       ////
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         ////
.................... ////              (on=FALSE).                                              ////
.................... ////                                                                       ////
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   ////
.................... ////                                                                       ////
.................... ////                                                                       ////
.................... ////  CONFIGURATION                                                        ////
.................... ////  The LCD can be configured in one of two ways: a.) port access or     ////
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     ////
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     ////
.................... ////  connected to sequential pins on the GPIO.  Pin access                ////
.................... ////  has no requirements, all 7 bits of the control interface can         ////
.................... ////  can be connected to any GPIO using several ports.                    ////
.................... ////                                                                       ////
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     ////
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    ////
.................... ////  of this file to configure the pin order.  If you are using a         ////
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  ////
.................... ////  be defined.                                                          ////
.................... ////                                                                       ////
.................... ////  Example of port access:                                              ////
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         ////
.................... ////                                                                       ////
.................... ////  To use pin access, the following pins must be defined:               ////
.................... ////     LCD_ENABLE_PIN                                                    ////
.................... ////     LCD_RS_PIN                                                        ////
.................... ////     LCD_RW_PIN                                                        ////
.................... ////     LCD_DATA4                                                         ////
.................... ////     LCD_DATA5                                                         ////
.................... ////     LCD_DATA6                                                         ////
.................... ////     LCD_DATA7                                                         ////
.................... ////                                                                       ////
.................... ////  Example of pin access:                                               ////
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    ////
.................... ////     #define LCD_RS_PIN      PIN_E1                                    ////
.................... ////     #define LCD_RW_PIN      PIN_E2                                    ////
.................... ////     #define LCD_DATA4       PIN_D4                                    ////
.................... ////     #define LCD_DATA5       PIN_D5                                    ////
.................... ////     #define LCD_DATA6       PIN_D6                                    ////
.................... ////     #define LCD_DATA7       PIN_D7                                    ////
.................... ////                                                                       ////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef __LCD_C__
.................... #define __LCD_C__
.................... 
.................... // define the pinout.
.................... // only required if port access is being used.
.................... typedef struct  
.................... {                            // This structure is overlayed
....................    int1 enable;           // on to an I/O port to gain
....................    int1 rs;               // access to the LCD pins.
....................    int1 rw;               // The bits are allocated from
....................    int1 unused;           // low order up.  ENABLE will
....................    unsigned int     data : 4;         // be LSB pin of that port.
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT.
....................    unsigned int    reserved: 8;
....................   #endif
.................... } LCD_PIN_MAP;
.................... 
.................... // this is to improve compatability with previous LCD drivers that accepted
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B.
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE))
....................  #define LCD_DATA_PORT getenv("SFR:PORTB")
.................... #endif
.................... 
.................... #if defined(__PCB__)
....................    // these definitions only need to be modified for baseline PICs.
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions.
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0};
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF};
.................... #endif
.................... 
.................... ////////////////////// END CONFIGURATION ///////////////////////////////////
.................... 
.................... #ifndef LCD_ENABLE_PIN
....................    #define lcd_output_enable(x) lcdlat.enable=x
....................    #define lcd_enable_tris()   lcdtris.enable=0
.................... #else
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x)
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN)
.................... #endif
.................... 
.................... #ifndef LCD_RS_PIN
....................    #define lcd_output_rs(x) lcdlat.rs=x
....................    #define lcd_rs_tris()   lcdtris.rs=0
.................... #else
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x)
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN)
.................... #endif
.................... 
.................... #ifndef LCD_RW_PIN
....................    #define lcd_output_rw(x) lcdlat.rw=x
....................    #define lcd_rw_tris()   lcdtris.rw=0
.................... #else
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x)
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN)
.................... #endif
.................... 
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4,
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver
.................... // compatible with any code written for the original library
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7))
....................    #define  LCD_DATA4    LCD_DATA0
....................    #define  LCD_DATA5    LCD_DATA1
....................    #define  LCD_DATA6    LCD_DATA2
....................    #define  LCD_DATA7    LCD_DATA3
.................... #endif
.................... 
.................... #ifndef LCD_DATA4
.................... #ifndef LCD_DATA_PORT
....................    #if defined(__PCB__)
....................       #define LCD_DATA_PORT      0x06     //portb
....................       #define set_tris_lcd(x)   set_tris_b(x)
....................    #else
....................      #if defined(PIN_D0)
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd
....................      #else
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb
....................      #endif
....................    #endif   
.................... #endif
.................... 
.................... #if defined(__PCB__)
....................    LCD_PIN_MAP lcd, lcdlat;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT
.................... #elif defined(__PCM__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT
....................    #byte lcdtris = LCD_DATA_PORT+0x80
.................... #elif defined(__PCH__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT+9
....................    #byte lcdtris = LCD_DATA_PORT+0x12
.................... #elif defined(__PCD__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #word lcd = LCD_DATA_PORT
....................    #word lcdlat = LCD_DATA_PORT+2
....................    #word lcdtris = LCD_DATA_PORT-0x02
.................... #endif
.................... #endif   //LCD_DATA4 not defined
.................... 
.................... #ifndef LCD_TYPE
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines
.................... #endif
.................... 
.................... #ifndef LCD_LINE_TWO
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line
.................... #endif
.................... 
.................... #ifndef LCD_LINE_LENGTH
....................    #define LCD_LINE_LENGTH 20
.................... #endif
.................... 
.................... unsigned int8 lcd_read_nibble(void);
.................... 
.................... unsigned int8 lcd_read_byte(void)
.................... {
....................    unsigned int8 low,high;
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_INPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_float(LCD_DATA4);
*
0118:  BSF    06.4
....................    output_float(LCD_DATA5);
0119:  BSF    06.5
....................    output_float(LCD_DATA6);
011A:  BSF    06.6
....................    output_float(LCD_DATA7);
011B:  BSF    06.7
....................   #else
....................    lcdtris.data = 0xF;
....................   #endif
....................  #endif
....................         
....................    lcd_output_rw(1);
011C:  BCF    03.5
011D:  BSF    06.2
011E:  BSF    03.5
011F:  BCF    06.2
....................    delay_cycles(1);
0120:  NOP
....................    lcd_output_enable(1);
0121:  BCF    03.5
0122:  BSF    06.3
0123:  BSF    03.5
0124:  BCF    06.3
....................    delay_cycles(1);
0125:  NOP
....................    high = lcd_read_nibble();
0126:  BCF    03.5
0127:  CALL   0DF
0128:  MOVF   78,W
0129:  MOVWF  7D
....................       
....................    lcd_output_enable(0);
012A:  BCF    06.3
012B:  BSF    03.5
012C:  BCF    06.3
....................    delay_cycles(1);
012D:  NOP
....................    lcd_output_enable(1);
012E:  BCF    03.5
012F:  BSF    06.3
0130:  BSF    03.5
0131:  BCF    06.3
....................    delay_us(1);
0132:  NOP
....................    low = lcd_read_nibble();
0133:  BCF    03.5
0134:  CALL   0DF
0135:  MOVF   78,W
0136:  MOVWF  7C
....................       
....................    lcd_output_enable(0);
0137:  BCF    06.3
0138:  BSF    03.5
0139:  BCF    06.3
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_drive(LCD_DATA4);
013A:  BCF    06.4
....................    output_drive(LCD_DATA5);
013B:  BCF    06.5
....................    output_drive(LCD_DATA6);
013C:  BCF    06.6
....................    output_drive(LCD_DATA7);
013D:  BCF    06.7
....................   #else
....................    lcdtris.data = 0x0;
....................   #endif
....................  #endif
.................... 
....................    return( (high<<4) | low);
013E:  SWAPF  7D,W
013F:  MOVWF  77
0140:  MOVLW  F0
0141:  ANDWF  77,F
0142:  MOVF   77,W
0143:  IORWF  7C,W
0144:  MOVWF  78
.................... }
.................... 
.................... unsigned int8 lcd_read_nibble(void)
.................... {
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
*
00DF:  CLRF   7E
....................    unsigned int8 n = 0x00;
.................... 
....................    /* Read the data port */
....................    n |= input(LCD_DATA4);
00E0:  BSF    03.5
00E1:  BSF    06.4
00E2:  MOVLW  00
00E3:  BCF    03.5
00E4:  BTFSC  06.4
00E5:  MOVLW  01
00E6:  IORWF  7E,F
....................    n |= input(LCD_DATA5) << 1;
00E7:  BSF    03.5
00E8:  BSF    06.5
00E9:  MOVLW  00
00EA:  BCF    03.5
00EB:  BTFSC  06.5
00EC:  MOVLW  01
00ED:  MOVWF  77
00EE:  BCF    03.0
00EF:  RLF    77,F
00F0:  MOVF   77,W
00F1:  IORWF  7E,F
....................    n |= input(LCD_DATA6) << 2;
00F2:  BSF    03.5
00F3:  BSF    06.6
00F4:  MOVLW  00
00F5:  BCF    03.5
00F6:  BTFSC  06.6
00F7:  MOVLW  01
00F8:  MOVWF  77
00F9:  RLF    77,F
00FA:  RLF    77,F
00FB:  MOVLW  FC
00FC:  ANDWF  77,F
00FD:  MOVF   77,W
00FE:  IORWF  7E,F
....................    n |= input(LCD_DATA7) << 3;
00FF:  BSF    03.5
0100:  BSF    06.7
0101:  MOVLW  00
0102:  BCF    03.5
0103:  BTFSC  06.7
0104:  MOVLW  01
0105:  MOVWF  77
0106:  RLF    77,F
0107:  RLF    77,F
0108:  RLF    77,F
0109:  MOVLW  F8
010A:  ANDWF  77,F
010B:  MOVF   77,W
010C:  IORWF  7E,F
....................    
....................    return(n);
010D:  MOVF   7E,W
010E:  MOVWF  78
....................   #else
010F:  RETURN
....................    return(lcd.data);
....................   #endif
.................... }
.................... 
.................... void lcd_send_nibble(unsigned int8 n)
.................... {
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    /* Write to the data port */
....................    output_bit(LCD_DATA4, bit_test(n, 0));
*
00AE:  BTFSC  7D.0
00AF:  GOTO   0B2
00B0:  BCF    06.4
00B1:  GOTO   0B3
00B2:  BSF    06.4
00B3:  BSF    03.5
00B4:  BCF    06.4
....................    output_bit(LCD_DATA5, bit_test(n, 1));
00B5:  BTFSC  7D.1
00B6:  GOTO   0BB
00B7:  BCF    03.5
00B8:  BCF    06.5
00B9:  GOTO   0BD
00BA:  BSF    03.5
00BB:  BCF    03.5
00BC:  BSF    06.5
00BD:  BSF    03.5
00BE:  BCF    06.5
....................    output_bit(LCD_DATA6, bit_test(n, 2));
00BF:  BTFSC  7D.2
00C0:  GOTO   0C5
00C1:  BCF    03.5
00C2:  BCF    06.6
00C3:  GOTO   0C7
00C4:  BSF    03.5
00C5:  BCF    03.5
00C6:  BSF    06.6
00C7:  BSF    03.5
00C8:  BCF    06.6
....................    output_bit(LCD_DATA7, bit_test(n, 3));
00C9:  BTFSC  7D.3
00CA:  GOTO   0CF
00CB:  BCF    03.5
00CC:  BCF    06.7
00CD:  GOTO   0D1
00CE:  BSF    03.5
00CF:  BCF    03.5
00D0:  BSF    06.7
00D1:  BSF    03.5
00D2:  BCF    06.7
....................   #else      
....................    lcdlat.data = n;
....................   #endif
....................       
....................    delay_cycles(1);
00D3:  NOP
....................    lcd_output_enable(1);
00D4:  BCF    03.5
00D5:  BSF    06.3
00D6:  BSF    03.5
00D7:  BCF    06.3
....................    delay_us(2);
00D8:  GOTO   0D9
....................    lcd_output_enable(0);
00D9:  BCF    03.5
00DA:  BCF    06.3
00DB:  BSF    03.5
00DC:  BCF    06.3
00DD:  BCF    03.5
00DE:  RETURN
.................... }
.................... 
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n)
.................... {
....................   #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................   #else
....................    lcd_enable_tris();
*
0110:  BSF    03.5
0111:  BCF    06.3
....................    lcd_rs_tris();
0112:  BCF    06.1
....................    lcd_rw_tris();
0113:  BCF    06.2
....................   #endif
.................... 
....................    lcd_output_rs(0);
0114:  BCF    03.5
0115:  BCF    06.1
0116:  BSF    03.5
0117:  BCF    06.1
....................    while ( bit_test(lcd_read_byte(),7) ) ;
*
0145:  MOVF   78,W
0146:  MOVWF  7C
0147:  BTFSC  7C.7
0148:  GOTO   118
....................    lcd_output_rs(address);
0149:  MOVF   76,F
014A:  BTFSS  03.2
014B:  GOTO   150
014C:  BCF    03.5
014D:  BCF    06.1
014E:  GOTO   152
014F:  BSF    03.5
0150:  BCF    03.5
0151:  BSF    06.1
0152:  BSF    03.5
0153:  BCF    06.1
....................    delay_cycles(1);
0154:  NOP
....................    lcd_output_rw(0);
0155:  BCF    03.5
0156:  BCF    06.2
0157:  BSF    03.5
0158:  BCF    06.2
....................    delay_cycles(1);
0159:  NOP
....................    lcd_output_enable(0);
015A:  BCF    03.5
015B:  BCF    06.3
015C:  BSF    03.5
015D:  BCF    06.3
....................    lcd_send_nibble(n >> 4);
015E:  SWAPF  7B,W
015F:  MOVWF  7C
0160:  MOVLW  0F
0161:  ANDWF  7C,F
0162:  MOVF   7C,W
0163:  MOVWF  7D
0164:  BCF    03.5
0165:  CALL   0AE
....................    lcd_send_nibble(n & 0xf);
0166:  MOVF   7B,W
0167:  ANDLW  0F
0168:  MOVWF  7C
0169:  MOVWF  7D
016A:  CALL   0AE
016B:  RETURN
.................... }
.................... 
.................... #if defined(LCD_EXTENDED_NEWLINE)
.................... unsigned int8 g_LcdX, g_LcdY;
.................... #endif
.................... 
.................... void lcd_init(void) 
.................... {
....................    unsigned int8 i;
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6};
016C:  MOVLW  28
016D:  MOVWF  6B
016E:  MOVLW  0C
016F:  MOVWF  6C
0170:  MOVLW  01
0171:  MOVWF  6D
0172:  MOVLW  06
0173:  MOVWF  6E
....................                              // These bytes need to be sent to the LCD
....................                              // to start it up.
....................    
.................... 
....................    lcd_output_enable(0);
0174:  BCF    06.3
0175:  BSF    03.5
0176:  BCF    06.3
....................    lcd_output_rs(0);
0177:  BCF    03.5
0178:  BCF    06.1
0179:  BSF    03.5
017A:  BCF    06.1
....................    lcd_output_rw(0);
017B:  BCF    03.5
017C:  BCF    06.2
017D:  BSF    03.5
017E:  BCF    06.2
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_drive(LCD_DATA4);
017F:  BCF    06.4
....................    output_drive(LCD_DATA5);
0180:  BCF    06.5
....................    output_drive(LCD_DATA6);
0181:  BCF    06.6
....................    output_drive(LCD_DATA7);
0182:  BCF    06.7
....................   #else
....................    lcdtris.data = 0x0;
....................   #endif
....................    lcd_enable_tris();
0183:  BCF    06.3
....................    lcd_rs_tris();
0184:  BCF    06.1
....................    lcd_rw_tris();
0185:  BCF    06.2
....................  #endif
....................     
....................    delay_ms(15);
0186:  MOVLW  0F
0187:  MOVWF  72
0188:  BCF    03.5
0189:  CALL   099
....................    for(i=1;i<=3;++i)
018A:  MOVLW  01
018B:  MOVWF  6A
018C:  MOVF   6A,W
018D:  SUBLW  03
018E:  BTFSS  03.0
018F:  GOTO   198
....................    {
....................        lcd_send_nibble(3);
0190:  MOVLW  03
0191:  MOVWF  7D
0192:  CALL   0AE
....................        delay_ms(5);
0193:  MOVLW  05
0194:  MOVWF  72
0195:  CALL   099
0196:  INCF   6A,F
0197:  GOTO   18C
....................    }
....................    
....................    lcd_send_nibble(2);
0198:  MOVLW  02
0199:  MOVWF  7D
019A:  CALL   0AE
....................    delay_ms(5);
019B:  MOVLW  05
019C:  MOVWF  72
019D:  CALL   099
....................    for(i=0;i<=3;++i)
019E:  CLRF   6A
019F:  MOVF   6A,W
01A0:  SUBLW  03
01A1:  BTFSS  03.0
01A2:  GOTO   1AF
....................       lcd_send_byte(0,LCD_INIT_STRING[i]);
01A3:  MOVLW  6B
01A4:  ADDWF  6A,W
01A5:  MOVWF  04
01A6:  BCF    03.7
01A7:  MOVF   00,W
01A8:  MOVWF  6F
01A9:  CLRF   76
01AA:  MOVF   6F,W
01AB:  MOVWF  7B
01AC:  CALL   110
.................... 
....................   #if defined(LCD_EXTENDED_NEWLINE)
01AD:  INCF   6A,F
01AE:  GOTO   19F
01AF:  BCF    0A.3
01B0:  BCF    0A.4
01B1:  GOTO   42C (RETURN)
....................    g_LcdX = 0;
....................    g_LcdY = 0;
....................   #endif
.................... }
.................... 
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y)
.................... {
....................    unsigned int8 address;
....................    
....................    if(y!=1)
*
01D9:  DECFSZ 73,W
01DA:  GOTO   1DC
01DB:  GOTO   1DF
....................       address=LCD_LINE_TWO;
01DC:  MOVLW  40
01DD:  MOVWF  74
01DE:  GOTO   1E0
....................    else
....................       address=0;
01DF:  CLRF   74
....................      
....................    address+=x-1;
01E0:  MOVLW  01
01E1:  SUBWF  72,W
01E2:  ADDWF  74,F
....................    lcd_send_byte(0,0x80|address);
01E3:  MOVF   74,W
01E4:  IORLW  80
01E5:  MOVWF  75
01E6:  CLRF   76
01E7:  MOVF   75,W
01E8:  MOVWF  7B
01E9:  CALL   110
.................... 
....................   #if defined(LCD_EXTENDED_NEWLINE)
01EA:  RETURN
....................    g_LcdX = x - 1;
....................    g_LcdY = y - 1;
....................   #endif
.................... }
.................... 
.................... void lcd_putc(char c)
.................... {
....................    switch (c)
01EB:  MOVF   71,W
01EC:  XORLW  07
01ED:  BTFSC  03.2
01EE:  GOTO   1F9
01EF:  XORLW  0B
01F0:  BTFSC  03.2
01F1:  GOTO   1FE
01F2:  XORLW  06
01F3:  BTFSC  03.2
01F4:  GOTO   206
01F5:  XORLW  02
01F6:  BTFSC  03.2
01F7:  GOTO   20C
01F8:  GOTO   211
....................    {
....................       case '\a'   :  lcd_gotoxy(1,1);     break;
01F9:  MOVLW  01
01FA:  MOVWF  72
01FB:  MOVWF  73
01FC:  CALL   1D9
01FD:  GOTO   216
.................... 
....................       case '\f'   :  lcd_send_byte(0,1);
01FE:  CLRF   76
01FF:  MOVLW  01
0200:  MOVWF  7B
0201:  CALL   110
....................                      delay_ms(2);
0202:  MOVLW  02
0203:  MOVWF  72
0204:  CALL   099
....................                     #if defined(LCD_EXTENDED_NEWLINE)
....................                      g_LcdX = 0;
....................                      g_LcdY = 0;
....................                     #endif
....................                      break;
0205:  GOTO   216
.................... 
....................      #if defined(LCD_EXTENDED_NEWLINE)
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break;
....................       case '\n'   :
....................          while (g_LcdX++ < LCD_LINE_LENGTH)
....................          {
....................             lcd_send_byte(1, ' ');
....................          }
....................          lcd_gotoxy(1, g_LcdY+2);
....................          break;
....................      #else
....................       case '\n'   : lcd_gotoxy(1,2);        break;
0206:  MOVLW  01
0207:  MOVWF  72
0208:  MOVLW  02
0209:  MOVWF  73
020A:  CALL   1D9
020B:  GOTO   216
....................      #endif
....................      
....................       case '\b'   : lcd_send_byte(0,0x10);  break;
020C:  CLRF   76
020D:  MOVLW  10
020E:  MOVWF  7B
020F:  CALL   110
0210:  GOTO   216
....................      
....................      #if defined(LCD_EXTENDED_NEWLINE)
....................       default     : 
....................          if (g_LcdX < LCD_LINE_LENGTH)
....................          {
....................             lcd_send_byte(1, c);
....................             g_LcdX++;
....................          }
....................          break;
....................      #else
....................       default     : lcd_send_byte(1,c);     break;
0211:  MOVLW  01
0212:  MOVWF  76
0213:  MOVF   71,W
0214:  MOVWF  7B
0215:  CALL   110
....................      #endif
....................    }
0216:  RETURN
.................... }
....................  
.................... char lcd_getc(unsigned int8 x, unsigned int8 y)
.................... {
....................    char value;
.................... 
....................    lcd_gotoxy(x,y);
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low
....................    lcd_output_rs(1);
....................    value = lcd_read_byte();
....................    lcd_output_rs(0);
....................    
....................    return(value);
.................... }
.................... 
.................... // write a custom character to the ram
.................... // which is 0-7 and specifies which character array we are modifying.
.................... // ptr points to an array of 8 bytes, where each byte is the next row of
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and
.................... //    usually you will want to leave this byte 0x00.
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr)
.................... {
....................    unsigned int i;
.................... 
....................    which <<= 3;
*
01B2:  RLF    6A,F
01B3:  RLF    6A,F
01B4:  RLF    6A,F
01B5:  MOVLW  F8
01B6:  ANDWF  6A,F
....................    which &= 0x38;
01B7:  MOVLW  38
01B8:  ANDWF  6A,F
.................... 
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address
01B9:  MOVF   6A,W
01BA:  IORLW  40
01BB:  MOVWF  6E
01BC:  CLRF   76
01BD:  MOVF   6E,W
01BE:  MOVWF  7B
01BF:  CALL   110
.................... 
....................    for(i=0; i<8; i++)
01C0:  CLRF   6D
01C1:  MOVF   6D,W
01C2:  SUBLW  07
01C3:  BTFSS  03.0
01C4:  GOTO   1D8
....................    {
....................       lcd_send_byte(1, *ptr++);
01C5:  MOVF   6C,W
01C6:  MOVWF  7A
01C7:  MOVF   6B,W
01C8:  INCF   6B,F
01C9:  BTFSC  03.2
01CA:  INCF   6C,F
01CB:  MOVWF  04
01CC:  BCF    03.7
01CD:  BTFSC  7A.0
01CE:  BSF    03.7
01CF:  MOVF   00,W
01D0:  MOVWF  6E
01D1:  MOVLW  01
01D2:  MOVWF  76
01D3:  MOVF   6E,W
01D4:  MOVWF  7B
01D5:  CALL   110
....................    }
....................   
....................    #if defined(LCD_EXTENDED_NEWLINE)
01D6:  INCF   6D,F
01D7:  GOTO   1C1
01D8:  RETURN
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address
....................    #endif
.................... }
.................... 
.................... void lcd_cursor_on(int1 on)
.................... {
....................    if (on)
....................    {
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON
....................    }
....................    else
....................    {
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF
....................    }
.................... }
.................... 
.................... #endif
.................... 
.................... // Habilitamos el puerto B
.................... #use standard_io(b)
.................... 
.................... // Declaración de variable
.................... int contador = 217;  // Variable a decrementar
.................... int s_1 = 5;  // segundo (decenas)
.................... int s_2 = 5;  // segundo (unidades)
.................... int m_1 = 5;  // minuto (decenas)
.................... int m_2 = 9;  // minuto (unidades)
.................... int h_1 = 1;  // hora (decenas)
.................... int h_2 = 2;  // hora (unidades)
.................... 
.................... 
.................... //Caracteres animados
.................... int bomba1[8]={4,4,27,4,4,0,0,0};
*
03DB:  MOVLW  04
03DC:  BCF    03.5
03DD:  MOVWF  32
03DE:  MOVWF  33
03DF:  MOVLW  1B
03E0:  MOVWF  34
03E1:  MOVLW  04
03E2:  MOVWF  35
03E3:  MOVWF  36
03E4:  CLRF   37
03E5:  CLRF   38
03E6:  CLRF   39
.................... int bomba2[8]={0,25,6,0,0,0,0,0};
03E7:  CLRF   3A
03E8:  MOVLW  19
03E9:  MOVWF  3B
03EA:  MOVLW  06
03EB:  MOVWF  3C
03EC:  CLRF   3D
03ED:  CLRF   3E
03EE:  CLRF   3F
03EF:  CLRF   40
03F0:  CLRF   41
.................... int bomba3[8]={0,19,12,0,0,0,0,0};
03F1:  CLRF   42
03F2:  MOVLW  13
03F3:  MOVWF  43
03F4:  MOVLW  0C
03F5:  MOVWF  44
03F6:  CLRF   45
03F7:  CLRF   46
03F8:  CLRF   47
03F9:  CLRF   48
03FA:  CLRF   49
.................... int bomba4[8]={0,6,25,0,0,0,0,0};
03FB:  CLRF   4A
03FC:  MOVLW  06
03FD:  MOVWF  4B
03FE:  MOVLW  19
03FF:  MOVWF  4C
0400:  CLRF   4D
0401:  CLRF   4E
0402:  CLRF   4F
0403:  CLRF   50
0404:  CLRF   51
.................... int bomba5[8]={0,12,19,0,0,0,0,0};
0405:  CLRF   52
0406:  MOVLW  0C
0407:  MOVWF  53
0408:  MOVLW  13
0409:  MOVWF  54
040A:  CLRF   55
040B:  CLRF   56
040C:  CLRF   57
040D:  CLRF   58
040E:  CLRF   59
.................... int bomba6[8]={0,24,4,14,31,31,14,0};
040F:  CLRF   5A
0410:  MOVLW  18
0411:  MOVWF  5B
0412:  MOVLW  04
0413:  MOVWF  5C
0414:  MOVLW  0E
0415:  MOVWF  5D
0416:  MOVLW  1F
0417:  MOVWF  5E
0418:  MOVWF  5F
0419:  MOVLW  0E
041A:  MOVWF  60
041B:  CLRF   61
.................... int exp[8]={21,10,21,10,21,10,21,0};
041C:  MOVLW  15
041D:  MOVWF  62
041E:  MOVLW  0A
041F:  MOVWF  63
0420:  MOVLW  15
0421:  MOVWF  64
0422:  MOVLW  0A
0423:  MOVWF  65
0424:  MOVLW  15
0425:  MOVWF  66
0426:  MOVLW  0A
0427:  MOVWF  67
0428:  MOVLW  15
0429:  MOVWF  68
042A:  CLRF   69
.................... 
.................... 
.................... void bomba(){
....................    // Posición con respecto a columna y fila
....................    lcd_gotoxy(1,1);
*
02DA:  MOVLW  01
02DB:  MOVWF  72
02DC:  MOVWF  73
02DD:  CALL   1D9
....................    // Mostramos la hora en el LCD
....................    printf(lcd_putc,"Hora: %d%d:%d%d:%d%d", h_1,h_2,m_1,m_2,s_1,s_2);
02DE:  MOVLW  4F
02DF:  BSF    03.6
02E0:  MOVWF  0D
02E1:  MOVLW  00
02E2:  MOVWF  0F
02E3:  BCF    03.0
02E4:  MOVLW  06
02E5:  BCF    03.6
02E6:  MOVWF  6B
02E7:  CALL   217
02E8:  MOVF   30,W
02E9:  MOVWF  6B
02EA:  MOVLW  18
02EB:  MOVWF  6C
02EC:  CALL   283
02ED:  MOVF   31,W
02EE:  MOVWF  6B
02EF:  MOVLW  18
02F0:  MOVWF  6C
02F1:  CALL   283
02F2:  MOVLW  3A
02F3:  MOVWF  71
02F4:  CALL   1EB
02F5:  MOVF   2E,W
02F6:  MOVWF  6B
02F7:  MOVLW  18
02F8:  MOVWF  6C
02F9:  CALL   283
02FA:  MOVF   2F,W
02FB:  MOVWF  6B
02FC:  MOVLW  18
02FD:  MOVWF  6C
02FE:  CALL   283
02FF:  MOVLW  3A
0300:  MOVWF  71
0301:  CALL   1EB
0302:  MOVF   2C,W
0303:  MOVWF  6B
0304:  MOVLW  18
0305:  MOVWF  6C
0306:  CALL   283
0307:  MOVF   2D,W
0308:  MOVWF  6B
0309:  MOVLW  18
030A:  MOVWF  6C
030B:  CALL   283
....................    // Posición con respecto a columna y fila
....................    lcd_gotoxy(1,2);
030C:  MOVLW  01
030D:  MOVWF  72
030E:  MOVLW  02
030F:  MOVWF  73
0310:  CALL   1D9
....................    // Mostramos el estado inicial de la animación
....................    printf(lcd_putc,"%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c", 0, 1, 2, 3, 4,  1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 5);
0311:  CLRF   71
0312:  CALL   1EB
0313:  MOVLW  01
0314:  MOVWF  71
0315:  CALL   1EB
0316:  MOVLW  02
0317:  MOVWF  71
0318:  CALL   1EB
0319:  MOVLW  03
031A:  MOVWF  71
031B:  CALL   1EB
031C:  MOVLW  04
031D:  MOVWF  71
031E:  CALL   1EB
031F:  MOVLW  01
0320:  MOVWF  71
0321:  CALL   1EB
0322:  MOVLW  02
0323:  MOVWF  71
0324:  CALL   1EB
0325:  MOVLW  03
0326:  MOVWF  71
0327:  CALL   1EB
0328:  MOVLW  04
0329:  MOVWF  71
032A:  CALL   1EB
032B:  MOVLW  01
032C:  MOVWF  71
032D:  CALL   1EB
032E:  MOVLW  02
032F:  MOVWF  71
0330:  CALL   1EB
0331:  MOVLW  03
0332:  MOVWF  71
0333:  CALL   1EB
0334:  MOVLW  04
0335:  MOVWF  71
0336:  CALL   1EB
0337:  MOVLW  01
0338:  MOVWF  71
0339:  CALL   1EB
033A:  MOVLW  02
033B:  MOVWF  71
033C:  CALL   1EB
033D:  MOVLW  05
033E:  MOVWF  71
033F:  CALL   1EB
....................    // Creamos un bucle que hace posible la animación
....................    for(int i=0; i<=16;i++){
0340:  CLRF   6A
0341:  MOVF   6A,W
0342:  SUBLW  10
0343:  BTFSS  03.0
0344:  GOTO   3C1
....................       // Posición con respecto a columna y fila
....................       lcd_gotoxy(1,1);
0345:  MOVLW  01
0346:  MOVWF  72
0347:  MOVWF  73
0348:  CALL   1D9
....................       // Mostramos la hora
....................       printf(lcd_putc,"Hora: %d%d:%d%d:%d%d", h_1,h_2,m_1,m_2,s_1,s_2);
0349:  MOVLW  5A
034A:  BSF    03.6
034B:  MOVWF  0D
034C:  MOVLW  00
034D:  MOVWF  0F
034E:  BCF    03.0
034F:  MOVLW  06
0350:  BCF    03.6
0351:  MOVWF  6B
0352:  CALL   217
0353:  MOVF   30,W
0354:  MOVWF  6B
0355:  MOVLW  18
0356:  MOVWF  6C
0357:  CALL   283
0358:  MOVF   31,W
0359:  MOVWF  6B
035A:  MOVLW  18
035B:  MOVWF  6C
035C:  CALL   283
035D:  MOVLW  3A
035E:  MOVWF  71
035F:  CALL   1EB
0360:  MOVF   2E,W
0361:  MOVWF  6B
0362:  MOVLW  18
0363:  MOVWF  6C
0364:  CALL   283
0365:  MOVF   2F,W
0366:  MOVWF  6B
0367:  MOVLW  18
0368:  MOVWF  6C
0369:  CALL   283
036A:  MOVLW  3A
036B:  MOVWF  71
036C:  CALL   1EB
036D:  MOVF   2C,W
036E:  MOVWF  6B
036F:  MOVLW  18
0370:  MOVWF  6C
0371:  CALL   283
0372:  MOVF   2D,W
0373:  MOVWF  6B
0374:  MOVLW  18
0375:  MOVWF  6C
0376:  CALL   283
....................       // Posición con respecto a columna y fila la cual va a variar
....................       lcd_gotoxy(i,2);
0377:  MOVF   6A,W
0378:  MOVWF  72
0379:  MOVLW  02
037A:  MOVWF  73
037B:  CALL   1D9
....................       // animamos la mecha
....................       printf(lcd_putc," %c",0);
037C:  MOVLW  20
037D:  MOVWF  71
037E:  CALL   1EB
037F:  CLRF   71
0380:  CALL   1EB
....................       // Retardo
....................       delay_ms(200);
0381:  MOVLW  C8
0382:  MOVWF  72
0383:  CALL   099
....................       // Establecemos una condición en la cual al llegar la mecha a la 
....................       // posición 16 se muestra otra animación
....................       if (i==16){
0384:  MOVF   6A,W
0385:  SUBLW  10
0386:  BTFSS  03.2
0387:  GOTO   3BF
....................          // Posición con respecto a columna y fila
....................          lcd_gotoxy(0,2);
0388:  CLRF   72
0389:  MOVLW  02
038A:  MOVWF  73
038B:  CALL   1D9
....................          // mostramos la animación de la explosión
....................          printf(lcd_putc,"%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c"
....................          ,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6);
038C:  MOVLW  06
038D:  MOVWF  71
038E:  CALL   1EB
038F:  MOVLW  06
0390:  MOVWF  71
0391:  CALL   1EB
0392:  MOVLW  06
0393:  MOVWF  71
0394:  CALL   1EB
0395:  MOVLW  06
0396:  MOVWF  71
0397:  CALL   1EB
0398:  MOVLW  06
0399:  MOVWF  71
039A:  CALL   1EB
039B:  MOVLW  06
039C:  MOVWF  71
039D:  CALL   1EB
039E:  MOVLW  06
039F:  MOVWF  71
03A0:  CALL   1EB
03A1:  MOVLW  06
03A2:  MOVWF  71
03A3:  CALL   1EB
03A4:  MOVLW  06
03A5:  MOVWF  71
03A6:  CALL   1EB
03A7:  MOVLW  06
03A8:  MOVWF  71
03A9:  CALL   1EB
03AA:  MOVLW  06
03AB:  MOVWF  71
03AC:  CALL   1EB
03AD:  MOVLW  06
03AE:  MOVWF  71
03AF:  CALL   1EB
03B0:  MOVLW  06
03B1:  MOVWF  71
03B2:  CALL   1EB
03B3:  MOVLW  06
03B4:  MOVWF  71
03B5:  CALL   1EB
03B6:  MOVLW  06
03B7:  MOVWF  71
03B8:  CALL   1EB
03B9:  MOVLW  06
03BA:  MOVWF  71
03BB:  CALL   1EB
....................          // Retardo
....................          delay_ms(200);
03BC:  MOVLW  C8
03BD:  MOVWF  72
03BE:  CALL   099
....................       }
03BF:  INCF   6A,F
03C0:  GOTO   341
....................    }
03C1:  BCF    0A.3
03C2:  BCF    0A.4
03C3:  GOTO   461 (RETURN)
.................... }
.................... 
.................... // Llamado de la funcion de interrupción timer 0
.................... #INT_TIMER0
.................... // Interrupción interna
.................... void reloj(){
....................    // Decremento del contador
....................    contador--;
*
0065:  DECF   2B,F
....................    // Valor de seteo del timer
....................    set_timer0(238);
0066:  MOVLW  EE
0067:  MOVWF  01
....................    
....................    // Si el contador llega a cero, paso un segundo
....................    if(contador==0){
0068:  MOVF   2B,F
0069:  BTFSS  03.2
006A:  GOTO   095
....................       // Cuando el contador llega a 0 paso un segundo
....................       s_2++;
006B:  INCF   2D,F
....................       // Se restablece el contador
....................       contador=217;
006C:  MOVLW  D9
006D:  MOVWF  2B
....................       // Si el segundo de las nidades llega a 10
....................       if(s_2 == 10) {
006E:  MOVF   2D,W
006F:  SUBLW  0A
0070:  BTFSS  03.2
0071:  GOTO   08C
....................          // Se reinicia el valor del segundo de las unidades
....................          s_2 = 0;
0072:  CLRF   2D
....................          // Se aumenta el segundo de las decenas
....................          s_1++;
0073:  INCF   2C,F
....................          // Si el segundo de las decenas es 6, paso un minuto
....................          if(s_1 == 6){
0074:  MOVF   2C,W
0075:  SUBLW  06
0076:  BTFSS  03.2
0077:  GOTO   08C
....................             // se reestablece el valor de los segundos de las decenas
....................             s_1 = 0;
0078:  CLRF   2C
....................             // Aumneta en 1 el valor de las unidades de minuto
....................             m_2++;
0079:  INCF   2F,F
....................             // si las unidades del minuto llega a 10
....................             if(m_2 == 10)  {
007A:  MOVF   2F,W
007B:  SUBLW  0A
007C:  BTFSS  03.2
007D:  GOTO   08C
....................                // Se reinicia el valor del minuto de unidades
....................                m_2 = 0;
007E:  CLRF   2F
....................                // El valor del minuto de las decenas aumenta
....................                m_1++;
007F:  INCF   2E,F
....................                // si el valor del minuto de las decenas llega a 6,
....................                // paso una hora
....................                if(m_1 == 6) {
0080:  MOVF   2E,W
0081:  SUBLW  06
0082:  BTFSS  03.2
0083:  GOTO   08C
....................                   // El minuto de las decenas se reinicia
....................                   m_1 = 0;
0084:  CLRF   2E
....................                   // Aumenta una hora (unidades
....................                   h_2++;
0085:  INCF   31,F
....................                   // Si la hora de las unidades llega a 10
....................                   if(h_2 == 10) {
0086:  MOVF   31,W
0087:  SUBLW  0A
0088:  BTFSS  03.2
0089:  GOTO   08C
....................                      // Aumenta en 1 la hora de las decenas
....................                      h_1++;
008A:  INCF   30,F
....................                      // Se reinicia el valor de las horas (unidades) 
....................                      h_2 = 0;
008B:  CLRF   31
....................                   }
....................                }
....................             }
....................          }
....................       }
....................       // Si estan por dar la 1
....................       if(h_1 == 1&&h_2==3){
008C:  DECFSZ 30,W
008D:  GOTO   095
008E:  MOVF   31,W
008F:  SUBLW  03
0090:  BTFSS  03.2
0091:  GOTO   095
....................       // Se reinicia a 0 (decenas)
....................       h_1 = 0;
0092:  CLRF   30
....................       // Se pone en 1 (unidades)
....................       h_2 = 1;
0093:  MOVLW  01
0094:  MOVWF  31
....................       }
....................    }
0095:  BCF    0B.2
0096:  BCF    0A.3
0097:  BCF    0A.4
0098:  GOTO   02B
.................... }
.................... 
.................... 
.................... void main()
*
03C4:  MOVF   03,W
03C5:  ANDLW  1F
03C6:  MOVWF  03
03C7:  MOVLW  D9
03C8:  MOVWF  2B
03C9:  MOVLW  05
03CA:  MOVWF  2C
03CB:  MOVWF  2D
03CC:  MOVWF  2E
03CD:  MOVLW  09
03CE:  MOVWF  2F
03CF:  MOVLW  01
03D0:  MOVWF  30
03D1:  MOVLW  02
03D2:  MOVWF  31
03D3:  BSF    03.5
03D4:  BSF    1F.0
03D5:  BSF    1F.1
03D6:  BSF    1F.2
03D7:  BCF    1F.3
03D8:  MOVLW  07
03D9:  MOVWF  1C
03DA:  BCF    03.7
.................... {
....................    // Inicializamos la lcd en su modo de 8 bits
....................    lcd_init();
*
042B:  GOTO   16C
....................    // Declaramos los caracteres especiales en la memoria
....................    lcd_set_cgram_char(0,bomba1);
042C:  CLRF   6A
042D:  CLRF   6C
042E:  MOVLW  32
042F:  MOVWF  6B
0430:  CALL   1B2
....................    lcd_set_cgram_char(1,bomba2);
0431:  MOVLW  01
0432:  MOVWF  6A
0433:  CLRF   6C
0434:  MOVLW  3A
0435:  MOVWF  6B
0436:  CALL   1B2
....................    lcd_set_cgram_char(2,bomba3);
0437:  MOVLW  02
0438:  MOVWF  6A
0439:  CLRF   6C
043A:  MOVLW  42
043B:  MOVWF  6B
043C:  CALL   1B2
....................    lcd_set_cgram_char(3,bomba4);
043D:  MOVLW  03
043E:  MOVWF  6A
043F:  CLRF   6C
0440:  MOVLW  4A
0441:  MOVWF  6B
0442:  CALL   1B2
....................    lcd_set_cgram_char(4,bomba5);
0443:  MOVLW  04
0444:  MOVWF  6A
0445:  CLRF   6C
0446:  MOVLW  52
0447:  MOVWF  6B
0448:  CALL   1B2
....................    lcd_set_cgram_char(5,bomba6);
0449:  MOVLW  05
044A:  MOVWF  6A
044B:  CLRF   6C
044C:  MOVLW  5A
044D:  MOVWF  6B
044E:  CALL   1B2
....................    lcd_set_cgram_char(6,exp);
044F:  MOVLW  06
0450:  MOVWF  6A
0451:  CLRF   6C
0452:  MOVLW  62
0453:  MOVWF  6B
0454:  CALL   1B2
....................    
....................    // Establecemos al puerto B como salidas
....................    set_tris_b(0x00);
0455:  MOVLW  00
0456:  BSF    03.5
0457:  MOVWF  06
....................    // Reloj interno del microcontrolador y el preescalador
....................    setup_timer_0(RTCC_INTERNAL|RTCC_DIV_256);
0458:  MOVF   01,W
0459:  ANDLW  C0
045A:  IORLW  07
045B:  MOVWF  01
....................    // Habilitamos las interrupciones de manera interna
....................    enable_interrupts(INT_TIMER0);
045C:  BCF    03.5
045D:  BSF    0B.5
....................    // Habilitamos todas las interrupciones
....................    enable_interrupts(GLOBAL);
045E:  MOVLW  C0
045F:  IORWF  0B,F
.................... 
....................    while(TRUE)
....................    {  
....................       // Mandamos a llamar a la función creada
....................       bomba();
0460:  GOTO   2DA
0461:  GOTO   460
....................    }
.................... }
0462:  SLEEP

Configuration Fuses:
   Word  1: 3F71   XT NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
