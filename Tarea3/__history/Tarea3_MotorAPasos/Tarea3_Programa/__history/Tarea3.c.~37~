#include <Tarea3.h>

#use standard_io(b)
#use standard_io(c)

int contador = 0;
int16 lectura_ADC;
int16 millis;
// ClockWise
byte const CW[8] = {0b1000, 0b1100, 0b0100, 0b0110,
                     0b0010, 0b0011, 0b0001, 0b1001};
// Counter ClockWise           
byte const CCW[8] ={0b1001, 0b0001, 0b0011, 0b0010,
                     0b0110, 0b0100, 0b1100, 0b1000};
     
void motor(int contador){
      if(input_state(PIN_C0)){//CW
         // Paso a la derecha
         output_b(CW[contador]);
      }
      else{//CCW
         // Paso a la izquierda
         output_b(CCW[contador]);
      }
      
      // Control de velocidad
      while(millis > 100){
         delay_ms(1);
         millis--;
      }
      
      // Varia dependiendo el equipo por la sobrecarga de la simulación
      delay_ms(400); 
}

void main(){
   setup_adc_ports(AN0);
   setup_adc(ADC_CLOCK_INTERNAL);
   
   set_tris_b(0x00);
   set_tris_c(0x01);
   while(TRUE)
   {
      // Control de posisión del motor
      for(contador = 0; contador <= 7; contador++){
         // Declaración del pina A0 como ADC
         set_adc_channel(0);
         delay_us(20); // Retardo de estabilización
         lectura_ADC = read_ADC();
         // Establecemos velocidad
         millis = lectura_ADC * 1; //Conversión a entero
         motor(contador); // Movimiento
      }
   }
}

