CCS PCM C Compiler, Version 5.091, 13314               24-jun.-21 15:58

               Filename:   C:\Users\jymcl\Documents\Chapingo\6 Semestre\Sistemas digitales embebidos\Practica26\Practica26.lst

               ROM used:   490 words (6%)
                           Largest free fragment is 2048
               RAM used:   8 (2%) at main() level
                           21 (6%) worst case
               Stack used: 5 locations
               Stack size: 8

0000:  MOVLW  01
0001:  MOVWF  0A
0002:  GOTO   159
0003:  NOP
.................... #include <Practica26.h>
.................... #include <16F876A.h>
.................... //////////// Standard Header file for the PIC16F876A device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F876A
0004:  DATA A0,26
0005:  DATA 6F,3A
0006:  DATA 6F,39
0007:  DATA 20,33
0008:  DATA 75,37
0009:  DATA E3,34
000A:  DATA 6F,37
000B:  DATA 61,37
000C:  DATA E4,37
000D:  DATA 00,00
000E:  DATA A0,26
000F:  DATA 6F,3A
0010:  DATA 6F,39
0011:  DATA 20,33
0012:  DATA 75,37
0013:  DATA E3,34
0014:  DATA 6F,37
0015:  DATA 61,37
0016:  DATA E4,37
0017:  DATA 00,01
0018:  DATA A0,26
0019:  DATA 6F,3A
001A:  DATA 6F,39
001B:  DATA 20,32
001C:  DATA 65,3A
001D:  DATA 65,37
001E:  DATA 69,32
001F:  DATA 6F,00
*
0103:  MOVF   0B,W
0104:  MOVWF  23
0105:  BCF    0B.7
0106:  BSF    03.5
0107:  BSF    03.6
0108:  BSF    0C.7
0109:  BSF    0C.0
010A:  NOP
010B:  NOP
010C:  BCF    03.5
010D:  BCF    03.6
010E:  BTFSC  23.7
010F:  BSF    0B.7
0110:  BSF    03.6
0111:  MOVF   0C,W
0112:  ANDLW  7F
0113:  BTFSC  03.2
0114:  GOTO   157
0115:  BCF    03.6
0116:  MOVWF  23
0117:  BSF    03.6
0118:  MOVF   0D,W
0119:  BCF    03.6
011A:  MOVWF  24
011B:  BSF    03.6
011C:  MOVF   0F,W
011D:  BCF    03.6
011E:  MOVWF  25
011F:  MOVF   23,W
0120:  MOVWF  26
0121:  CALL   0D7
0122:  MOVF   24,W
0123:  BSF    03.6
0124:  MOVWF  0D
0125:  BCF    03.6
0126:  MOVF   25,W
0127:  BSF    03.6
0128:  MOVWF  0F
0129:  BCF    03.6
012A:  MOVF   0B,W
012B:  MOVWF  26
012C:  BCF    0B.7
012D:  BSF    03.5
012E:  BSF    03.6
012F:  BSF    0C.7
0130:  BSF    0C.0
0131:  NOP
0132:  NOP
0133:  BCF    03.5
0134:  BCF    03.6
0135:  BTFSC  26.7
0136:  BSF    0B.7
0137:  BSF    03.6
0138:  RLF    0C,W
0139:  RLF    0E,W
013A:  ANDLW  7F
013B:  BTFSC  03.2
013C:  GOTO   157
013D:  BCF    03.6
013E:  MOVWF  23
013F:  BSF    03.6
0140:  MOVF   0D,W
0141:  BCF    03.6
0142:  MOVWF  24
0143:  BSF    03.6
0144:  MOVF   0F,W
0145:  BCF    03.6
0146:  MOVWF  25
0147:  MOVF   23,W
0148:  MOVWF  26
0149:  CALL   0D7
014A:  MOVF   24,W
014B:  BSF    03.6
014C:  MOVWF  0D
014D:  BCF    03.6
014E:  MOVF   25,W
014F:  BSF    03.6
0150:  MOVWF  0F
0151:  INCF   0D,F
0152:  BTFSC  03.2
0153:  INCF   0F,F
0154:  BCF    03.6
0155:  GOTO   103
0156:  BSF    03.6
0157:  BCF    03.6
0158:  RETURN
.................... 
.................... #list
.................... 
.................... #device ADC=10
.................... #use delay(crystal=4MHz)
*
0020:  MOVLW  28
0021:  MOVWF  04
0022:  BCF    03.7
0023:  MOVF   00,W
0024:  BTFSC  03.2
0025:  GOTO   034
0026:  MOVLW  01
0027:  MOVWF  78
0028:  CLRF   77
0029:  DECFSZ 77,F
002A:  GOTO   029
002B:  DECFSZ 78,F
002C:  GOTO   028
002D:  MOVLW  4A
002E:  MOVWF  77
002F:  DECFSZ 77,F
0030:  GOTO   02F
0031:  GOTO   032
0032:  DECFSZ 00,F
0033:  GOTO   026
0034:  RETURN
.................... 
.................... 
.................... #use standard_io(b)
.................... #use standard_io(c)
.................... #use standard_io(a)
.................... #include <lcd.c>
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////                             LCD.C                                     ////
.................... ////                 Driver for common LCD modules                         ////
.................... ////                                                                       ////
.................... ////  lcd_init()   Must be called before any other function.               ////
.................... ////                                                                       ////
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         ////
.................... ////                 \a  Set cursor position to upper left                 ////
.................... ////                 \f  Clear display, set cursor to upper left           ////
.................... ////                 \n  Go to start of second line                        ////
.................... ////                 \b  Move back one position                            ////
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     ////
.................... ////              will erase all remanining characters on the current      ////
.................... ////              line, and move the cursor to the beginning of the next   ////
.................... ////              line.                                                    ////
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     ////
.................... ////              will move the cursor to the start of the current         ////
.................... ////              line.                                                    ////
.................... ////                                                                       ////
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        ////
.................... ////                                                                       ////
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             ////
.................... ////                                                                       ////
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         ////
.................... ////              (on=FALSE).                                              ////
.................... ////                                                                       ////
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   ////
.................... ////                                                                       ////
.................... ////                                                                       ////
.................... ////  CONFIGURATION                                                        ////
.................... ////  The LCD can be configured in one of two ways: a.) port access or     ////
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     ////
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     ////
.................... ////  connected to sequential pins on the GPIO.  Pin access                ////
.................... ////  has no requirements, all 7 bits of the control interface can         ////
.................... ////  can be connected to any GPIO using several ports.                    ////
.................... ////                                                                       ////
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     ////
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    ////
.................... ////  of this file to configure the pin order.  If you are using a         ////
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  ////
.................... ////  be defined.                                                          ////
.................... ////                                                                       ////
.................... ////  Example of port access:                                              ////
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         ////
.................... ////                                                                       ////
.................... ////  To use pin access, the following pins must be defined:               ////
.................... ////     LCD_ENABLE_PIN                                                    ////
.................... ////     LCD_RS_PIN                                                        ////
.................... ////     LCD_RW_PIN                                                        ////
.................... ////     LCD_DATA4                                                         ////
.................... ////     LCD_DATA5                                                         ////
.................... ////     LCD_DATA6                                                         ////
.................... ////     LCD_DATA7                                                         ////
.................... ////                                                                       ////
.................... ////  Example of pin access:                                               ////
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    ////
.................... ////     #define LCD_RS_PIN      PIN_E1                                    ////
.................... ////     #define LCD_RW_PIN      PIN_E2                                    ////
.................... ////     #define LCD_DATA4       PIN_D4                                    ////
.................... ////     #define LCD_DATA5       PIN_D5                                    ////
.................... ////     #define LCD_DATA6       PIN_D6                                    ////
.................... ////     #define LCD_DATA7       PIN_D7                                    ////
.................... ////                                                                       ////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef __LCD_C__
.................... #define __LCD_C__
.................... 
.................... // define the pinout.
.................... // only required if port access is being used.
.................... typedef struct  
.................... {                            // This structure is overlayed
....................    int1 enable;           // on to an I/O port to gain
....................    int1 rs;               // access to the LCD pins.
....................    int1 rw;               // The bits are allocated from
....................    int1 unused;           // low order up.  ENABLE will
....................    unsigned int     data : 4;         // be LSB pin of that port.
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT.
....................    unsigned int    reserved: 8;
....................   #endif
.................... } LCD_PIN_MAP;
.................... 
.................... // this is to improve compatability with previous LCD drivers that accepted
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B.
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE))
....................  #define LCD_DATA_PORT getenv("SFR:PORTB")
.................... #endif
.................... 
.................... #if defined(__PCB__)
....................    // these definitions only need to be modified for baseline PICs.
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions.
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0};
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF};
.................... #endif
.................... 
.................... ////////////////////// END CONFIGURATION ///////////////////////////////////
.................... 
.................... #ifndef LCD_ENABLE_PIN
....................    #define lcd_output_enable(x) lcdlat.enable=x
....................    #define lcd_enable_tris()   lcdtris.enable=0
.................... #else
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x)
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN)
.................... #endif
.................... 
.................... #ifndef LCD_RS_PIN
....................    #define lcd_output_rs(x) lcdlat.rs=x
....................    #define lcd_rs_tris()   lcdtris.rs=0
.................... #else
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x)
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN)
.................... #endif
.................... 
.................... #ifndef LCD_RW_PIN
....................    #define lcd_output_rw(x) lcdlat.rw=x
....................    #define lcd_rw_tris()   lcdtris.rw=0
.................... #else
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x)
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN)
.................... #endif
.................... 
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4,
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver
.................... // compatible with any code written for the original library
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7))
....................    #define  LCD_DATA4    LCD_DATA0
....................    #define  LCD_DATA5    LCD_DATA1
....................    #define  LCD_DATA6    LCD_DATA2
....................    #define  LCD_DATA7    LCD_DATA3
.................... #endif
.................... 
.................... #ifndef LCD_DATA4
.................... #ifndef LCD_DATA_PORT
....................    #if defined(__PCB__)
....................       #define LCD_DATA_PORT      0x06     //portb
....................       #define set_tris_lcd(x)   set_tris_b(x)
....................    #else
....................      #if defined(PIN_D0)
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd
....................      #else
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb
....................      #endif
....................    #endif   
.................... #endif
.................... 
.................... #if defined(__PCB__)
....................    LCD_PIN_MAP lcd, lcdlat;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT
.................... #elif defined(__PCM__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT
....................    #byte lcdtris = LCD_DATA_PORT+0x80
.................... #elif defined(__PCH__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT+9
....................    #byte lcdtris = LCD_DATA_PORT+0x12
.................... #elif defined(__PCD__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #word lcd = LCD_DATA_PORT
....................    #word lcdlat = LCD_DATA_PORT+2
....................    #word lcdtris = LCD_DATA_PORT-0x02
.................... #endif
.................... #endif   //LCD_DATA4 not defined
.................... 
.................... #ifndef LCD_TYPE
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines
.................... #endif
.................... 
.................... #ifndef LCD_LINE_TWO
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line
.................... #endif
.................... 
.................... #ifndef LCD_LINE_LENGTH
....................    #define LCD_LINE_LENGTH 20
.................... #endif
.................... 
.................... unsigned int8 lcd_read_nibble(void);
.................... 
.................... unsigned int8 lcd_read_byte(void)
.................... {
....................    unsigned int8 low,high;
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_INPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_float(LCD_DATA4);
....................    output_float(LCD_DATA5);
....................    output_float(LCD_DATA6);
....................    output_float(LCD_DATA7);
....................   #else
....................    lcdtris.data = 0xF;
*
004D:  MOVLW  0F
004E:  BSF    03.5
004F:  ANDWF  06,W
0050:  IORLW  F0
0051:  MOVWF  06
....................   #endif
....................  #endif
....................         
....................    lcd_output_rw(1);
0052:  BCF    03.5
0053:  BSF    06.2
....................    delay_cycles(1);
0054:  NOP
....................    lcd_output_enable(1);
0055:  BSF    06.0
....................    delay_cycles(1);
0056:  NOP
....................    high = lcd_read_nibble();
0057:  CALL   041
0058:  MOVF   78,W
0059:  MOVWF  2E
....................       
....................    lcd_output_enable(0);
005A:  BCF    06.0
....................    delay_cycles(1);
005B:  NOP
....................    lcd_output_enable(1);
005C:  BSF    06.0
....................    delay_us(1);
005D:  NOP
....................    low = lcd_read_nibble();
005E:  CALL   041
005F:  MOVF   78,W
0060:  MOVWF  2D
....................       
....................    lcd_output_enable(0);
0061:  BCF    06.0
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_drive(LCD_DATA4);
....................    output_drive(LCD_DATA5);
....................    output_drive(LCD_DATA6);
....................    output_drive(LCD_DATA7);
....................   #else
....................    lcdtris.data = 0x0;
0062:  MOVLW  0F
0063:  BSF    03.5
0064:  ANDWF  06,W
0065:  MOVWF  06
....................   #endif
....................  #endif
.................... 
....................    return( (high<<4) | low);
0066:  BCF    03.5
0067:  SWAPF  2E,W
0068:  MOVWF  77
0069:  MOVLW  F0
006A:  ANDWF  77,F
006B:  MOVF   77,W
006C:  IORWF  2D,W
006D:  MOVWF  78
.................... }
.................... 
.................... unsigned int8 lcd_read_nibble(void)
.................... {
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    unsigned int8 n = 0x00;
.................... 
....................    /* Read the data port */
....................    n |= input(LCD_DATA4);
....................    n |= input(LCD_DATA5) << 1;
....................    n |= input(LCD_DATA6) << 2;
....................    n |= input(LCD_DATA7) << 3;
....................    
....................    return(n);
....................   #else
....................    return(lcd.data);
*
0041:  MOVF   06,W
0042:  MOVWF  77
0043:  SWAPF  06,W
0044:  ANDLW  0F
0045:  MOVWF  78
....................   #endif
0046:  RETURN
.................... }
.................... 
.................... void lcd_send_nibble(unsigned int8 n)
.................... {
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    /* Write to the data port */
....................    output_bit(LCD_DATA4, bit_test(n, 0));
....................    output_bit(LCD_DATA5, bit_test(n, 1));
....................    output_bit(LCD_DATA6, bit_test(n, 2));
....................    output_bit(LCD_DATA7, bit_test(n, 3));
....................   #else      
....................    lcdlat.data = n;
*
0035:  SWAPF  2E,W
0036:  ANDLW  F0
0037:  MOVWF  77
0038:  MOVLW  0F
0039:  ANDWF  06,W
003A:  IORWF  77,W
003B:  MOVWF  06
....................   #endif
....................       
....................    delay_cycles(1);
003C:  NOP
....................    lcd_output_enable(1);
003D:  BSF    06.0
....................    delay_us(2);
003E:  GOTO   03F
....................    lcd_output_enable(0);
003F:  BCF    06.0
0040:  RETURN
.................... }
.................... 
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n)
.................... {
....................   #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................   #else
....................    lcd_enable_tris();
*
0047:  BSF    03.5
0048:  BCF    06.0
....................    lcd_rs_tris();
0049:  BCF    06.1
....................    lcd_rw_tris();
004A:  BCF    06.2
....................   #endif
.................... 
....................    lcd_output_rs(0);
004B:  BCF    03.5
004C:  BCF    06.1
....................    while ( bit_test(lcd_read_byte(),7) ) ;
*
006E:  MOVF   78,W
006F:  MOVWF  2D
0070:  BTFSC  2D.7
0071:  GOTO   04D
....................    lcd_output_rs(address);
0072:  BTFSS  2B.0
0073:  BCF    06.1
0074:  BTFSC  2B.0
0075:  BSF    06.1
....................    delay_cycles(1);
0076:  NOP
....................    lcd_output_rw(0);
0077:  BCF    06.2
....................    delay_cycles(1);
0078:  NOP
....................    lcd_output_enable(0);
0079:  BCF    06.0
....................    lcd_send_nibble(n >> 4);
007A:  SWAPF  2C,W
007B:  MOVWF  2D
007C:  MOVLW  0F
007D:  ANDWF  2D,F
007E:  MOVF   2D,W
007F:  MOVWF  2E
0080:  CALL   035
....................    lcd_send_nibble(n & 0xf);
0081:  MOVF   2C,W
0082:  ANDLW  0F
0083:  MOVWF  2D
0084:  MOVWF  2E
0085:  CALL   035
0086:  RETURN
.................... }
.................... 
.................... #if defined(LCD_EXTENDED_NEWLINE)
.................... unsigned int8 g_LcdX, g_LcdY;
.................... #endif
.................... 
.................... void lcd_init(void) 
.................... {
....................    unsigned int8 i;
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6};
0087:  MOVLW  28
0088:  MOVWF  24
0089:  MOVLW  0C
008A:  MOVWF  25
008B:  MOVLW  01
008C:  MOVWF  26
008D:  MOVLW  06
008E:  MOVWF  27
....................                              // These bytes need to be sent to the LCD
....................                              // to start it up.
....................    
.................... 
....................    lcd_output_enable(0);
008F:  BCF    06.0
....................    lcd_output_rs(0);
0090:  BCF    06.1
....................    lcd_output_rw(0);
0091:  BCF    06.2
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_drive(LCD_DATA4);
....................    output_drive(LCD_DATA5);
....................    output_drive(LCD_DATA6);
....................    output_drive(LCD_DATA7);
....................   #else
....................    lcdtris.data = 0x0;
0092:  MOVLW  0F
0093:  BSF    03.5
0094:  ANDWF  06,W
0095:  MOVWF  06
....................   #endif
....................    lcd_enable_tris();
0096:  BCF    06.0
....................    lcd_rs_tris();
0097:  BCF    06.1
....................    lcd_rw_tris();
0098:  BCF    06.2
....................  #endif
....................     
....................    delay_ms(15);
0099:  MOVLW  0F
009A:  BCF    03.5
009B:  MOVWF  28
009C:  CALL   020
....................    for(i=1;i<=3;++i)
009D:  MOVLW  01
009E:  MOVWF  23
009F:  MOVF   23,W
00A0:  SUBLW  03
00A1:  BTFSS  03.0
00A2:  GOTO   0AB
....................    {
....................        lcd_send_nibble(3);
00A3:  MOVLW  03
00A4:  MOVWF  2E
00A5:  CALL   035
....................        delay_ms(5);
00A6:  MOVLW  05
00A7:  MOVWF  28
00A8:  CALL   020
00A9:  INCF   23,F
00AA:  GOTO   09F
....................    }
....................    
....................    lcd_send_nibble(2);
00AB:  MOVLW  02
00AC:  MOVWF  2E
00AD:  CALL   035
....................    delay_ms(5);
00AE:  MOVLW  05
00AF:  MOVWF  28
00B0:  CALL   020
....................    for(i=0;i<=3;++i)
00B1:  CLRF   23
00B2:  MOVF   23,W
00B3:  SUBLW  03
00B4:  BTFSS  03.0
00B5:  GOTO   0C2
....................       lcd_send_byte(0,LCD_INIT_STRING[i]);
00B6:  MOVLW  24
00B7:  ADDWF  23,W
00B8:  MOVWF  04
00B9:  BCF    03.7
00BA:  MOVF   00,W
00BB:  MOVWF  28
00BC:  CLRF   2B
00BD:  MOVF   28,W
00BE:  MOVWF  2C
00BF:  CALL   047
.................... 
....................   #if defined(LCD_EXTENDED_NEWLINE)
00C0:  INCF   23,F
00C1:  GOTO   0B2
00C2:  BCF    0A.3
00C3:  BCF    0A.4
00C4:  GOTO   170 (RETURN)
....................    g_LcdX = 0;
....................    g_LcdY = 0;
....................   #endif
.................... }
.................... 
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y)
.................... {
....................    unsigned int8 address;
....................    
....................    if(y!=1)
00C5:  DECFSZ 28,W
00C6:  GOTO   0C8
00C7:  GOTO   0CB
....................       address=LCD_LINE_TWO;
00C8:  MOVLW  40
00C9:  MOVWF  29
00CA:  GOTO   0CC
....................    else
....................       address=0;
00CB:  CLRF   29
....................      
....................    address+=x-1;
00CC:  MOVLW  01
00CD:  SUBWF  27,W
00CE:  ADDWF  29,F
....................    lcd_send_byte(0,0x80|address);
00CF:  MOVF   29,W
00D0:  IORLW  80
00D1:  MOVWF  2A
00D2:  CLRF   2B
00D3:  MOVF   2A,W
00D4:  MOVWF  2C
00D5:  CALL   047
.................... 
....................   #if defined(LCD_EXTENDED_NEWLINE)
00D6:  RETURN
....................    g_LcdX = x - 1;
....................    g_LcdY = y - 1;
....................   #endif
.................... }
.................... 
.................... void lcd_putc(char c)
.................... {
....................    switch (c)
00D7:  MOVF   26,W
00D8:  XORLW  07
00D9:  BTFSC  03.2
00DA:  GOTO   0E5
00DB:  XORLW  0B
00DC:  BTFSC  03.2
00DD:  GOTO   0EA
00DE:  XORLW  06
00DF:  BTFSC  03.2
00E0:  GOTO   0F2
00E1:  XORLW  02
00E2:  BTFSC  03.2
00E3:  GOTO   0F8
00E4:  GOTO   0FD
....................    {
....................       case '\a'   :  lcd_gotoxy(1,1);     break;
00E5:  MOVLW  01
00E6:  MOVWF  27
00E7:  MOVWF  28
00E8:  CALL   0C5
00E9:  GOTO   102
.................... 
....................       case '\f'   :  lcd_send_byte(0,1);
00EA:  CLRF   2B
00EB:  MOVLW  01
00EC:  MOVWF  2C
00ED:  CALL   047
....................                      delay_ms(2);
00EE:  MOVLW  02
00EF:  MOVWF  28
00F0:  CALL   020
....................                     #if defined(LCD_EXTENDED_NEWLINE)
....................                      g_LcdX = 0;
....................                      g_LcdY = 0;
....................                     #endif
....................                      break;
00F1:  GOTO   102
.................... 
....................      #if defined(LCD_EXTENDED_NEWLINE)
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break;
....................       case '\n'   :
....................          while (g_LcdX++ < LCD_LINE_LENGTH)
....................          {
....................             lcd_send_byte(1, ' ');
....................          }
....................          lcd_gotoxy(1, g_LcdY+2);
....................          break;
....................      #else
....................       case '\n'   : lcd_gotoxy(1,2);        break;
00F2:  MOVLW  01
00F3:  MOVWF  27
00F4:  MOVLW  02
00F5:  MOVWF  28
00F6:  CALL   0C5
00F7:  GOTO   102
....................      #endif
....................      
....................       case '\b'   : lcd_send_byte(0,0x10);  break;
00F8:  CLRF   2B
00F9:  MOVLW  10
00FA:  MOVWF  2C
00FB:  CALL   047
00FC:  GOTO   102
....................      
....................      #if defined(LCD_EXTENDED_NEWLINE)
....................       default     : 
....................          if (g_LcdX < LCD_LINE_LENGTH)
....................          {
....................             lcd_send_byte(1, c);
....................             g_LcdX++;
....................          }
....................          break;
....................      #else
....................       default     : lcd_send_byte(1,c);     break;
00FD:  MOVLW  01
00FE:  MOVWF  2B
00FF:  MOVF   26,W
0100:  MOVWF  2C
0101:  CALL   047
....................      #endif
....................    }
0102:  RETURN
.................... }
....................  
.................... char lcd_getc(unsigned int8 x, unsigned int8 y)
.................... {
....................    char value;
.................... 
....................    lcd_gotoxy(x,y);
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low
....................    lcd_output_rs(1);
....................    value = lcd_read_byte();
....................    lcd_output_rs(0);
....................    
....................    return(value);
.................... }
.................... 
.................... // write a custom character to the ram
.................... // which is 0-7 and specifies which character array we are modifying.
.................... // ptr points to an array of 8 bytes, where each byte is the next row of
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and
.................... //    usually you will want to leave this byte 0x00.
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr)
.................... {
....................    unsigned int i;
.................... 
....................    which <<= 3;
....................    which &= 0x38;
.................... 
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address
.................... 
....................    for(i=0; i<8; i++)
....................    {
....................       lcd_send_byte(1, *ptr++);
....................    }
....................   
....................    #if defined(LCD_EXTENDED_NEWLINE)
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address
....................    #endif
.................... }
.................... 
.................... void lcd_cursor_on(int1 on)
.................... {
....................    if (on)
....................    {
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON
....................    }
....................    else
....................    {
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF
....................    }
.................... }
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... void main()
*
0159:  MOVF   03,W
015A:  ANDLW  1F
015B:  MOVWF  03
015C:  MOVLW  FF
015D:  MOVWF  20
015E:  CLRF   22
015F:  CLRF   21
0160:  BSF    03.5
0161:  BSF    1F.0
0162:  BSF    1F.1
0163:  BSF    1F.2
0164:  BCF    1F.3
0165:  MOVLW  07
0166:  MOVWF  1C
0167:  BCF    03.7
.................... {
....................    set_tris_a(0b11111);
0168:  MOVLW  1F
0169:  MOVWF  05
....................    set_tris_b(0x00);
016A:  MOVLW  00
016B:  MOVWF  06
....................    set_tris_c(0b00000000);
016C:  MOVWF  07
016D:  BCF    03.5
016E:  MOVWF  20
....................    lcd_init();
016F:  GOTO   087
....................    
....................    
....................    while(TRUE)
....................    {
....................       //PIN_C0---Enable
....................       //PIN_C1---1A
....................       //PIN_C2---2A
....................       
....................       //PIN_A0---Control de giro a la derecha
....................       //PINA_1---Control de giro a la izquierda
....................       
....................       output_high(PIN_C2);       // Se factoriza para optimizar el codigo
0170:  BCF    20.2
0171:  MOVF   20,W
0172:  BSF    03.5
0173:  MOVWF  07
0174:  BCF    03.5
0175:  BSF    07.2
....................       
....................       if(input_state(PIN_A0))
0176:  BTFSS  05.0
0177:  GOTO   19E
....................       {
....................          //output_high(PIN_C0);
....................          output_low(PIN_C0);
0178:  BCF    20.0
0179:  MOVF   20,W
017A:  BSF    03.5
017B:  MOVWF  07
017C:  BCF    03.5
017D:  BCF    07.0
....................          output_high(PIN_C1);
017E:  BCF    20.1
017F:  MOVF   20,W
0180:  BSF    03.5
0181:  MOVWF  07
0182:  BCF    03.5
0183:  BSF    07.1
....................          lcd_gotoxy(1,1);
0184:  MOVLW  01
0185:  MOVWF  27
0186:  MOVWF  28
0187:  CALL   0C5
....................          printf(lcd_putc," Motor funcionando");
0188:  MOVLW  04
0189:  BSF    03.6
018A:  MOVWF  0D
018B:  MOVLW  00
018C:  MOVWF  0F
018D:  BCF    03.6
018E:  CALL   103
....................          lcd_gotoxy(1,2);
018F:  MOVLW  01
0190:  MOVWF  27
0191:  MOVLW  02
0192:  MOVWF  28
0193:  CALL   0C5
....................          printf(lcd_putc,"Der");
0194:  MOVLW  44
0195:  MOVWF  26
0196:  CALL   0D7
0197:  MOVLW  65
0198:  MOVWF  26
0199:  CALL   0D7
019A:  MOVLW  72
019B:  MOVWF  26
019C:  CALL   0D7
....................       }
019D:  GOTO   1E8
....................       else if (input_state(PIN_A1))
019E:  BTFSS  05.1
019F:  GOTO   1C6
....................       {
....................          //output_high(PIN_C0);
....................          output_high(PIN_C0);
01A0:  BCF    20.0
01A1:  MOVF   20,W
01A2:  BSF    03.5
01A3:  MOVWF  07
01A4:  BCF    03.5
01A5:  BSF    07.0
....................          output_low(PIN_C1);
01A6:  BCF    20.1
01A7:  MOVF   20,W
01A8:  BSF    03.5
01A9:  MOVWF  07
01AA:  BCF    03.5
01AB:  BCF    07.1
....................          lcd_gotoxy(1,1);
01AC:  MOVLW  01
01AD:  MOVWF  27
01AE:  MOVWF  28
01AF:  CALL   0C5
....................          printf(lcd_putc," Motor funcionando");
01B0:  MOVLW  0E
01B1:  BSF    03.6
01B2:  MOVWF  0D
01B3:  MOVLW  00
01B4:  MOVWF  0F
01B5:  BCF    03.6
01B6:  CALL   103
....................          lcd_gotoxy(1,2);
01B7:  MOVLW  01
01B8:  MOVWF  27
01B9:  MOVLW  02
01BA:  MOVWF  28
01BB:  CALL   0C5
....................          printf(lcd_putc,"Izq");
01BC:  MOVLW  49
01BD:  MOVWF  26
01BE:  CALL   0D7
01BF:  MOVLW  7A
01C0:  MOVWF  26
01C1:  CALL   0D7
01C2:  MOVLW  71
01C3:  MOVWF  26
01C4:  CALL   0D7
....................       }
01C5:  GOTO   1E8
....................       else
....................       {
....................          //output_high(PIN_C0);
....................          output_low(PIN_C0);
01C6:  BCF    20.0
01C7:  MOVF   20,W
01C8:  BSF    03.5
01C9:  MOVWF  07
01CA:  BCF    03.5
01CB:  BCF    07.0
....................          output_low(PIN_C1);
01CC:  BCF    20.1
01CD:  MOVF   20,W
01CE:  BSF    03.5
01CF:  MOVWF  07
01D0:  BCF    03.5
01D1:  BCF    07.1
....................          lcd_gotoxy(1,1);
01D2:  MOVLW  01
01D3:  MOVWF  27
01D4:  MOVWF  28
01D5:  CALL   0C5
....................          printf(lcd_putc," Motor detenido");
01D6:  MOVLW  18
01D7:  BSF    03.6
01D8:  MOVWF  0D
01D9:  MOVLW  00
01DA:  MOVWF  0F
01DB:  BCF    03.6
01DC:  CALL   103
....................          lcd_gotoxy(1,2);
01DD:  MOVLW  01
01DE:  MOVWF  27
01DF:  MOVLW  02
01E0:  MOVWF  28
01E1:  CALL   0C5
....................          printf(lcd_putc,":(");
01E2:  MOVLW  3A
01E3:  MOVWF  26
01E4:  CALL   0D7
01E5:  MOVLW  28
01E6:  MOVWF  26
01E7:  CALL   0D7
....................       }
01E8:  GOTO   170
....................       
....................    }
.................... 
.................... }
.................... 
01E9:  SLEEP

Configuration Fuses:
   Word  1: 3F71   XT NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
