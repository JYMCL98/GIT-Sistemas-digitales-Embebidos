CCS PCM C Compiler, Version 5.091, 13314               09-jul.-21 08:07

               Filename:   C:\Users\jymcl\Documents\Chapingo\6 Semestre\Sistemas digitales embebidos\Practica34\Practica34_R.lst

               ROM used:   565 words (14%)
                           Largest free fragment is 2048
               RAM used:   18 (9%) at main() level
                           34 (18%) worst case
               Stack used: 5 locations (4 in main + 1 for interrupts)
               Stack size: 8

0000:  MOVLW  02
0001:  MOVWF  0A
0002:  GOTO   207
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  25
0008:  MOVF   7F,W
0009:  MOVWF  24
000A:  MOVF   0A,W
000B:  MOVWF  2F
000C:  CLRF   0A
000D:  SWAPF  24,F
000E:  MOVF   04,W
000F:  MOVWF  26
0010:  MOVF   20,W
0011:  MOVWF  27
0012:  MOVF   21,W
0013:  MOVWF  28
0014:  MOVF   22,W
0015:  MOVWF  29
0016:  MOVF   23,W
0017:  MOVWF  2A
0018:  BSF    03.6
0019:  MOVF   0D,W
001A:  BCF    03.6
001B:  MOVWF  2B
001C:  BSF    03.6
001D:  MOVF   0F,W
001E:  BCF    03.6
001F:  MOVWF  2C
0020:  BSF    03.6
0021:  MOVF   0C,W
0022:  BCF    03.6
0023:  MOVWF  2D
0024:  BSF    03.6
0025:  MOVF   0E,W
0026:  BCF    03.6
0027:  MOVWF  2E
0028:  BCF    03.7
0029:  BCF    03.5
002A:  MOVLW  8C
002B:  MOVWF  04
002C:  BTFSS  00.5
002D:  GOTO   030
002E:  BTFSC  0C.5
002F:  GOTO   051
0030:  MOVF   26,W
0031:  MOVWF  04
0032:  MOVF   27,W
0033:  MOVWF  20
0034:  MOVF   28,W
0035:  MOVWF  21
0036:  MOVF   29,W
0037:  MOVWF  22
0038:  MOVF   2A,W
0039:  MOVWF  23
003A:  MOVF   2B,W
003B:  BSF    03.6
003C:  MOVWF  0D
003D:  BCF    03.6
003E:  MOVF   2C,W
003F:  BSF    03.6
0040:  MOVWF  0F
0041:  BCF    03.6
0042:  MOVF   2D,W
0043:  BSF    03.6
0044:  MOVWF  0C
0045:  BCF    03.6
0046:  MOVF   2E,W
0047:  BSF    03.6
0048:  MOVWF  0E
0049:  BCF    03.6
004A:  MOVF   2F,W
004B:  MOVWF  0A
004C:  SWAPF  25,W
004D:  MOVWF  03
004E:  SWAPF  7F,F
004F:  SWAPF  7F,W
0050:  RETFIE
0051:  BCF    0A.3
0052:  GOTO   053
.................... #include <Practica34_R.h>
.................... #include <16F873A.h>
.................... //////////// Standard Header file for the PIC16F873A device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F873A
*
005A:  DATA F2,32
005B:  DATA E3,34
005C:  DATA E2,34
005D:  DATA 65,37
005E:  DATA E4,37
005F:  DATA BD,12
0060:  DATA 31,22
0061:  DATA 00,00
*
0142:  MOVF   0B,W
0143:  MOVWF  32
0144:  BCF    0B.7
0145:  BSF    03.5
0146:  BSF    03.6
0147:  BSF    0C.7
0148:  BSF    0C.0
0149:  NOP
014A:  NOP
014B:  BCF    03.5
014C:  BCF    03.6
014D:  BTFSC  32.7
014E:  BSF    0B.7
014F:  BTFSC  03.0
0150:  GOTO   179
0151:  BSF    03.6
0152:  MOVF   0C,W
0153:  ANDLW  7F
0154:  BCF    03.6
0155:  MOVWF  32
0156:  BSF    03.6
0157:  MOVF   0D,W
0158:  BCF    03.6
0159:  MOVWF  33
015A:  BSF    03.6
015B:  MOVF   0F,W
015C:  BCF    03.6
015D:  MOVWF  34
015E:  MOVF   32,W
015F:  MOVWF  37
0160:  CALL   116
0161:  MOVF   33,W
0162:  BSF    03.6
0163:  MOVWF  0D
0164:  BCF    03.6
0165:  MOVF   34,W
0166:  BSF    03.6
0167:  MOVWF  0F
0168:  BCF    03.6
0169:  MOVF   0B,W
016A:  MOVWF  35
016B:  BCF    0B.7
016C:  BSF    03.5
016D:  BSF    03.6
016E:  BSF    0C.7
016F:  BSF    0C.0
0170:  NOP
0171:  NOP
0172:  BCF    03.5
0173:  BCF    03.6
0174:  BTFSC  35.7
0175:  BSF    0B.7
0176:  DECFSZ 31,F
0177:  GOTO   179
0178:  GOTO   198
0179:  BSF    03.6
017A:  RLF    0C,W
017B:  RLF    0E,W
017C:  ANDLW  7F
017D:  BCF    03.6
017E:  MOVWF  32
017F:  BSF    03.6
0180:  MOVF   0D,W
0181:  BCF    03.6
0182:  MOVWF  33
0183:  BSF    03.6
0184:  MOVF   0F,W
0185:  BCF    03.6
0186:  MOVWF  34
0187:  MOVF   32,W
0188:  MOVWF  37
0189:  CALL   116
018A:  MOVF   33,W
018B:  BSF    03.6
018C:  MOVWF  0D
018D:  BCF    03.6
018E:  MOVF   34,W
018F:  BSF    03.6
0190:  MOVWF  0F
0191:  INCF   0D,F
0192:  BTFSC  03.2
0193:  INCF   0F,F
0194:  BCF    03.0
0195:  BCF    03.6
0196:  DECFSZ 31,F
0197:  GOTO   142
0198:  BCF    0A.3
0199:  GOTO   22E (RETURN)
019A:  MOVF   38,W
019B:  CLRF   21
019C:  SUBWF  37,W
019D:  BTFSC  03.0
019E:  GOTO   1A2
019F:  MOVF   37,W
01A0:  MOVWF  20
01A1:  GOTO   1AE
01A2:  CLRF   20
01A3:  MOVLW  08
01A4:  MOVWF  39
01A5:  RLF    37,F
01A6:  RLF    20,F
01A7:  MOVF   38,W
01A8:  SUBWF  20,W
01A9:  BTFSC  03.0
01AA:  MOVWF  20
01AB:  RLF    21,F
01AC:  DECFSZ 39,F
01AD:  GOTO   1A5
01AE:  RETURN
01AF:  MOVLW  20
01B0:  BTFSS  32.4
01B1:  MOVLW  30
01B2:  MOVWF  33
01B3:  MOVF   31,W
01B4:  MOVWF  20
01B5:  BTFSS  31.7
01B6:  GOTO   1BF
01B7:  COMF   20,F
01B8:  INCF   20,F
01B9:  MOVF   20,W
01BA:  MOVWF  31
01BB:  MOVLW  2D
01BC:  MOVWF  33
01BD:  BSF    32.7
01BE:  BSF    32.0
01BF:  MOVF   31,W
01C0:  MOVWF  37
01C1:  MOVLW  64
01C2:  MOVWF  38
01C3:  CALL   19A
01C4:  MOVF   20,W
01C5:  MOVWF  31
01C6:  MOVLW  30
01C7:  ADDWF  21,W
01C8:  MOVWF  34
01C9:  MOVF   31,W
01CA:  MOVWF  37
01CB:  MOVLW  0A
01CC:  MOVWF  38
01CD:  CALL   19A
01CE:  MOVLW  30
01CF:  ADDWF  20,W
01D0:  MOVWF  36
01D1:  MOVLW  30
01D2:  ADDWF  21,W
01D3:  MOVWF  35
01D4:  MOVF   33,W
01D5:  MOVWF  20
01D6:  MOVLW  30
01D7:  SUBWF  34,W
01D8:  BTFSC  03.2
01D9:  GOTO   1DE
01DA:  BSF    32.1
01DB:  BTFSC  32.7
01DC:  BSF    32.2
01DD:  GOTO   1F2
01DE:  MOVF   33,W
01DF:  MOVWF  34
01E0:  MOVLW  20
01E1:  MOVWF  33
01E2:  MOVLW  30
01E3:  SUBWF  35,W
01E4:  BTFSC  03.2
01E5:  GOTO   1EA
01E6:  BSF    32.0
01E7:  BTFSC  32.7
01E8:  BSF    32.1
01E9:  GOTO   1F2
01EA:  BTFSS  03.2
01EB:  BSF    32.0
01EC:  BTFSS  03.2
01ED:  GOTO   1F2
01EE:  MOVF   34,W
01EF:  MOVWF  35
01F0:  MOVLW  20
01F1:  MOVWF  34
01F2:  BTFSC  32.2
01F3:  GOTO   1F9
01F4:  BTFSC  32.1
01F5:  GOTO   1FC
01F6:  BTFSC  32.0
01F7:  GOTO   1FF
01F8:  GOTO   202
01F9:  MOVF   33,W
01FA:  MOVWF  37
01FB:  CALL   116
01FC:  MOVF   34,W
01FD:  MOVWF  37
01FE:  CALL   116
01FF:  MOVF   35,W
0200:  MOVWF  37
0201:  CALL   116
0202:  MOVF   36,W
0203:  MOVWF  37
0204:  CALL   116
0205:  BCF    0A.3
0206:  GOTO   233 (RETURN)
.................... 
.................... #list
.................... 
.................... #device ADC=10
.................... #use delay(crystal=4MHz)
*
0062:  MOVLW  38
0063:  MOVWF  04
0064:  MOVF   00,W
0065:  BTFSC  03.2
0066:  GOTO   075
0067:  MOVLW  01
0068:  MOVWF  21
0069:  CLRF   20
006A:  DECFSZ 20,F
006B:  GOTO   06A
006C:  DECFSZ 21,F
006D:  GOTO   069
006E:  MOVLW  4A
006F:  MOVWF  20
0070:  DECFSZ 20,F
0071:  GOTO   070
0072:  GOTO   073
0073:  DECFSZ 00,F
0074:  GOTO   067
0075:  RETURN
.................... 
.................... 
.................... #use rs232(baud=9600,xmit=PIN_C6,rcv=PIN_C7)
.................... #include <lcd.c>
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////                             LCD.C                                     ////
.................... ////                 Driver for common LCD modules                         ////
.................... ////                                                                       ////
.................... ////  lcd_init()   Must be called before any other function.               ////
.................... ////                                                                       ////
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         ////
.................... ////                 \a  Set cursor position to upper left                 ////
.................... ////                 \f  Clear display, set cursor to upper left           ////
.................... ////                 \n  Go to start of second line                        ////
.................... ////                 \b  Move back one position                            ////
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     ////
.................... ////              will erase all remanining characters on the current      ////
.................... ////              line, and move the cursor to the beginning of the next   ////
.................... ////              line.                                                    ////
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     ////
.................... ////              will move the cursor to the start of the current         ////
.................... ////              line.                                                    ////
.................... ////                                                                       ////
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        ////
.................... ////                                                                       ////
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             ////
.................... ////                                                                       ////
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         ////
.................... ////              (on=FALSE).                                              ////
.................... ////                                                                       ////
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   ////
.................... ////                                                                       ////
.................... ////                                                                       ////
.................... ////  CONFIGURATION                                                        ////
.................... ////  The LCD can be configured in one of two ways: a.) port access or     ////
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     ////
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     ////
.................... ////  connected to sequential pins on the GPIO.  Pin access                ////
.................... ////  has no requirements, all 7 bits of the control interface can         ////
.................... ////  can be connected to any GPIO using several ports.                    ////
.................... ////                                                                       ////
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     ////
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    ////
.................... ////  of this file to configure the pin order.  If you are using a         ////
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  ////
.................... ////  be defined.                                                          ////
.................... ////                                                                       ////
.................... ////  Example of port access:                                              ////
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         ////
.................... ////                                                                       ////
.................... ////  To use pin access, the following pins must be defined:               ////
.................... ////     LCD_ENABLE_PIN                                                    ////
.................... ////     LCD_RS_PIN                                                        ////
.................... ////     LCD_RW_PIN                                                        ////
.................... ////     LCD_DATA4                                                         ////
.................... ////     LCD_DATA5                                                         ////
.................... ////     LCD_DATA6                                                         ////
.................... ////     LCD_DATA7                                                         ////
.................... ////                                                                       ////
.................... ////  Example of pin access:                                               ////
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    ////
.................... ////     #define LCD_RS_PIN      PIN_E1                                    ////
.................... ////     #define LCD_RW_PIN      PIN_E2                                    ////
.................... ////     #define LCD_DATA4       PIN_D4                                    ////
.................... ////     #define LCD_DATA5       PIN_D5                                    ////
.................... ////     #define LCD_DATA6       PIN_D6                                    ////
.................... ////     #define LCD_DATA7       PIN_D7                                    ////
.................... ////                                                                       ////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef __LCD_C__
.................... #define __LCD_C__
.................... 
.................... // define the pinout.
.................... // only required if port access is being used.
.................... typedef struct  
.................... {                            // This structure is overlayed
....................    int1 enable;           // on to an I/O port to gain
....................    int1 rs;               // access to the LCD pins.
....................    int1 rw;               // The bits are allocated from
....................    int1 unused;           // low order up.  ENABLE will
....................    unsigned int     data : 4;         // be LSB pin of that port.
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT.
....................    unsigned int    reserved: 8;
....................   #endif
.................... } LCD_PIN_MAP;
.................... 
.................... // this is to improve compatability with previous LCD drivers that accepted
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B.
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE))
....................  #define LCD_DATA_PORT getenv("SFR:PORTB")
.................... #endif
.................... 
.................... #if defined(__PCB__)
....................    // these definitions only need to be modified for baseline PICs.
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions.
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0};
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF};
.................... #endif
.................... 
.................... ////////////////////// END CONFIGURATION ///////////////////////////////////
.................... 
.................... #ifndef LCD_ENABLE_PIN
....................    #define lcd_output_enable(x) lcdlat.enable=x
....................    #define lcd_enable_tris()   lcdtris.enable=0
.................... #else
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x)
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN)
.................... #endif
.................... 
.................... #ifndef LCD_RS_PIN
....................    #define lcd_output_rs(x) lcdlat.rs=x
....................    #define lcd_rs_tris()   lcdtris.rs=0
.................... #else
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x)
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN)
.................... #endif
.................... 
.................... #ifndef LCD_RW_PIN
....................    #define lcd_output_rw(x) lcdlat.rw=x
....................    #define lcd_rw_tris()   lcdtris.rw=0
.................... #else
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x)
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN)
.................... #endif
.................... 
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4,
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver
.................... // compatible with any code written for the original library
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7))
....................    #define  LCD_DATA4    LCD_DATA0
....................    #define  LCD_DATA5    LCD_DATA1
....................    #define  LCD_DATA6    LCD_DATA2
....................    #define  LCD_DATA7    LCD_DATA3
.................... #endif
.................... 
.................... #ifndef LCD_DATA4
.................... #ifndef LCD_DATA_PORT
....................    #if defined(__PCB__)
....................       #define LCD_DATA_PORT      0x06     //portb
....................       #define set_tris_lcd(x)   set_tris_b(x)
....................    #else
....................      #if defined(PIN_D0)
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd
....................      #else
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb
....................      #endif
....................    #endif   
.................... #endif
.................... 
.................... #if defined(__PCB__)
....................    LCD_PIN_MAP lcd, lcdlat;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT
.................... #elif defined(__PCM__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT
....................    #byte lcdtris = LCD_DATA_PORT+0x80
.................... #elif defined(__PCH__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT+9
....................    #byte lcdtris = LCD_DATA_PORT+0x12
.................... #elif defined(__PCD__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #word lcd = LCD_DATA_PORT
....................    #word lcdlat = LCD_DATA_PORT+2
....................    #word lcdtris = LCD_DATA_PORT-0x02
.................... #endif
.................... #endif   //LCD_DATA4 not defined
.................... 
.................... #ifndef LCD_TYPE
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines
.................... #endif
.................... 
.................... #ifndef LCD_LINE_TWO
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line
.................... #endif
.................... 
.................... #ifndef LCD_LINE_LENGTH
....................    #define LCD_LINE_LENGTH 20
.................... #endif
.................... 
.................... unsigned int8 lcd_read_nibble(void);
.................... 
.................... unsigned int8 lcd_read_byte(void)
.................... {
....................    unsigned int8 low,high;
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_INPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_float(LCD_DATA4);
....................    output_float(LCD_DATA5);
....................    output_float(LCD_DATA6);
....................    output_float(LCD_DATA7);
....................   #else
....................    lcdtris.data = 0xF;
*
008E:  MOVLW  0F
008F:  BSF    03.5
0090:  ANDWF  06,W
0091:  IORLW  F0
0092:  MOVWF  06
....................   #endif
....................  #endif
....................         
....................    lcd_output_rw(1);
0093:  BCF    03.5
0094:  BSF    06.2
....................    delay_cycles(1);
0095:  NOP
....................    lcd_output_enable(1);
0096:  BSF    06.0
....................    delay_cycles(1);
0097:  NOP
....................    high = lcd_read_nibble();
0098:  CALL   082
0099:  MOVF   21,W
009A:  MOVWF  3F
....................       
....................    lcd_output_enable(0);
009B:  BCF    06.0
....................    delay_cycles(1);
009C:  NOP
....................    lcd_output_enable(1);
009D:  BSF    06.0
....................    delay_us(1);
009E:  NOP
....................    low = lcd_read_nibble();
009F:  CALL   082
00A0:  MOVF   21,W
00A1:  MOVWF  3E
....................       
....................    lcd_output_enable(0);
00A2:  BCF    06.0
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_drive(LCD_DATA4);
....................    output_drive(LCD_DATA5);
....................    output_drive(LCD_DATA6);
....................    output_drive(LCD_DATA7);
....................   #else
....................    lcdtris.data = 0x0;
00A3:  MOVLW  0F
00A4:  BSF    03.5
00A5:  ANDWF  06,W
00A6:  MOVWF  06
....................   #endif
....................  #endif
.................... 
....................    return( (high<<4) | low);
00A7:  BCF    03.5
00A8:  SWAPF  3F,W
00A9:  MOVWF  20
00AA:  MOVLW  F0
00AB:  ANDWF  20,F
00AC:  MOVF   20,W
00AD:  IORWF  3E,W
00AE:  MOVWF  21
.................... }
.................... 
.................... unsigned int8 lcd_read_nibble(void)
.................... {
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    unsigned int8 n = 0x00;
.................... 
....................    /* Read the data port */
....................    n |= input(LCD_DATA4);
....................    n |= input(LCD_DATA5) << 1;
....................    n |= input(LCD_DATA6) << 2;
....................    n |= input(LCD_DATA7) << 3;
....................    
....................    return(n);
....................   #else
....................    return(lcd.data);
*
0082:  MOVF   06,W
0083:  MOVWF  20
0084:  SWAPF  06,W
0085:  ANDLW  0F
0086:  MOVWF  21
....................   #endif
0087:  RETURN
.................... }
.................... 
.................... void lcd_send_nibble(unsigned int8 n)
.................... {
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    /* Write to the data port */
....................    output_bit(LCD_DATA4, bit_test(n, 0));
....................    output_bit(LCD_DATA5, bit_test(n, 1));
....................    output_bit(LCD_DATA6, bit_test(n, 2));
....................    output_bit(LCD_DATA7, bit_test(n, 3));
....................   #else      
....................    lcdlat.data = n;
*
0076:  SWAPF  3F,W
0077:  ANDLW  F0
0078:  MOVWF  20
0079:  MOVLW  0F
007A:  ANDWF  06,W
007B:  IORWF  20,W
007C:  MOVWF  06
....................   #endif
....................       
....................    delay_cycles(1);
007D:  NOP
....................    lcd_output_enable(1);
007E:  BSF    06.0
....................    delay_us(2);
007F:  GOTO   080
....................    lcd_output_enable(0);
0080:  BCF    06.0
0081:  RETURN
.................... }
.................... 
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n)
.................... {
....................   #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................   #else
....................    lcd_enable_tris();
*
0088:  BSF    03.5
0089:  BCF    06.0
....................    lcd_rs_tris();
008A:  BCF    06.1
....................    lcd_rw_tris();
008B:  BCF    06.2
....................   #endif
.................... 
....................    lcd_output_rs(0);
008C:  BCF    03.5
008D:  BCF    06.1
....................    while ( bit_test(lcd_read_byte(),7) ) ;
*
00AF:  MOVF   21,W
00B0:  MOVWF  3E
00B1:  BTFSC  3E.7
00B2:  GOTO   08E
....................    lcd_output_rs(address);
00B3:  BTFSS  3C.0
00B4:  BCF    06.1
00B5:  BTFSC  3C.0
00B6:  BSF    06.1
....................    delay_cycles(1);
00B7:  NOP
....................    lcd_output_rw(0);
00B8:  BCF    06.2
....................    delay_cycles(1);
00B9:  NOP
....................    lcd_output_enable(0);
00BA:  BCF    06.0
....................    lcd_send_nibble(n >> 4);
00BB:  SWAPF  3D,W
00BC:  MOVWF  3E
00BD:  MOVLW  0F
00BE:  ANDWF  3E,F
00BF:  MOVF   3E,W
00C0:  MOVWF  3F
00C1:  CALL   076
....................    lcd_send_nibble(n & 0xf);
00C2:  MOVF   3D,W
00C3:  ANDLW  0F
00C4:  MOVWF  3E
00C5:  MOVWF  3F
00C6:  CALL   076
00C7:  RETURN
.................... }
.................... 
.................... #if defined(LCD_EXTENDED_NEWLINE)
.................... unsigned int8 g_LcdX, g_LcdY;
.................... #endif
.................... 
.................... void lcd_init(void) 
.................... {
....................    unsigned int8 i;
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6};
00C8:  MOVLW  28
00C9:  MOVWF  32
00CA:  MOVLW  0C
00CB:  MOVWF  33
00CC:  MOVLW  01
00CD:  MOVWF  34
00CE:  MOVLW  06
00CF:  MOVWF  35
....................                              // These bytes need to be sent to the LCD
....................                              // to start it up.
....................    
.................... 
....................    lcd_output_enable(0);
00D0:  BCF    06.0
....................    lcd_output_rs(0);
00D1:  BCF    06.1
....................    lcd_output_rw(0);
00D2:  BCF    06.2
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_drive(LCD_DATA4);
....................    output_drive(LCD_DATA5);
....................    output_drive(LCD_DATA6);
....................    output_drive(LCD_DATA7);
....................   #else
....................    lcdtris.data = 0x0;
00D3:  MOVLW  0F
00D4:  BSF    03.5
00D5:  ANDWF  06,W
00D6:  MOVWF  06
....................   #endif
....................    lcd_enable_tris();
00D7:  BCF    06.0
....................    lcd_rs_tris();
00D8:  BCF    06.1
....................    lcd_rw_tris();
00D9:  BCF    06.2
....................  #endif
....................     
....................    delay_ms(15);
00DA:  MOVLW  0F
00DB:  BCF    03.5
00DC:  MOVWF  38
00DD:  CALL   062
....................    for(i=1;i<=3;++i)
00DE:  MOVLW  01
00DF:  MOVWF  31
00E0:  MOVF   31,W
00E1:  SUBLW  03
00E2:  BTFSS  03.0
00E3:  GOTO   0EC
....................    {
....................        lcd_send_nibble(3);
00E4:  MOVLW  03
00E5:  MOVWF  3F
00E6:  CALL   076
....................        delay_ms(5);
00E7:  MOVLW  05
00E8:  MOVWF  38
00E9:  CALL   062
00EA:  INCF   31,F
00EB:  GOTO   0E0
....................    }
....................    
....................    lcd_send_nibble(2);
00EC:  MOVLW  02
00ED:  MOVWF  3F
00EE:  CALL   076
....................    delay_ms(5);
00EF:  MOVLW  05
00F0:  MOVWF  38
00F1:  CALL   062
....................    for(i=0;i<=3;++i)
00F2:  CLRF   31
00F3:  MOVF   31,W
00F4:  SUBLW  03
00F5:  BTFSS  03.0
00F6:  GOTO   102
....................       lcd_send_byte(0,LCD_INIT_STRING[i]);
00F7:  MOVLW  32
00F8:  ADDWF  31,W
00F9:  MOVWF  04
00FA:  MOVF   00,W
00FB:  MOVWF  36
00FC:  CLRF   3C
00FD:  MOVF   36,W
00FE:  MOVWF  3D
00FF:  CALL   088
.................... 
....................   #if defined(LCD_EXTENDED_NEWLINE)
0100:  INCF   31,F
0101:  GOTO   0F3
0102:  BCF    0A.3
0103:  GOTO   21B (RETURN)
....................    g_LcdX = 0;
....................    g_LcdY = 0;
....................   #endif
.................... }
.................... 
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y)
.................... {
....................    unsigned int8 address;
....................    
....................    if(y!=1)
0104:  DECFSZ 39,W
0105:  GOTO   107
0106:  GOTO   10A
....................       address=LCD_LINE_TWO;
0107:  MOVLW  40
0108:  MOVWF  3A
0109:  GOTO   10B
....................    else
....................       address=0;
010A:  CLRF   3A
....................      
....................    address+=x-1;
010B:  MOVLW  01
010C:  SUBWF  38,W
010D:  ADDWF  3A,F
....................    lcd_send_byte(0,0x80|address);
010E:  MOVF   3A,W
010F:  IORLW  80
0110:  MOVWF  3B
0111:  CLRF   3C
0112:  MOVF   3B,W
0113:  MOVWF  3D
0114:  CALL   088
.................... 
....................   #if defined(LCD_EXTENDED_NEWLINE)
0115:  RETURN
....................    g_LcdX = x - 1;
....................    g_LcdY = y - 1;
....................   #endif
.................... }
.................... 
.................... void lcd_putc(char c)
.................... {
....................    switch (c)
0116:  MOVF   37,W
0117:  XORLW  07
0118:  BTFSC  03.2
0119:  GOTO   124
011A:  XORLW  0B
011B:  BTFSC  03.2
011C:  GOTO   129
011D:  XORLW  06
011E:  BTFSC  03.2
011F:  GOTO   131
0120:  XORLW  02
0121:  BTFSC  03.2
0122:  GOTO   137
0123:  GOTO   13C
....................    {
....................       case '\a'   :  lcd_gotoxy(1,1);     break;
0124:  MOVLW  01
0125:  MOVWF  38
0126:  MOVWF  39
0127:  CALL   104
0128:  GOTO   141
.................... 
....................       case '\f'   :  lcd_send_byte(0,1);
0129:  CLRF   3C
012A:  MOVLW  01
012B:  MOVWF  3D
012C:  CALL   088
....................                      delay_ms(2);
012D:  MOVLW  02
012E:  MOVWF  38
012F:  CALL   062
....................                     #if defined(LCD_EXTENDED_NEWLINE)
....................                      g_LcdX = 0;
....................                      g_LcdY = 0;
....................                     #endif
....................                      break;
0130:  GOTO   141
.................... 
....................      #if defined(LCD_EXTENDED_NEWLINE)
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break;
....................       case '\n'   :
....................          while (g_LcdX++ < LCD_LINE_LENGTH)
....................          {
....................             lcd_send_byte(1, ' ');
....................          }
....................          lcd_gotoxy(1, g_LcdY+2);
....................          break;
....................      #else
....................       case '\n'   : lcd_gotoxy(1,2);        break;
0131:  MOVLW  01
0132:  MOVWF  38
0133:  MOVLW  02
0134:  MOVWF  39
0135:  CALL   104
0136:  GOTO   141
....................      #endif
....................      
....................       case '\b'   : lcd_send_byte(0,0x10);  break;
0137:  CLRF   3C
0138:  MOVLW  10
0139:  MOVWF  3D
013A:  CALL   088
013B:  GOTO   141
....................      
....................      #if defined(LCD_EXTENDED_NEWLINE)
....................       default     : 
....................          if (g_LcdX < LCD_LINE_LENGTH)
....................          {
....................             lcd_send_byte(1, c);
....................             g_LcdX++;
....................          }
....................          break;
....................      #else
....................       default     : lcd_send_byte(1,c);     break;
013C:  MOVLW  01
013D:  MOVWF  3C
013E:  MOVF   37,W
013F:  MOVWF  3D
0140:  CALL   088
....................      #endif
....................    }
0141:  RETURN
.................... }
....................  
.................... char lcd_getc(unsigned int8 x, unsigned int8 y)
.................... {
....................    char value;
.................... 
....................    lcd_gotoxy(x,y);
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low
....................    lcd_output_rs(1);
....................    value = lcd_read_byte();
....................    lcd_output_rs(0);
....................    
....................    return(value);
.................... }
.................... 
.................... // write a custom character to the ram
.................... // which is 0-7 and specifies which character array we are modifying.
.................... // ptr points to an array of 8 bytes, where each byte is the next row of
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and
.................... //    usually you will want to leave this byte 0x00.
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr)
.................... {
....................    unsigned int i;
.................... 
....................    which <<= 3;
....................    which &= 0x38;
.................... 
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address
.................... 
....................    for(i=0; i<8; i++)
....................    {
....................       lcd_send_byte(1, *ptr++);
....................    }
....................   
....................    #if defined(LCD_EXTENDED_NEWLINE)
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address
....................    #endif
.................... }
.................... 
.................... void lcd_cursor_on(int1 on)
.................... {
....................    if (on)
....................    {
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON
....................    }
....................    else
....................    {
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF
....................    }
.................... }
.................... 
.................... #endif
.................... 
.................... 
.................... int conteo;
.................... 
.................... #int_RDA
.................... 
.................... RDA_isr()
.................... {
....................    conteo=GETC();
*
0053:  BTFSS  0C.5
0054:  GOTO   053
0055:  MOVF   1A,W
0056:  MOVWF  30
0057:  BCF    0C.5
0058:  BCF    0A.3
0059:  GOTO   030
.................... }
.................... 
.................... 
.................... void main()
*
0207:  MOVF   03,W
0208:  ANDLW  1F
0209:  MOVWF  03
020A:  MOVLW  19
020B:  BSF    03.5
020C:  MOVWF  19
020D:  MOVLW  A6
020E:  MOVWF  18
020F:  MOVLW  90
0210:  BCF    03.5
0211:  MOVWF  18
0212:  BSF    03.5
0213:  BSF    1F.0
0214:  BSF    1F.1
0215:  BSF    1F.2
0216:  BCF    1F.3
0217:  MOVLW  07
0218:  MOVWF  1C
.................... {
....................    lcd_init();
0219:  BCF    03.5
021A:  GOTO   0C8
....................    enable_interrupts(INT_RDA);
021B:  BSF    03.5
021C:  BSF    0C.5
....................    enable_interrupts(GLOBAL);
021D:  MOVLW  C0
021E:  BCF    03.5
021F:  IORWF  0B,F
....................    while(TRUE)
....................    {
....................       lcd_gotoxy(1,1);
0220:  MOVLW  01
0221:  MOVWF  38
0222:  MOVWF  39
0223:  CALL   104
....................       printf(lcd_putc,"recibiendo=%1D",conteo);
0224:  MOVLW  5A
0225:  BSF    03.6
0226:  MOVWF  0D
0227:  MOVLW  00
0228:  MOVWF  0F
0229:  BCF    03.0
022A:  MOVLW  0B
022B:  BCF    03.6
022C:  MOVWF  31
022D:  GOTO   142
022E:  MOVF   30,W
022F:  MOVWF  31
0230:  MOVLW  18
0231:  MOVWF  32
0232:  GOTO   1AF
0233:  GOTO   220
....................    }
.................... 
.................... }
0234:  SLEEP

Configuration Fuses:
   Word  1: 3F71   XT NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
