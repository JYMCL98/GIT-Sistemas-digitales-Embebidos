CCS PCM C Compiler, Version 5.091, 13314               09-jul.-21 08:10

               Filename:   C:\Users\jymcl\Documents\Chapingo\6 Semestre\Sistemas digitales embebidos\Practica34\Practica3.lst

               ROM used:   490 words (12%)
                           Largest free fragment is 2048
               RAM used:   7 (4%) at main() level
                           22 (12%) worst case
               Stack used: 4 locations
               Stack size: 8

0000:  MOVLW  01
0001:  MOVWF  0A
0002:  GOTO   1B3
0003:  NOP
.................... #include <Practica3.h>
.................... #include <16F873A.h>
.................... //////////// Standard Header file for the PIC16F873A device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F873A
0004:  DATA 0C,10
0005:  DATA 54,39
0006:  DATA 61,37
0007:  DATA F3,36
0008:  DATA 69,3A
0009:  DATA E9,32
000A:  DATA 6E,32
000B:  DATA EF,1E
000C:  DATA A5,18
000D:  DATA 44,00
*
00EE:  MOVF   0B,W
00EF:  MOVWF  26
00F0:  BCF    0B.7
00F1:  BSF    03.5
00F2:  BSF    03.6
00F3:  BSF    0C.7
00F4:  BSF    0C.0
00F5:  NOP
00F6:  NOP
00F7:  BCF    03.5
00F8:  BCF    03.6
00F9:  BTFSC  26.7
00FA:  BSF    0B.7
00FB:  BTFSC  03.0
00FC:  GOTO   125
00FD:  BSF    03.6
00FE:  MOVF   0C,W
00FF:  ANDLW  7F
0100:  BCF    03.6
0101:  MOVWF  26
0102:  BSF    03.6
0103:  MOVF   0D,W
0104:  BCF    03.6
0105:  MOVWF  27
0106:  BSF    03.6
0107:  MOVF   0F,W
0108:  BCF    03.6
0109:  MOVWF  28
010A:  MOVF   26,W
010B:  MOVWF  2B
010C:  CALL   0C2
010D:  MOVF   27,W
010E:  BSF    03.6
010F:  MOVWF  0D
0110:  BCF    03.6
0111:  MOVF   28,W
0112:  BSF    03.6
0113:  MOVWF  0F
0114:  BCF    03.6
0115:  MOVF   0B,W
0116:  MOVWF  29
0117:  BCF    0B.7
0118:  BSF    03.5
0119:  BSF    03.6
011A:  BSF    0C.7
011B:  BSF    0C.0
011C:  NOP
011D:  NOP
011E:  BCF    03.5
011F:  BCF    03.6
0120:  BTFSC  29.7
0121:  BSF    0B.7
0122:  DECFSZ 25,F
0123:  GOTO   125
0124:  GOTO   144
0125:  BSF    03.6
0126:  RLF    0C,W
0127:  RLF    0E,W
0128:  ANDLW  7F
0129:  BCF    03.6
012A:  MOVWF  26
012B:  BSF    03.6
012C:  MOVF   0D,W
012D:  BCF    03.6
012E:  MOVWF  27
012F:  BSF    03.6
0130:  MOVF   0F,W
0131:  BCF    03.6
0132:  MOVWF  28
0133:  MOVF   26,W
0134:  MOVWF  2B
0135:  CALL   0C2
0136:  MOVF   27,W
0137:  BSF    03.6
0138:  MOVWF  0D
0139:  BCF    03.6
013A:  MOVF   28,W
013B:  BSF    03.6
013C:  MOVWF  0F
013D:  INCF   0D,F
013E:  BTFSC  03.2
013F:  INCF   0F,F
0140:  BCF    03.0
0141:  BCF    03.6
0142:  DECFSZ 25,F
0143:  GOTO   0EE
0144:  BCF    0A.3
0145:  GOTO   1DA (RETURN)
0146:  MOVF   2C,W
0147:  CLRF   21
0148:  SUBWF  2B,W
0149:  BTFSC  03.0
014A:  GOTO   14E
014B:  MOVF   2B,W
014C:  MOVWF  20
014D:  GOTO   15A
014E:  CLRF   20
014F:  MOVLW  08
0150:  MOVWF  2D
0151:  RLF    2B,F
0152:  RLF    20,F
0153:  MOVF   2C,W
0154:  SUBWF  20,W
0155:  BTFSC  03.0
0156:  MOVWF  20
0157:  RLF    21,F
0158:  DECFSZ 2D,F
0159:  GOTO   151
015A:  RETURN
015B:  MOVLW  20
015C:  BTFSS  26.4
015D:  MOVLW  30
015E:  MOVWF  27
015F:  MOVF   25,W
0160:  MOVWF  20
0161:  BTFSS  25.7
0162:  GOTO   16B
0163:  COMF   20,F
0164:  INCF   20,F
0165:  MOVF   20,W
0166:  MOVWF  25
0167:  MOVLW  2D
0168:  MOVWF  27
0169:  BSF    26.7
016A:  BSF    26.0
016B:  MOVF   25,W
016C:  MOVWF  2B
016D:  MOVLW  64
016E:  MOVWF  2C
016F:  CALL   146
0170:  MOVF   20,W
0171:  MOVWF  25
0172:  MOVLW  30
0173:  ADDWF  21,W
0174:  MOVWF  28
0175:  MOVF   25,W
0176:  MOVWF  2B
0177:  MOVLW  0A
0178:  MOVWF  2C
0179:  CALL   146
017A:  MOVLW  30
017B:  ADDWF  20,W
017C:  MOVWF  2A
017D:  MOVLW  30
017E:  ADDWF  21,W
017F:  MOVWF  29
0180:  MOVF   27,W
0181:  MOVWF  20
0182:  MOVLW  30
0183:  SUBWF  28,W
0184:  BTFSC  03.2
0185:  GOTO   18A
0186:  BSF    26.1
0187:  BTFSC  26.7
0188:  BSF    26.2
0189:  GOTO   19E
018A:  MOVF   27,W
018B:  MOVWF  28
018C:  MOVLW  20
018D:  MOVWF  27
018E:  MOVLW  30
018F:  SUBWF  29,W
0190:  BTFSC  03.2
0191:  GOTO   196
0192:  BSF    26.0
0193:  BTFSC  26.7
0194:  BSF    26.1
0195:  GOTO   19E
0196:  BTFSS  03.2
0197:  BSF    26.0
0198:  BTFSS  03.2
0199:  GOTO   19E
019A:  MOVF   28,W
019B:  MOVWF  29
019C:  MOVLW  20
019D:  MOVWF  28
019E:  BTFSC  26.2
019F:  GOTO   1A5
01A0:  BTFSC  26.1
01A1:  GOTO   1A8
01A2:  BTFSC  26.0
01A3:  GOTO   1AB
01A4:  GOTO   1AE
01A5:  MOVF   27,W
01A6:  MOVWF  2B
01A7:  CALL   0C2
01A8:  MOVF   28,W
01A9:  MOVWF  2B
01AA:  CALL   0C2
01AB:  MOVF   29,W
01AC:  MOVWF  2B
01AD:  CALL   0C2
01AE:  MOVF   2A,W
01AF:  MOVWF  2B
01B0:  CALL   0C2
01B1:  BCF    0A.3
01B2:  GOTO   1DF (RETURN)
.................... 
.................... #list
.................... 
.................... #use delay(crystal=4MHz)
*
000E:  MOVLW  2C
000F:  MOVWF  04
0010:  MOVF   00,W
0011:  BTFSC  03.2
0012:  GOTO   021
0013:  MOVLW  01
0014:  MOVWF  21
0015:  CLRF   20
0016:  DECFSZ 20,F
0017:  GOTO   016
0018:  DECFSZ 21,F
0019:  GOTO   015
001A:  MOVLW  4A
001B:  MOVWF  20
001C:  DECFSZ 20,F
001D:  GOTO   01C
001E:  GOTO   01F
001F:  DECFSZ 00,F
0020:  GOTO   013
0021:  RETURN
.................... 
.................... 
.................... #use rs232(baud=9600,xmit=PIN_C6, rcv=PIN_C7)
.................... #include <lcd.c>
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////                             LCD.C                                     ////
.................... ////                 Driver for common LCD modules                         ////
.................... ////                                                                       ////
.................... ////  lcd_init()   Must be called before any other function.               ////
.................... ////                                                                       ////
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         ////
.................... ////                 \a  Set cursor position to upper left                 ////
.................... ////                 \f  Clear display, set cursor to upper left           ////
.................... ////                 \n  Go to start of second line                        ////
.................... ////                 \b  Move back one position                            ////
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     ////
.................... ////              will erase all remanining characters on the current      ////
.................... ////              line, and move the cursor to the beginning of the next   ////
.................... ////              line.                                                    ////
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     ////
.................... ////              will move the cursor to the start of the current         ////
.................... ////              line.                                                    ////
.................... ////                                                                       ////
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        ////
.................... ////                                                                       ////
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             ////
.................... ////                                                                       ////
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         ////
.................... ////              (on=FALSE).                                              ////
.................... ////                                                                       ////
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   ////
.................... ////                                                                       ////
.................... ////                                                                       ////
.................... ////  CONFIGURATION                                                        ////
.................... ////  The LCD can be configured in one of two ways: a.) port access or     ////
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     ////
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     ////
.................... ////  connected to sequential pins on the GPIO.  Pin access                ////
.................... ////  has no requirements, all 7 bits of the control interface can         ////
.................... ////  can be connected to any GPIO using several ports.                    ////
.................... ////                                                                       ////
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     ////
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    ////
.................... ////  of this file to configure the pin order.  If you are using a         ////
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  ////
.................... ////  be defined.                                                          ////
.................... ////                                                                       ////
.................... ////  Example of port access:                                              ////
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         ////
.................... ////                                                                       ////
.................... ////  To use pin access, the following pins must be defined:               ////
.................... ////     LCD_ENABLE_PIN                                                    ////
.................... ////     LCD_RS_PIN                                                        ////
.................... ////     LCD_RW_PIN                                                        ////
.................... ////     LCD_DATA4                                                         ////
.................... ////     LCD_DATA5                                                         ////
.................... ////     LCD_DATA6                                                         ////
.................... ////     LCD_DATA7                                                         ////
.................... ////                                                                       ////
.................... ////  Example of pin access:                                               ////
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    ////
.................... ////     #define LCD_RS_PIN      PIN_E1                                    ////
.................... ////     #define LCD_RW_PIN      PIN_E2                                    ////
.................... ////     #define LCD_DATA4       PIN_D4                                    ////
.................... ////     #define LCD_DATA5       PIN_D5                                    ////
.................... ////     #define LCD_DATA6       PIN_D6                                    ////
.................... ////     #define LCD_DATA7       PIN_D7                                    ////
.................... ////                                                                       ////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef __LCD_C__
.................... #define __LCD_C__
.................... 
.................... // define the pinout.
.................... // only required if port access is being used.
.................... typedef struct  
.................... {                            // This structure is overlayed
....................    int1 enable;           // on to an I/O port to gain
....................    int1 rs;               // access to the LCD pins.
....................    int1 rw;               // The bits are allocated from
....................    int1 unused;           // low order up.  ENABLE will
....................    unsigned int     data : 4;         // be LSB pin of that port.
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT.
....................    unsigned int    reserved: 8;
....................   #endif
.................... } LCD_PIN_MAP;
.................... 
.................... // this is to improve compatability with previous LCD drivers that accepted
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B.
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE))
....................  #define LCD_DATA_PORT getenv("SFR:PORTB")
.................... #endif
.................... 
.................... #if defined(__PCB__)
....................    // these definitions only need to be modified for baseline PICs.
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions.
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0};
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF};
.................... #endif
.................... 
.................... ////////////////////// END CONFIGURATION ///////////////////////////////////
.................... 
.................... #ifndef LCD_ENABLE_PIN
....................    #define lcd_output_enable(x) lcdlat.enable=x
....................    #define lcd_enable_tris()   lcdtris.enable=0
.................... #else
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x)
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN)
.................... #endif
.................... 
.................... #ifndef LCD_RS_PIN
....................    #define lcd_output_rs(x) lcdlat.rs=x
....................    #define lcd_rs_tris()   lcdtris.rs=0
.................... #else
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x)
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN)
.................... #endif
.................... 
.................... #ifndef LCD_RW_PIN
....................    #define lcd_output_rw(x) lcdlat.rw=x
....................    #define lcd_rw_tris()   lcdtris.rw=0
.................... #else
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x)
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN)
.................... #endif
.................... 
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4,
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver
.................... // compatible with any code written for the original library
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7))
....................    #define  LCD_DATA4    LCD_DATA0
....................    #define  LCD_DATA5    LCD_DATA1
....................    #define  LCD_DATA6    LCD_DATA2
....................    #define  LCD_DATA7    LCD_DATA3
.................... #endif
.................... 
.................... #ifndef LCD_DATA4
.................... #ifndef LCD_DATA_PORT
....................    #if defined(__PCB__)
....................       #define LCD_DATA_PORT      0x06     //portb
....................       #define set_tris_lcd(x)   set_tris_b(x)
....................    #else
....................      #if defined(PIN_D0)
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd
....................      #else
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb
....................      #endif
....................    #endif   
.................... #endif
.................... 
.................... #if defined(__PCB__)
....................    LCD_PIN_MAP lcd, lcdlat;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT
.................... #elif defined(__PCM__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT
....................    #byte lcdtris = LCD_DATA_PORT+0x80
.................... #elif defined(__PCH__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT+9
....................    #byte lcdtris = LCD_DATA_PORT+0x12
.................... #elif defined(__PCD__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #word lcd = LCD_DATA_PORT
....................    #word lcdlat = LCD_DATA_PORT+2
....................    #word lcdtris = LCD_DATA_PORT-0x02
.................... #endif
.................... #endif   //LCD_DATA4 not defined
.................... 
.................... #ifndef LCD_TYPE
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines
.................... #endif
.................... 
.................... #ifndef LCD_LINE_TWO
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line
.................... #endif
.................... 
.................... #ifndef LCD_LINE_LENGTH
....................    #define LCD_LINE_LENGTH 20
.................... #endif
.................... 
.................... unsigned int8 lcd_read_nibble(void);
.................... 
.................... unsigned int8 lcd_read_byte(void)
.................... {
....................    unsigned int8 low,high;
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_INPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_float(LCD_DATA4);
....................    output_float(LCD_DATA5);
....................    output_float(LCD_DATA6);
....................    output_float(LCD_DATA7);
....................   #else
....................    lcdtris.data = 0xF;
*
003A:  MOVLW  0F
003B:  BSF    03.5
003C:  ANDWF  06,W
003D:  IORLW  F0
003E:  MOVWF  06
....................   #endif
....................  #endif
....................         
....................    lcd_output_rw(1);
003F:  BCF    03.5
0040:  BSF    06.2
....................    delay_cycles(1);
0041:  NOP
....................    lcd_output_enable(1);
0042:  BSF    06.0
....................    delay_cycles(1);
0043:  NOP
....................    high = lcd_read_nibble();
0044:  CALL   02E
0045:  MOVF   21,W
0046:  MOVWF  33
....................       
....................    lcd_output_enable(0);
0047:  BCF    06.0
....................    delay_cycles(1);
0048:  NOP
....................    lcd_output_enable(1);
0049:  BSF    06.0
....................    delay_us(1);
004A:  NOP
....................    low = lcd_read_nibble();
004B:  CALL   02E
004C:  MOVF   21,W
004D:  MOVWF  32
....................       
....................    lcd_output_enable(0);
004E:  BCF    06.0
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_drive(LCD_DATA4);
....................    output_drive(LCD_DATA5);
....................    output_drive(LCD_DATA6);
....................    output_drive(LCD_DATA7);
....................   #else
....................    lcdtris.data = 0x0;
004F:  MOVLW  0F
0050:  BSF    03.5
0051:  ANDWF  06,W
0052:  MOVWF  06
....................   #endif
....................  #endif
.................... 
....................    return( (high<<4) | low);
0053:  BCF    03.5
0054:  SWAPF  33,W
0055:  MOVWF  20
0056:  MOVLW  F0
0057:  ANDWF  20,F
0058:  MOVF   20,W
0059:  IORWF  32,W
005A:  MOVWF  21
.................... }
.................... 
.................... unsigned int8 lcd_read_nibble(void)
.................... {
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    unsigned int8 n = 0x00;
.................... 
....................    /* Read the data port */
....................    n |= input(LCD_DATA4);
....................    n |= input(LCD_DATA5) << 1;
....................    n |= input(LCD_DATA6) << 2;
....................    n |= input(LCD_DATA7) << 3;
....................    
....................    return(n);
....................   #else
....................    return(lcd.data);
*
002E:  MOVF   06,W
002F:  MOVWF  20
0030:  SWAPF  06,W
0031:  ANDLW  0F
0032:  MOVWF  21
....................   #endif
0033:  RETURN
.................... }
.................... 
.................... void lcd_send_nibble(unsigned int8 n)
.................... {
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    /* Write to the data port */
....................    output_bit(LCD_DATA4, bit_test(n, 0));
....................    output_bit(LCD_DATA5, bit_test(n, 1));
....................    output_bit(LCD_DATA6, bit_test(n, 2));
....................    output_bit(LCD_DATA7, bit_test(n, 3));
....................   #else      
....................    lcdlat.data = n;
*
0022:  SWAPF  33,W
0023:  ANDLW  F0
0024:  MOVWF  20
0025:  MOVLW  0F
0026:  ANDWF  06,W
0027:  IORWF  20,W
0028:  MOVWF  06
....................   #endif
....................       
....................    delay_cycles(1);
0029:  NOP
....................    lcd_output_enable(1);
002A:  BSF    06.0
....................    delay_us(2);
002B:  GOTO   02C
....................    lcd_output_enable(0);
002C:  BCF    06.0
002D:  RETURN
.................... }
.................... 
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n)
.................... {
....................   #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................   #else
....................    lcd_enable_tris();
*
0034:  BSF    03.5
0035:  BCF    06.0
....................    lcd_rs_tris();
0036:  BCF    06.1
....................    lcd_rw_tris();
0037:  BCF    06.2
....................   #endif
.................... 
....................    lcd_output_rs(0);
0038:  BCF    03.5
0039:  BCF    06.1
....................    while ( bit_test(lcd_read_byte(),7) ) ;
*
005B:  MOVF   21,W
005C:  MOVWF  32
005D:  BTFSC  32.7
005E:  GOTO   03A
....................    lcd_output_rs(address);
005F:  BTFSS  30.0
0060:  BCF    06.1
0061:  BTFSC  30.0
0062:  BSF    06.1
....................    delay_cycles(1);
0063:  NOP
....................    lcd_output_rw(0);
0064:  BCF    06.2
....................    delay_cycles(1);
0065:  NOP
....................    lcd_output_enable(0);
0066:  BCF    06.0
....................    lcd_send_nibble(n >> 4);
0067:  SWAPF  31,W
0068:  MOVWF  32
0069:  MOVLW  0F
006A:  ANDWF  32,F
006B:  MOVF   32,W
006C:  MOVWF  33
006D:  CALL   022
....................    lcd_send_nibble(n & 0xf);
006E:  MOVF   31,W
006F:  ANDLW  0F
0070:  MOVWF  32
0071:  MOVWF  33
0072:  CALL   022
0073:  RETURN
.................... }
.................... 
.................... #if defined(LCD_EXTENDED_NEWLINE)
.................... unsigned int8 g_LcdX, g_LcdY;
.................... #endif
.................... 
.................... void lcd_init(void) 
.................... {
....................    unsigned int8 i;
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6};
0074:  MOVLW  28
0075:  MOVWF  26
0076:  MOVLW  0C
0077:  MOVWF  27
0078:  MOVLW  01
0079:  MOVWF  28
007A:  MOVLW  06
007B:  MOVWF  29
....................                              // These bytes need to be sent to the LCD
....................                              // to start it up.
....................    
.................... 
....................    lcd_output_enable(0);
007C:  BCF    06.0
....................    lcd_output_rs(0);
007D:  BCF    06.1
....................    lcd_output_rw(0);
007E:  BCF    06.2
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_drive(LCD_DATA4);
....................    output_drive(LCD_DATA5);
....................    output_drive(LCD_DATA6);
....................    output_drive(LCD_DATA7);
....................   #else
....................    lcdtris.data = 0x0;
007F:  MOVLW  0F
0080:  BSF    03.5
0081:  ANDWF  06,W
0082:  MOVWF  06
....................   #endif
....................    lcd_enable_tris();
0083:  BCF    06.0
....................    lcd_rs_tris();
0084:  BCF    06.1
....................    lcd_rw_tris();
0085:  BCF    06.2
....................  #endif
....................     
....................    delay_ms(15);
0086:  MOVLW  0F
0087:  BCF    03.5
0088:  MOVWF  2C
0089:  CALL   00E
....................    for(i=1;i<=3;++i)
008A:  MOVLW  01
008B:  MOVWF  25
008C:  MOVF   25,W
008D:  SUBLW  03
008E:  BTFSS  03.0
008F:  GOTO   098
....................    {
....................        lcd_send_nibble(3);
0090:  MOVLW  03
0091:  MOVWF  33
0092:  CALL   022
....................        delay_ms(5);
0093:  MOVLW  05
0094:  MOVWF  2C
0095:  CALL   00E
0096:  INCF   25,F
0097:  GOTO   08C
....................    }
....................    
....................    lcd_send_nibble(2);
0098:  MOVLW  02
0099:  MOVWF  33
009A:  CALL   022
....................    delay_ms(5);
009B:  MOVLW  05
009C:  MOVWF  2C
009D:  CALL   00E
....................    for(i=0;i<=3;++i)
009E:  CLRF   25
009F:  MOVF   25,W
00A0:  SUBLW  03
00A1:  BTFSS  03.0
00A2:  GOTO   0AE
....................       lcd_send_byte(0,LCD_INIT_STRING[i]);
00A3:  MOVLW  26
00A4:  ADDWF  25,W
00A5:  MOVWF  04
00A6:  MOVF   00,W
00A7:  MOVWF  2A
00A8:  CLRF   30
00A9:  MOVF   2A,W
00AA:  MOVWF  31
00AB:  CALL   034
.................... 
....................   #if defined(LCD_EXTENDED_NEWLINE)
00AC:  INCF   25,F
00AD:  GOTO   09F
00AE:  BCF    0A.3
00AF:  GOTO   1C7 (RETURN)
....................    g_LcdX = 0;
....................    g_LcdY = 0;
....................   #endif
.................... }
.................... 
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y)
.................... {
....................    unsigned int8 address;
....................    
....................    if(y!=1)
00B0:  DECFSZ 2D,W
00B1:  GOTO   0B3
00B2:  GOTO   0B6
....................       address=LCD_LINE_TWO;
00B3:  MOVLW  40
00B4:  MOVWF  2E
00B5:  GOTO   0B7
....................    else
....................       address=0;
00B6:  CLRF   2E
....................      
....................    address+=x-1;
00B7:  MOVLW  01
00B8:  SUBWF  2C,W
00B9:  ADDWF  2E,F
....................    lcd_send_byte(0,0x80|address);
00BA:  MOVF   2E,W
00BB:  IORLW  80
00BC:  MOVWF  2F
00BD:  CLRF   30
00BE:  MOVF   2F,W
00BF:  MOVWF  31
00C0:  CALL   034
.................... 
....................   #if defined(LCD_EXTENDED_NEWLINE)
00C1:  RETURN
....................    g_LcdX = x - 1;
....................    g_LcdY = y - 1;
....................   #endif
.................... }
.................... 
.................... void lcd_putc(char c)
.................... {
....................    switch (c)
00C2:  MOVF   2B,W
00C3:  XORLW  07
00C4:  BTFSC  03.2
00C5:  GOTO   0D0
00C6:  XORLW  0B
00C7:  BTFSC  03.2
00C8:  GOTO   0D5
00C9:  XORLW  06
00CA:  BTFSC  03.2
00CB:  GOTO   0DD
00CC:  XORLW  02
00CD:  BTFSC  03.2
00CE:  GOTO   0E3
00CF:  GOTO   0E8
....................    {
....................       case '\a'   :  lcd_gotoxy(1,1);     break;
00D0:  MOVLW  01
00D1:  MOVWF  2C
00D2:  MOVWF  2D
00D3:  CALL   0B0
00D4:  GOTO   0ED
.................... 
....................       case '\f'   :  lcd_send_byte(0,1);
00D5:  CLRF   30
00D6:  MOVLW  01
00D7:  MOVWF  31
00D8:  CALL   034
....................                      delay_ms(2);
00D9:  MOVLW  02
00DA:  MOVWF  2C
00DB:  CALL   00E
....................                     #if defined(LCD_EXTENDED_NEWLINE)
....................                      g_LcdX = 0;
....................                      g_LcdY = 0;
....................                     #endif
....................                      break;
00DC:  GOTO   0ED
.................... 
....................      #if defined(LCD_EXTENDED_NEWLINE)
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break;
....................       case '\n'   :
....................          while (g_LcdX++ < LCD_LINE_LENGTH)
....................          {
....................             lcd_send_byte(1, ' ');
....................          }
....................          lcd_gotoxy(1, g_LcdY+2);
....................          break;
....................      #else
....................       case '\n'   : lcd_gotoxy(1,2);        break;
00DD:  MOVLW  01
00DE:  MOVWF  2C
00DF:  MOVLW  02
00E0:  MOVWF  2D
00E1:  CALL   0B0
00E2:  GOTO   0ED
....................      #endif
....................      
....................       case '\b'   : lcd_send_byte(0,0x10);  break;
00E3:  CLRF   30
00E4:  MOVLW  10
00E5:  MOVWF  31
00E6:  CALL   034
00E7:  GOTO   0ED
....................      
....................      #if defined(LCD_EXTENDED_NEWLINE)
....................       default     : 
....................          if (g_LcdX < LCD_LINE_LENGTH)
....................          {
....................             lcd_send_byte(1, c);
....................             g_LcdX++;
....................          }
....................          break;
....................      #else
....................       default     : lcd_send_byte(1,c);     break;
00E8:  MOVLW  01
00E9:  MOVWF  30
00EA:  MOVF   2B,W
00EB:  MOVWF  31
00EC:  CALL   034
....................      #endif
....................    }
00ED:  RETURN
.................... }
....................  
.................... char lcd_getc(unsigned int8 x, unsigned int8 y)
.................... {
....................    char value;
.................... 
....................    lcd_gotoxy(x,y);
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low
....................    lcd_output_rs(1);
....................    value = lcd_read_byte();
....................    lcd_output_rs(0);
....................    
....................    return(value);
.................... }
.................... 
.................... // write a custom character to the ram
.................... // which is 0-7 and specifies which character array we are modifying.
.................... // ptr points to an array of 8 bytes, where each byte is the next row of
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and
.................... //    usually you will want to leave this byte 0x00.
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr)
.................... {
....................    unsigned int i;
.................... 
....................    which <<= 3;
....................    which &= 0x38;
.................... 
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address
.................... 
....................    for(i=0; i<8; i++)
....................    {
....................       lcd_send_byte(1, *ptr++);
....................    }
....................   
....................    #if defined(LCD_EXTENDED_NEWLINE)
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address
....................    #endif
.................... }
.................... 
.................... void lcd_cursor_on(int1 on)
.................... {
....................    if (on)
....................    {
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON
....................    }
....................    else
....................    {
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF
....................    }
.................... }
.................... 
.................... #endif
.................... 
.................... int contador;
.................... 
.................... void main()
*
01B3:  MOVF   03,W
01B4:  ANDLW  1F
01B5:  MOVWF  03
01B6:  MOVLW  19
01B7:  BSF    03.5
01B8:  MOVWF  19
01B9:  MOVLW  A6
01BA:  MOVWF  18
01BB:  MOVLW  90
01BC:  BCF    03.5
01BD:  MOVWF  18
01BE:  BSF    03.5
01BF:  BSF    1F.0
01C0:  BSF    1F.1
01C1:  BSF    1F.2
01C2:  BCF    1F.3
01C3:  MOVLW  07
01C4:  MOVWF  1C
.................... {
....................    lcd_init();
01C5:  BCF    03.5
01C6:  GOTO   074
....................    while(TRUE)
....................    {
....................       for (contador=0;contador<10;contador++)
01C7:  CLRF   24
01C8:  MOVF   24,W
01C9:  SUBLW  09
01CA:  BTFSS  03.0
01CB:  GOTO   1E8
....................       {
....................          putc(contador);
01CC:  MOVF   24,W
01CD:  BTFSS  0C.4
01CE:  GOTO   1CD
01CF:  MOVWF  19
....................          printf(lcd_putc,"\f Transmitiendo=%1D", contador);
01D0:  MOVLW  04
01D1:  BSF    03.6
01D2:  MOVWF  0D
01D3:  MOVLW  00
01D4:  MOVWF  0F
01D5:  BCF    03.0
01D6:  MOVLW  10
01D7:  BCF    03.6
01D8:  MOVWF  25
01D9:  GOTO   0EE
01DA:  MOVF   24,W
01DB:  MOVWF  25
01DC:  MOVLW  18
01DD:  MOVWF  26
01DE:  GOTO   15B
....................          delay_ms(300);
01DF:  MOVLW  02
01E0:  MOVWF  25
01E1:  MOVLW  96
01E2:  MOVWF  2C
01E3:  CALL   00E
01E4:  DECFSZ 25,F
01E5:  GOTO   1E1
01E6:  INCF   24,F
01E7:  GOTO   1C8
....................       }
01E8:  GOTO   1C7
....................    }
.................... 
.................... }
01E9:  SLEEP

Configuration Fuses:
   Word  1: 3F71   XT NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
