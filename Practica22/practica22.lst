CCS PCM C Compiler, Version 5.091, 13314               25-jul.-21 03:11

               Filename:   C:\Users\jymcl\Documents\Chapingo\6 Semestre\Sistemas digitales embebidos\Practica22\practica22.lst

               ROM used:   1231 words (30%)
                           Largest free fragment is 2048
               RAM used:   15 (8%) at main() level
                           35 (18%) worst case
               Stack used: 5 locations
               Stack size: 8

0000:  MOVLW  04
0001:  MOVWF  0A
0002:  GOTO   42E
0003:  NOP
.................... #include <practica22.h>
.................... #include <16F873A.h>
.................... //////////// Standard Header file for the PIC16F873A device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F873A
0004:  DATA 41,22
0005:  DATA 43,10
0006:  DATA 3D,10
0007:  DATA 25,1B
0008:  DATA EC,3A
0009:  DATA 00,00
000A:  DATA D6,37
000B:  DATA 6C,3A
000C:  DATA 73,10
000D:  DATA 3D,10
000E:  DATA 25,18
000F:  DATA 31,17
0010:  DATA 32,33
0011:  DATA 00,22
*
00F2:  MOVF   0B,W
00F3:  MOVWF  2C
00F4:  BCF    0B.7
00F5:  BSF    03.5
00F6:  BSF    03.6
00F7:  BSF    0C.7
00F8:  BSF    0C.0
00F9:  NOP
00FA:  NOP
00FB:  BCF    03.5
00FC:  BCF    03.6
00FD:  BTFSC  2C.7
00FE:  BSF    0B.7
00FF:  BTFSC  03.0
0100:  GOTO   129
0101:  BSF    03.6
0102:  MOVF   0C,W
0103:  ANDLW  7F
0104:  BCF    03.6
0105:  MOVWF  2C
0106:  BSF    03.6
0107:  MOVF   0D,W
0108:  BCF    03.6
0109:  MOVWF  2D
010A:  BSF    03.6
010B:  MOVF   0F,W
010C:  BCF    03.6
010D:  MOVWF  2E
010E:  MOVF   2C,W
010F:  MOVWF  36
0110:  CALL   0C6
0111:  MOVF   2D,W
0112:  BSF    03.6
0113:  MOVWF  0D
0114:  BCF    03.6
0115:  MOVF   2E,W
0116:  BSF    03.6
0117:  MOVWF  0F
0118:  BCF    03.6
0119:  MOVF   0B,W
011A:  MOVWF  2F
011B:  BCF    0B.7
011C:  BSF    03.5
011D:  BSF    03.6
011E:  BSF    0C.7
011F:  BSF    0C.0
0120:  NOP
0121:  NOP
0122:  BCF    03.5
0123:  BCF    03.6
0124:  BTFSC  2F.7
0125:  BSF    0B.7
0126:  DECFSZ 2B,F
0127:  GOTO   129
0128:  GOTO   148
0129:  BSF    03.6
012A:  RLF    0C,W
012B:  RLF    0E,W
012C:  ANDLW  7F
012D:  BCF    03.6
012E:  MOVWF  2C
012F:  BSF    03.6
0130:  MOVF   0D,W
0131:  BCF    03.6
0132:  MOVWF  2D
0133:  BSF    03.6
0134:  MOVF   0F,W
0135:  BCF    03.6
0136:  MOVWF  2E
0137:  MOVF   2C,W
0138:  MOVWF  36
0139:  CALL   0C6
013A:  MOVF   2D,W
013B:  BSF    03.6
013C:  MOVWF  0D
013D:  BCF    03.6
013E:  MOVF   2E,W
013F:  BSF    03.6
0140:  MOVWF  0F
0141:  INCF   0D,F
0142:  BTFSC  03.2
0143:  INCF   0F,F
0144:  BCF    03.0
0145:  BCF    03.6
0146:  DECFSZ 2B,F
0147:  GOTO   0F2
0148:  RETURN
0149:  MOVF   04,W
014A:  MOVWF  32
014B:  SWAPF  2C,W
014C:  IORLW  F0
014D:  MOVWF  2E
014E:  ADDWF  2E,F
014F:  ADDLW  E2
0150:  MOVWF  2F
0151:  ADDLW  32
0152:  MOVWF  31
0153:  MOVF   2C,W
0154:  ANDLW  0F
0155:  ADDWF  2F,F
0156:  ADDWF  2F,F
0157:  ADDWF  31,F
0158:  ADDLW  E9
0159:  MOVWF  30
015A:  ADDWF  30,F
015B:  ADDWF  30,F
015C:  SWAPF  2B,W
015D:  ANDLW  0F
015E:  ADDWF  30,F
015F:  ADDWF  31,F
0160:  RLF    30,F
0161:  RLF    31,F
0162:  COMF   31,F
0163:  RLF    31,F
0164:  MOVF   2B,W
0165:  ANDLW  0F
0166:  ADDWF  31,F
0167:  RLF    2E,F
0168:  MOVLW  07
0169:  MOVWF  2D
016A:  MOVLW  0A
016B:  ADDWF  31,F
016C:  DECF   30,F
016D:  BTFSS  03.0
016E:  GOTO   16B
016F:  ADDWF  30,F
0170:  DECF   2F,F
0171:  BTFSS  03.0
0172:  GOTO   16F
0173:  ADDWF  2F,F
0174:  DECF   2E,F
0175:  BTFSS  03.0
0176:  GOTO   173
0177:  ADDWF  2E,F
0178:  DECF   2D,F
0179:  BTFSS  03.0
017A:  GOTO   177
017B:  MOVLW  2D
017C:  MOVWF  04
017D:  MOVLW  07
017E:  ANDWF  32,W
017F:  BCF    32.6
0180:  ADDWF  04,F
0181:  MOVLW  31
0182:  SUBWF  04,W
0183:  BTFSC  03.2
0184:  BSF    32.6
0185:  MOVF   00,W
0186:  MOVWF  20
0187:  BTFSS  03.2
0188:  GOTO   191
0189:  BTFSC  32.6
018A:  GOTO   191
018B:  BTFSC  32.4
018C:  GOTO   19D
018D:  BTFSC  32.3
018E:  GOTO   191
018F:  MOVLW  20
0190:  GOTO   194
0191:  BSF    32.3
0192:  BCF    32.4
0193:  MOVLW  30
0194:  ADDWF  20,F
0195:  CLRF   2C
0196:  MOVF   04,W
0197:  MOVWF  2B
0198:  MOVF   20,W
0199:  MOVWF  36
019A:  CALL   0C6
019B:  MOVF   2B,W
019C:  MOVWF  04
019D:  INCF   04,F
019E:  BTFSS  32.6
019F:  GOTO   181
01A0:  BCF    0A.3
01A1:  GOTO   479 (RETURN)
01A2:  MOVLW  8E
01A3:  MOVWF  20
01A4:  MOVF   2C,W
01A5:  MOVWF  21
01A6:  MOVF   2B,W
01A7:  MOVWF  22
01A8:  CLRF   23
01A9:  MOVF   21,F
01AA:  BTFSS  03.2
01AB:  GOTO   1B6
01AC:  MOVF   22,W
01AD:  MOVWF  21
01AE:  CLRF   22
01AF:  MOVLW  08
01B0:  SUBWF  20,F
01B1:  MOVF   21,F
01B2:  BTFSS  03.2
01B3:  GOTO   1B6
01B4:  CLRF   20
01B5:  GOTO   1BE
01B6:  BCF    03.0
01B7:  BTFSC  21.7
01B8:  GOTO   1BD
01B9:  RLF    22,F
01BA:  RLF    21,F
01BB:  DECF   20,F
01BC:  GOTO   1B6
01BD:  BCF    21.7
01BE:  BCF    0A.3
01BF:  GOTO   481 (RETURN)
01C0:  MOVF   36,W
01C1:  BTFSC  03.2
01C2:  GOTO   230
01C3:  MOVWF  3E
01C4:  MOVF   3A,W
01C5:  BTFSC  03.2
01C6:  GOTO   230
01C7:  ADDWF  3E,F
01C8:  BTFSC  03.0
01C9:  GOTO   1D1
01CA:  MOVLW  7F
01CB:  SUBWF  3E,F
01CC:  BTFSS  03.0
01CD:  GOTO   230
01CE:  BTFSC  03.2
01CF:  GOTO   230
01D0:  GOTO   1D5
01D1:  MOVLW  81
01D2:  ADDWF  3E,F
01D3:  BTFSC  03.0
01D4:  GOTO   230
01D5:  MOVF   3E,W
01D6:  MOVWF  20
01D7:  CLRF   21
01D8:  CLRF   22
01D9:  CLRF   23
01DA:  MOVF   37,W
01DB:  MOVWF  42
01DC:  BSF    42.7
01DD:  MOVF   38,W
01DE:  MOVWF  41
01DF:  MOVF   39,W
01E0:  MOVWF  40
01E1:  MOVLW  18
01E2:  MOVWF  3E
01E3:  CLRF   3F
01E4:  BTFSS  40.0
01E5:  GOTO   1FE
01E6:  MOVF   3D,W
01E7:  ADDWF  23,F
01E8:  BTFSS  03.0
01E9:  GOTO   1F0
01EA:  INCF   22,F
01EB:  BTFSS  03.2
01EC:  GOTO   1F0
01ED:  INCF   21,F
01EE:  BTFSC  03.2
01EF:  BSF    3F.7
01F0:  MOVF   3C,W
01F1:  ADDWF  22,F
01F2:  BTFSS  03.0
01F3:  GOTO   1F7
01F4:  INCF   21,F
01F5:  BTFSC  03.2
01F6:  BSF    3F.7
01F7:  MOVF   3B,W
01F8:  MOVWF  38
01F9:  BSF    38.7
01FA:  MOVF   38,W
01FB:  ADDWF  21,F
01FC:  BTFSC  03.0
01FD:  BSF    3F.7
01FE:  RLF    3F,F
01FF:  RRF    21,F
0200:  RRF    22,F
0201:  RRF    23,F
0202:  RRF    42,F
0203:  RRF    41,F
0204:  RRF    40,F
0205:  BCF    03.0
0206:  DECFSZ 3E,F
0207:  GOTO   1E3
0208:  MOVLW  01
0209:  ADDWF  20,F
020A:  BTFSC  03.0
020B:  GOTO   230
020C:  BTFSC  21.7
020D:  GOTO   215
020E:  RLF    42,F
020F:  RLF    23,F
0210:  RLF    22,F
0211:  RLF    21,F
0212:  DECF   20,F
0213:  BTFSC  03.2
0214:  GOTO   230
0215:  BTFSS  42.7
0216:  GOTO   226
0217:  INCF   23,F
0218:  BTFSS  03.2
0219:  GOTO   226
021A:  INCF   22,F
021B:  BTFSS  03.2
021C:  GOTO   226
021D:  INCF   21,F
021E:  BTFSS  03.2
021F:  GOTO   226
0220:  RRF    21,F
0221:  RRF    22,F
0222:  RRF    23,F
0223:  INCF   20,F
0224:  BTFSC  03.2
0225:  GOTO   230
0226:  MOVF   37,W
0227:  MOVWF  3F
0228:  MOVF   3B,W
0229:  XORWF  3F,F
022A:  BTFSS  3F.7
022B:  GOTO   22E
022C:  BSF    21.7
022D:  GOTO   234
022E:  BCF    21.7
022F:  GOTO   234
0230:  CLRF   20
0231:  CLRF   21
0232:  CLRF   22
0233:  CLRF   23
0234:  RETURN
0235:  MOVF   2F,W
0236:  BTFSC  03.2
0237:  GOTO   2FA
0238:  MOVWF  3B
0239:  MOVF   33,W
023A:  BTFSC  03.2
023B:  GOTO   2FA
023C:  SUBWF  3B,F
023D:  BTFSS  03.0
023E:  GOTO   244
023F:  MOVLW  7F
0240:  ADDWF  3B,F
0241:  BTFSC  03.0
0242:  GOTO   2FA
0243:  GOTO   24A
0244:  MOVLW  81
0245:  SUBWF  3B,F
0246:  BTFSS  03.0
0247:  GOTO   2FA
0248:  BTFSC  03.2
0249:  GOTO   2FA
024A:  MOVF   3B,W
024B:  MOVWF  20
024C:  CLRF   21
024D:  CLRF   22
024E:  CLRF   23
024F:  CLRF   3A
0250:  MOVF   30,W
0251:  MOVWF  39
0252:  BSF    39.7
0253:  MOVF   31,W
0254:  MOVWF  38
0255:  MOVF   32,W
0256:  MOVWF  37
0257:  MOVLW  19
0258:  MOVWF  3B
0259:  MOVF   36,W
025A:  SUBWF  37,F
025B:  BTFSC  03.0
025C:  GOTO   26D
025D:  MOVLW  01
025E:  SUBWF  38,F
025F:  BTFSC  03.0
0260:  GOTO   26D
0261:  SUBWF  39,F
0262:  BTFSC  03.0
0263:  GOTO   26D
0264:  SUBWF  3A,F
0265:  BTFSC  03.0
0266:  GOTO   26D
0267:  INCF   3A,F
0268:  INCF   39,F
0269:  INCF   38,F
026A:  MOVF   36,W
026B:  ADDWF  37,F
026C:  GOTO   29F
026D:  MOVF   35,W
026E:  SUBWF  38,F
026F:  BTFSC  03.0
0270:  GOTO   288
0271:  MOVLW  01
0272:  SUBWF  39,F
0273:  BTFSC  03.0
0274:  GOTO   288
0275:  SUBWF  3A,F
0276:  BTFSC  03.0
0277:  GOTO   288
0278:  INCF   3A,F
0279:  INCF   39,F
027A:  MOVF   35,W
027B:  ADDWF  38,F
027C:  MOVF   36,W
027D:  ADDWF  37,F
027E:  BTFSS  03.0
027F:  GOTO   29F
0280:  INCF   38,F
0281:  BTFSS  03.2
0282:  GOTO   29F
0283:  INCF   39,F
0284:  BTFSS  03.2
0285:  GOTO   29F
0286:  INCF   3A,F
0287:  GOTO   29F
0288:  MOVF   34,W
0289:  IORLW  80
028A:  SUBWF  39,F
028B:  BTFSC  03.0
028C:  GOTO   29E
028D:  MOVLW  01
028E:  SUBWF  3A,F
028F:  BTFSC  03.0
0290:  GOTO   29E
0291:  INCF   3A,F
0292:  MOVF   34,W
0293:  IORLW  80
0294:  ADDWF  39,F
0295:  MOVF   35,W
0296:  ADDWF  38,F
0297:  BTFSS  03.0
0298:  GOTO   27C
0299:  INCF   39,F
029A:  BTFSS  03.2
029B:  GOTO   27C
029C:  INCF   3A,F
029D:  GOTO   27C
029E:  BSF    23.0
029F:  DECFSZ 3B,F
02A0:  GOTO   2A2
02A1:  GOTO   2AD
02A2:  BCF    03.0
02A3:  RLF    37,F
02A4:  RLF    38,F
02A5:  RLF    39,F
02A6:  RLF    3A,F
02A7:  BCF    03.0
02A8:  RLF    23,F
02A9:  RLF    22,F
02AA:  RLF    21,F
02AB:  RLF    3C,F
02AC:  GOTO   259
02AD:  BTFSS  3C.0
02AE:  GOTO   2B5
02AF:  BCF    03.0
02B0:  RRF    21,F
02B1:  RRF    22,F
02B2:  RRF    23,F
02B3:  RRF    3C,F
02B4:  GOTO   2B8
02B5:  DECF   20,F
02B6:  BTFSC  03.2
02B7:  GOTO   2FA
02B8:  BTFSC  3C.7
02B9:  GOTO   2E1
02BA:  BCF    03.0
02BB:  RLF    37,F
02BC:  RLF    38,F
02BD:  RLF    39,F
02BE:  RLF    3A,F
02BF:  MOVF   36,W
02C0:  SUBWF  37,F
02C1:  BTFSC  03.0
02C2:  GOTO   2CD
02C3:  MOVLW  01
02C4:  SUBWF  38,F
02C5:  BTFSC  03.0
02C6:  GOTO   2CD
02C7:  SUBWF  39,F
02C8:  BTFSC  03.0
02C9:  GOTO   2CD
02CA:  SUBWF  3A,F
02CB:  BTFSS  03.0
02CC:  GOTO   2F0
02CD:  MOVF   35,W
02CE:  SUBWF  38,F
02CF:  BTFSC  03.0
02D0:  GOTO   2D8
02D1:  MOVLW  01
02D2:  SUBWF  39,F
02D3:  BTFSC  03.0
02D4:  GOTO   2D8
02D5:  SUBWF  3A,F
02D6:  BTFSS  03.0
02D7:  GOTO   2F0
02D8:  MOVF   34,W
02D9:  IORLW  80
02DA:  SUBWF  39,F
02DB:  BTFSC  03.0
02DC:  GOTO   2E1
02DD:  MOVLW  01
02DE:  SUBWF  3A,F
02DF:  BTFSS  03.0
02E0:  GOTO   2F0
02E1:  INCF   23,F
02E2:  BTFSS  03.2
02E3:  GOTO   2F0
02E4:  INCF   22,F
02E5:  BTFSS  03.2
02E6:  GOTO   2F0
02E7:  INCF   21,F
02E8:  BTFSS  03.2
02E9:  GOTO   2F0
02EA:  INCF   20,F
02EB:  BTFSC  03.2
02EC:  GOTO   2FA
02ED:  RRF    21,F
02EE:  RRF    22,F
02EF:  RRF    23,F
02F0:  MOVF   30,W
02F1:  MOVWF  3B
02F2:  MOVF   34,W
02F3:  XORWF  3B,F
02F4:  BTFSS  3B.7
02F5:  GOTO   2F8
02F6:  BSF    21.7
02F7:  GOTO   2FE
02F8:  BCF    21.7
02F9:  GOTO   2FE
02FA:  CLRF   20
02FB:  CLRF   21
02FC:  CLRF   22
02FD:  CLRF   23
02FE:  BCF    0A.3
02FF:  GOTO   4A6 (RETURN)
0300:  BTFSC  03.1
0301:  GOTO   304
0302:  MOVLW  3E
0303:  MOVWF  04
0304:  CLRF   20
0305:  CLRF   21
0306:  CLRF   22
0307:  CLRF   23
0308:  CLRF   3E
0309:  CLRF   3F
030A:  CLRF   40
030B:  CLRF   41
030C:  MOVF   3D,W
030D:  IORWF  3C,W
030E:  IORWF  3B,W
030F:  IORWF  3A,W
0310:  BTFSC  03.2
0311:  GOTO   342
0312:  MOVLW  20
0313:  MOVWF  42
0314:  BCF    03.0
0315:  RLF    36,F
0316:  RLF    37,F
0317:  RLF    38,F
0318:  RLF    39,F
0319:  RLF    3E,F
031A:  RLF    3F,F
031B:  RLF    40,F
031C:  RLF    41,F
031D:  MOVF   3D,W
031E:  SUBWF  41,W
031F:  BTFSS  03.2
0320:  GOTO   32B
0321:  MOVF   3C,W
0322:  SUBWF  40,W
0323:  BTFSS  03.2
0324:  GOTO   32B
0325:  MOVF   3B,W
0326:  SUBWF  3F,W
0327:  BTFSS  03.2
0328:  GOTO   32B
0329:  MOVF   3A,W
032A:  SUBWF  3E,W
032B:  BTFSS  03.0
032C:  GOTO   33C
032D:  MOVF   3A,W
032E:  SUBWF  3E,F
032F:  MOVF   3B,W
0330:  BTFSS  03.0
0331:  INCFSZ 3B,W
0332:  SUBWF  3F,F
0333:  MOVF   3C,W
0334:  BTFSS  03.0
0335:  INCFSZ 3C,W
0336:  SUBWF  40,F
0337:  MOVF   3D,W
0338:  BTFSS  03.0
0339:  INCFSZ 3D,W
033A:  SUBWF  41,F
033B:  BSF    03.0
033C:  RLF    20,F
033D:  RLF    21,F
033E:  RLF    22,F
033F:  RLF    23,F
0340:  DECFSZ 42,F
0341:  GOTO   314
0342:  MOVF   3E,W
0343:  MOVWF  00
0344:  INCF   04,F
0345:  MOVF   3F,W
0346:  MOVWF  00
0347:  INCF   04,F
0348:  MOVF   40,W
0349:  MOVWF  00
034A:  INCF   04,F
034B:  MOVF   41,W
034C:  MOVWF  00
034D:  RETURN
034E:  MOVF   04,W
034F:  MOVWF  30
0350:  MOVF   2F,W
0351:  MOVWF  31
0352:  BTFSC  03.2
0353:  GOTO   36D
0354:  MOVF   2E,W
0355:  MOVWF  39
0356:  MOVF   2D,W
0357:  MOVWF  38
0358:  MOVF   2C,W
0359:  MOVWF  37
035A:  MOVF   2B,W
035B:  MOVWF  36
035C:  CLRF   3D
035D:  CLRF   3C
035E:  MOVLW  20
035F:  MOVWF  3B
0360:  MOVLW  82
0361:  MOVWF  3A
0362:  CALL   1C0
0363:  MOVF   23,W
0364:  MOVWF  2E
0365:  MOVF   22,W
0366:  MOVWF  2D
0367:  MOVF   21,W
0368:  MOVWF  2C
0369:  MOVF   20,W
036A:  MOVWF  2B
036B:  DECFSZ 31,F
036C:  GOTO   354
036D:  MOVF   2E,W
036E:  MOVWF  39
036F:  MOVF   2D,W
0370:  MOVWF  38
0371:  MOVF   2C,W
0372:  MOVWF  37
0373:  MOVF   2B,W
0374:  MOVWF  36
0375:  MOVF   36,W
0376:  SUBLW  B6
0377:  MOVWF  36
0378:  CLRF   23
0379:  MOVF   37,W
037A:  MOVWF  3A
037B:  BSF    37.7
037C:  BCF    03.0
037D:  RRF    37,F
037E:  RRF    38,F
037F:  RRF    39,F
0380:  RRF    23,F
0381:  RRF    22,F
0382:  RRF    21,F
0383:  RRF    20,F
0384:  DECFSZ 36,F
0385:  GOTO   37C
0386:  BTFSS  3A.7
0387:  GOTO   393
0388:  COMF   20,F
0389:  COMF   21,F
038A:  COMF   22,F
038B:  COMF   23,F
038C:  INCF   20,F
038D:  BTFSC  03.2
038E:  INCF   21,F
038F:  BTFSC  03.2
0390:  INCF   22,F
0391:  BTFSC  03.2
0392:  INCF   23,F
0393:  MOVF   23,W
0394:  MOVWF  2E
0395:  MOVF   22,W
0396:  MOVWF  2D
0397:  MOVF   21,W
0398:  MOVWF  2C
0399:  MOVF   20,W
039A:  MOVWF  2B
039B:  BTFSS  2E.7
039C:  GOTO   3AA
039D:  DECF   30,F
039E:  BSF    30.5
039F:  COMF   2B,F
03A0:  COMF   2C,F
03A1:  COMF   2D,F
03A2:  COMF   2E,F
03A3:  INCF   2B,F
03A4:  BTFSC  03.2
03A5:  INCF   2C,F
03A6:  BTFSC  03.2
03A7:  INCF   2D,F
03A8:  BTFSC  03.2
03A9:  INCF   2E,F
03AA:  MOVLW  3B
03AB:  MOVWF  35
03AC:  MOVLW  9A
03AD:  MOVWF  34
03AE:  MOVLW  CA
03AF:  MOVWF  33
03B0:  CLRF   32
03B1:  MOVLW  0A
03B2:  MOVWF  31
03B3:  MOVF   2F,W
03B4:  BTFSC  03.2
03B5:  INCF   30,F
03B6:  BSF    03.1
03B7:  MOVLW  2B
03B8:  MOVWF  04
03B9:  MOVF   2E,W
03BA:  MOVWF  39
03BB:  MOVF   2D,W
03BC:  MOVWF  38
03BD:  MOVF   2C,W
03BE:  MOVWF  37
03BF:  MOVF   2B,W
03C0:  MOVWF  36
03C1:  MOVF   35,W
03C2:  MOVWF  3D
03C3:  MOVF   34,W
03C4:  MOVWF  3C
03C5:  MOVF   33,W
03C6:  MOVWF  3B
03C7:  MOVF   32,W
03C8:  MOVWF  3A
03C9:  CALL   300
03CA:  MOVF   21,W
03CB:  MOVF   20,F
03CC:  BTFSS  03.2
03CD:  GOTO   3E1
03CE:  INCF   2F,W
03CF:  SUBWF  31,W
03D0:  BTFSC  03.2
03D1:  GOTO   3E1
03D2:  MOVF   30,W
03D3:  BTFSC  03.2
03D4:  GOTO   3E3
03D5:  ANDLW  0F
03D6:  SUBWF  31,W
03D7:  BTFSC  03.2
03D8:  GOTO   3DB
03D9:  BTFSC  03.0
03DA:  GOTO   413
03DB:  BTFSC  30.7
03DC:  GOTO   413
03DD:  BTFSC  30.6
03DE:  GOTO   3E3
03DF:  MOVLW  20
03E0:  GOTO   40F
03E1:  MOVLW  20
03E2:  ANDWF  30,F
03E3:  BTFSS  30.5
03E4:  GOTO   3F1
03E5:  BCF    30.5
03E6:  MOVF   2F,W
03E7:  BTFSS  03.2
03E8:  DECF   30,F
03E9:  MOVF   20,W
03EA:  MOVWF  30
03EB:  MOVLW  2D
03EC:  MOVWF  36
03ED:  CALL   0C6
03EE:  MOVF   30,W
03EF:  MOVWF  20
03F0:  CLRF   30
03F1:  MOVF   2F,W
03F2:  SUBWF  31,W
03F3:  BTFSS  03.2
03F4:  GOTO   3FF
03F5:  MOVF   20,W
03F6:  MOVWF  30
03F7:  MOVLW  2E
03F8:  MOVWF  36
03F9:  CALL   0C6
03FA:  MOVF   30,W
03FB:  MOVWF  20
03FC:  MOVLW  20
03FD:  ANDWF  30,F
03FE:  MOVLW  00
03FF:  MOVLW  30
0400:  BTFSS  30.5
0401:  GOTO   40F
0402:  BCF    30.5
0403:  MOVF   2F,W
0404:  BTFSS  03.2
0405:  DECF   30,F
0406:  MOVF   20,W
0407:  MOVWF  30
0408:  MOVLW  2D
0409:  MOVWF  36
040A:  CALL   0C6
040B:  MOVF   30,W
040C:  MOVWF  20
040D:  CLRF   30
040E:  MOVLW  30
040F:  ADDWF  20,F
0410:  MOVF   20,W
0411:  MOVWF  36
0412:  CALL   0C6
0413:  BCF    03.1
0414:  MOVF   35,W
0415:  MOVWF  39
0416:  MOVF   34,W
0417:  MOVWF  38
0418:  MOVF   33,W
0419:  MOVWF  37
041A:  MOVF   32,W
041B:  MOVWF  36
041C:  CLRF   3D
041D:  CLRF   3C
041E:  CLRF   3B
041F:  MOVLW  0A
0420:  MOVWF  3A
0421:  CALL   300
0422:  MOVF   23,W
0423:  MOVWF  35
0424:  MOVF   22,W
0425:  MOVWF  34
0426:  MOVF   21,W
0427:  MOVWF  33
0428:  MOVF   20,W
0429:  MOVWF  32
042A:  DECFSZ 31,F
042B:  GOTO   3B6
042C:  BCF    0A.3
042D:  GOTO   4CA (RETURN)
.................... 
.................... #list
.................... 
.................... #device ADC=16
.................... #use delay(crystal=4MHz)
*
0012:  MOVLW  37
0013:  MOVWF  04
0014:  MOVF   00,W
0015:  BTFSC  03.2
0016:  GOTO   025
0017:  MOVLW  01
0018:  MOVWF  21
0019:  CLRF   20
001A:  DECFSZ 20,F
001B:  GOTO   01A
001C:  DECFSZ 21,F
001D:  GOTO   019
001E:  MOVLW  4A
001F:  MOVWF  20
0020:  DECFSZ 20,F
0021:  GOTO   020
0022:  GOTO   023
0023:  DECFSZ 00,F
0024:  GOTO   017
0025:  RETURN
.................... 
.................... 
.................... #include <lcd.c>
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////                             LCD.C                                     ////
.................... ////                 Driver for common LCD modules                         ////
.................... ////                                                                       ////
.................... ////  lcd_init()   Must be called before any other function.               ////
.................... ////                                                                       ////
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         ////
.................... ////                 \a  Set cursor position to upper left                 ////
.................... ////                 \f  Clear display, set cursor to upper left           ////
.................... ////                 \n  Go to start of second line                        ////
.................... ////                 \b  Move back one position                            ////
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     ////
.................... ////              will erase all remanining characters on the current      ////
.................... ////              line, and move the cursor to the beginning of the next   ////
.................... ////              line.                                                    ////
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     ////
.................... ////              will move the cursor to the start of the current         ////
.................... ////              line.                                                    ////
.................... ////                                                                       ////
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        ////
.................... ////                                                                       ////
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             ////
.................... ////                                                                       ////
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         ////
.................... ////              (on=FALSE).                                              ////
.................... ////                                                                       ////
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   ////
.................... ////                                                                       ////
.................... ////                                                                       ////
.................... ////  CONFIGURATION                                                        ////
.................... ////  The LCD can be configured in one of two ways: a.) port access or     ////
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     ////
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     ////
.................... ////  connected to sequential pins on the GPIO.  Pin access                ////
.................... ////  has no requirements, all 7 bits of the control interface can         ////
.................... ////  can be connected to any GPIO using several ports.                    ////
.................... ////                                                                       ////
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     ////
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    ////
.................... ////  of this file to configure the pin order.  If you are using a         ////
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  ////
.................... ////  be defined.                                                          ////
.................... ////                                                                       ////
.................... ////  Example of port access:                                              ////
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         ////
.................... ////                                                                       ////
.................... ////  To use pin access, the following pins must be defined:               ////
.................... ////     LCD_ENABLE_PIN                                                    ////
.................... ////     LCD_RS_PIN                                                        ////
.................... ////     LCD_RW_PIN                                                        ////
.................... ////     LCD_DATA4                                                         ////
.................... ////     LCD_DATA5                                                         ////
.................... ////     LCD_DATA6                                                         ////
.................... ////     LCD_DATA7                                                         ////
.................... ////                                                                       ////
.................... ////  Example of pin access:                                               ////
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    ////
.................... ////     #define LCD_RS_PIN      PIN_E1                                    ////
.................... ////     #define LCD_RW_PIN      PIN_E2                                    ////
.................... ////     #define LCD_DATA4       PIN_D4                                    ////
.................... ////     #define LCD_DATA5       PIN_D5                                    ////
.................... ////     #define LCD_DATA6       PIN_D6                                    ////
.................... ////     #define LCD_DATA7       PIN_D7                                    ////
.................... ////                                                                       ////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef __LCD_C__
.................... #define __LCD_C__
.................... 
.................... // define the pinout.
.................... // only required if port access is being used.
.................... typedef struct  
.................... {                            // This structure is overlayed
....................    int1 enable;           // on to an I/O port to gain
....................    int1 rs;               // access to the LCD pins.
....................    int1 rw;               // The bits are allocated from
....................    int1 unused;           // low order up.  ENABLE will
....................    unsigned int     data : 4;         // be LSB pin of that port.
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT.
....................    unsigned int    reserved: 8;
....................   #endif
.................... } LCD_PIN_MAP;
.................... 
.................... // this is to improve compatability with previous LCD drivers that accepted
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B.
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE))
....................  #define LCD_DATA_PORT getenv("SFR:PORTB")
.................... #endif
.................... 
.................... #if defined(__PCB__)
....................    // these definitions only need to be modified for baseline PICs.
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions.
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0};
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF};
.................... #endif
.................... 
.................... ////////////////////// END CONFIGURATION ///////////////////////////////////
.................... 
.................... #ifndef LCD_ENABLE_PIN
....................    #define lcd_output_enable(x) lcdlat.enable=x
....................    #define lcd_enable_tris()   lcdtris.enable=0
.................... #else
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x)
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN)
.................... #endif
.................... 
.................... #ifndef LCD_RS_PIN
....................    #define lcd_output_rs(x) lcdlat.rs=x
....................    #define lcd_rs_tris()   lcdtris.rs=0
.................... #else
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x)
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN)
.................... #endif
.................... 
.................... #ifndef LCD_RW_PIN
....................    #define lcd_output_rw(x) lcdlat.rw=x
....................    #define lcd_rw_tris()   lcdtris.rw=0
.................... #else
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x)
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN)
.................... #endif
.................... 
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4,
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver
.................... // compatible with any code written for the original library
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7))
....................    #define  LCD_DATA4    LCD_DATA0
....................    #define  LCD_DATA5    LCD_DATA1
....................    #define  LCD_DATA6    LCD_DATA2
....................    #define  LCD_DATA7    LCD_DATA3
.................... #endif
.................... 
.................... #ifndef LCD_DATA4
.................... #ifndef LCD_DATA_PORT
....................    #if defined(__PCB__)
....................       #define LCD_DATA_PORT      0x06     //portb
....................       #define set_tris_lcd(x)   set_tris_b(x)
....................    #else
....................      #if defined(PIN_D0)
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd
....................      #else
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb
....................      #endif
....................    #endif   
.................... #endif
.................... 
.................... #if defined(__PCB__)
....................    LCD_PIN_MAP lcd, lcdlat;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT
.................... #elif defined(__PCM__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT
....................    #byte lcdtris = LCD_DATA_PORT+0x80
.................... #elif defined(__PCH__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT+9
....................    #byte lcdtris = LCD_DATA_PORT+0x12
.................... #elif defined(__PCD__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #word lcd = LCD_DATA_PORT
....................    #word lcdlat = LCD_DATA_PORT+2
....................    #word lcdtris = LCD_DATA_PORT-0x02
.................... #endif
.................... #endif   //LCD_DATA4 not defined
.................... 
.................... #ifndef LCD_TYPE
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines
.................... #endif
.................... 
.................... #ifndef LCD_LINE_TWO
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line
.................... #endif
.................... 
.................... #ifndef LCD_LINE_LENGTH
....................    #define LCD_LINE_LENGTH 20
.................... #endif
.................... 
.................... unsigned int8 lcd_read_nibble(void);
.................... 
.................... unsigned int8 lcd_read_byte(void)
.................... {
....................    unsigned int8 low,high;
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_INPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_float(LCD_DATA4);
....................    output_float(LCD_DATA5);
....................    output_float(LCD_DATA6);
....................    output_float(LCD_DATA7);
....................   #else
....................    lcdtris.data = 0xF;
*
003E:  MOVLW  0F
003F:  BSF    03.5
0040:  ANDWF  06,W
0041:  IORLW  F0
0042:  MOVWF  06
....................   #endif
....................  #endif
....................         
....................    lcd_output_rw(1);
0043:  BCF    03.5
0044:  BSF    06.2
....................    delay_cycles(1);
0045:  NOP
....................    lcd_output_enable(1);
0046:  BSF    06.0
....................    delay_cycles(1);
0047:  NOP
....................    high = lcd_read_nibble();
0048:  CALL   032
0049:  MOVF   21,W
004A:  MOVWF  3E
....................       
....................    lcd_output_enable(0);
004B:  BCF    06.0
....................    delay_cycles(1);
004C:  NOP
....................    lcd_output_enable(1);
004D:  BSF    06.0
....................    delay_us(1);
004E:  NOP
....................    low = lcd_read_nibble();
004F:  CALL   032
0050:  MOVF   21,W
0051:  MOVWF  3D
....................       
....................    lcd_output_enable(0);
0052:  BCF    06.0
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_drive(LCD_DATA4);
....................    output_drive(LCD_DATA5);
....................    output_drive(LCD_DATA6);
....................    output_drive(LCD_DATA7);
....................   #else
....................    lcdtris.data = 0x0;
0053:  MOVLW  0F
0054:  BSF    03.5
0055:  ANDWF  06,W
0056:  MOVWF  06
....................   #endif
....................  #endif
.................... 
....................    return( (high<<4) | low);
0057:  BCF    03.5
0058:  SWAPF  3E,W
0059:  MOVWF  20
005A:  MOVLW  F0
005B:  ANDWF  20,F
005C:  MOVF   20,W
005D:  IORWF  3D,W
005E:  MOVWF  21
.................... }
.................... 
.................... unsigned int8 lcd_read_nibble(void)
.................... {
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    unsigned int8 n = 0x00;
.................... 
....................    /* Read the data port */
....................    n |= input(LCD_DATA4);
....................    n |= input(LCD_DATA5) << 1;
....................    n |= input(LCD_DATA6) << 2;
....................    n |= input(LCD_DATA7) << 3;
....................    
....................    return(n);
....................   #else
....................    return(lcd.data);
*
0032:  MOVF   06,W
0033:  MOVWF  20
0034:  SWAPF  06,W
0035:  ANDLW  0F
0036:  MOVWF  21
....................   #endif
0037:  RETURN
.................... }
.................... 
.................... void lcd_send_nibble(unsigned int8 n)
.................... {
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    /* Write to the data port */
....................    output_bit(LCD_DATA4, bit_test(n, 0));
....................    output_bit(LCD_DATA5, bit_test(n, 1));
....................    output_bit(LCD_DATA6, bit_test(n, 2));
....................    output_bit(LCD_DATA7, bit_test(n, 3));
....................   #else      
....................    lcdlat.data = n;
*
0026:  SWAPF  3E,W
0027:  ANDLW  F0
0028:  MOVWF  20
0029:  MOVLW  0F
002A:  ANDWF  06,W
002B:  IORWF  20,W
002C:  MOVWF  06
....................   #endif
....................       
....................    delay_cycles(1);
002D:  NOP
....................    lcd_output_enable(1);
002E:  BSF    06.0
....................    delay_us(2);
002F:  GOTO   030
....................    lcd_output_enable(0);
0030:  BCF    06.0
0031:  RETURN
.................... }
.................... 
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n)
.................... {
....................   #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................   #else
....................    lcd_enable_tris();
*
0038:  BSF    03.5
0039:  BCF    06.0
....................    lcd_rs_tris();
003A:  BCF    06.1
....................    lcd_rw_tris();
003B:  BCF    06.2
....................   #endif
.................... 
....................    lcd_output_rs(0);
003C:  BCF    03.5
003D:  BCF    06.1
....................    while ( bit_test(lcd_read_byte(),7) ) ;
*
005F:  MOVF   21,W
0060:  MOVWF  3D
0061:  BTFSC  3D.7
0062:  GOTO   03E
....................    lcd_output_rs(address);
0063:  BTFSS  3B.0
0064:  BCF    06.1
0065:  BTFSC  3B.0
0066:  BSF    06.1
....................    delay_cycles(1);
0067:  NOP
....................    lcd_output_rw(0);
0068:  BCF    06.2
....................    delay_cycles(1);
0069:  NOP
....................    lcd_output_enable(0);
006A:  BCF    06.0
....................    lcd_send_nibble(n >> 4);
006B:  SWAPF  3C,W
006C:  MOVWF  3D
006D:  MOVLW  0F
006E:  ANDWF  3D,F
006F:  MOVF   3D,W
0070:  MOVWF  3E
0071:  CALL   026
....................    lcd_send_nibble(n & 0xf);
0072:  MOVF   3C,W
0073:  ANDLW  0F
0074:  MOVWF  3D
0075:  MOVWF  3E
0076:  CALL   026
0077:  RETURN
.................... }
.................... 
.................... #if defined(LCD_EXTENDED_NEWLINE)
.................... unsigned int8 g_LcdX, g_LcdY;
.................... #endif
.................... 
.................... void lcd_init(void) 
.................... {
....................    unsigned int8 i;
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6};
0078:  MOVLW  28
0079:  MOVWF  2C
007A:  MOVLW  0C
007B:  MOVWF  2D
007C:  MOVLW  01
007D:  MOVWF  2E
007E:  MOVLW  06
007F:  MOVWF  2F
....................                              // These bytes need to be sent to the LCD
....................                              // to start it up.
....................    
.................... 
....................    lcd_output_enable(0);
0080:  BCF    06.0
....................    lcd_output_rs(0);
0081:  BCF    06.1
....................    lcd_output_rw(0);
0082:  BCF    06.2
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_drive(LCD_DATA4);
....................    output_drive(LCD_DATA5);
....................    output_drive(LCD_DATA6);
....................    output_drive(LCD_DATA7);
....................   #else
....................    lcdtris.data = 0x0;
0083:  MOVLW  0F
0084:  BSF    03.5
0085:  ANDWF  06,W
0086:  MOVWF  06
....................   #endif
....................    lcd_enable_tris();
0087:  BCF    06.0
....................    lcd_rs_tris();
0088:  BCF    06.1
....................    lcd_rw_tris();
0089:  BCF    06.2
....................  #endif
....................     
....................    delay_ms(15);
008A:  MOVLW  0F
008B:  BCF    03.5
008C:  MOVWF  37
008D:  CALL   012
....................    for(i=1;i<=3;++i)
008E:  MOVLW  01
008F:  MOVWF  2B
0090:  MOVF   2B,W
0091:  SUBLW  03
0092:  BTFSS  03.0
0093:  GOTO   09C
....................    {
....................        lcd_send_nibble(3);
0094:  MOVLW  03
0095:  MOVWF  3E
0096:  CALL   026
....................        delay_ms(5);
0097:  MOVLW  05
0098:  MOVWF  37
0099:  CALL   012
009A:  INCF   2B,F
009B:  GOTO   090
....................    }
....................    
....................    lcd_send_nibble(2);
009C:  MOVLW  02
009D:  MOVWF  3E
009E:  CALL   026
....................    delay_ms(5);
009F:  MOVLW  05
00A0:  MOVWF  37
00A1:  CALL   012
....................    for(i=0;i<=3;++i)
00A2:  CLRF   2B
00A3:  MOVF   2B,W
00A4:  SUBLW  03
00A5:  BTFSS  03.0
00A6:  GOTO   0B2
....................       lcd_send_byte(0,LCD_INIT_STRING[i]);
00A7:  MOVLW  2C
00A8:  ADDWF  2B,W
00A9:  MOVWF  04
00AA:  MOVF   00,W
00AB:  MOVWF  30
00AC:  CLRF   3B
00AD:  MOVF   30,W
00AE:  MOVWF  3C
00AF:  CALL   038
.................... 
....................   #if defined(LCD_EXTENDED_NEWLINE)
00B0:  INCF   2B,F
00B1:  GOTO   0A3
00B2:  BCF    0A.3
00B3:  GOTO   43A (RETURN)
....................    g_LcdX = 0;
....................    g_LcdY = 0;
....................   #endif
.................... }
.................... 
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y)
.................... {
....................    unsigned int8 address;
....................    
....................    if(y!=1)
00B4:  DECFSZ 38,W
00B5:  GOTO   0B7
00B6:  GOTO   0BA
....................       address=LCD_LINE_TWO;
00B7:  MOVLW  40
00B8:  MOVWF  39
00B9:  GOTO   0BB
....................    else
....................       address=0;
00BA:  CLRF   39
....................      
....................    address+=x-1;
00BB:  MOVLW  01
00BC:  SUBWF  37,W
00BD:  ADDWF  39,F
....................    lcd_send_byte(0,0x80|address);
00BE:  MOVF   39,W
00BF:  IORLW  80
00C0:  MOVWF  3A
00C1:  CLRF   3B
00C2:  MOVF   3A,W
00C3:  MOVWF  3C
00C4:  CALL   038
.................... 
....................   #if defined(LCD_EXTENDED_NEWLINE)
00C5:  RETURN
....................    g_LcdX = x - 1;
....................    g_LcdY = y - 1;
....................   #endif
.................... }
.................... 
.................... void lcd_putc(char c)
.................... {
....................    switch (c)
00C6:  MOVF   36,W
00C7:  XORLW  07
00C8:  BTFSC  03.2
00C9:  GOTO   0D4
00CA:  XORLW  0B
00CB:  BTFSC  03.2
00CC:  GOTO   0D9
00CD:  XORLW  06
00CE:  BTFSC  03.2
00CF:  GOTO   0E1
00D0:  XORLW  02
00D1:  BTFSC  03.2
00D2:  GOTO   0E7
00D3:  GOTO   0EC
....................    {
....................       case '\a'   :  lcd_gotoxy(1,1);     break;
00D4:  MOVLW  01
00D5:  MOVWF  37
00D6:  MOVWF  38
00D7:  CALL   0B4
00D8:  GOTO   0F1
.................... 
....................       case '\f'   :  lcd_send_byte(0,1);
00D9:  CLRF   3B
00DA:  MOVLW  01
00DB:  MOVWF  3C
00DC:  CALL   038
....................                      delay_ms(2);
00DD:  MOVLW  02
00DE:  MOVWF  37
00DF:  CALL   012
....................                     #if defined(LCD_EXTENDED_NEWLINE)
....................                      g_LcdX = 0;
....................                      g_LcdY = 0;
....................                     #endif
....................                      break;
00E0:  GOTO   0F1
.................... 
....................      #if defined(LCD_EXTENDED_NEWLINE)
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break;
....................       case '\n'   :
....................          while (g_LcdX++ < LCD_LINE_LENGTH)
....................          {
....................             lcd_send_byte(1, ' ');
....................          }
....................          lcd_gotoxy(1, g_LcdY+2);
....................          break;
....................      #else
....................       case '\n'   : lcd_gotoxy(1,2);        break;
00E1:  MOVLW  01
00E2:  MOVWF  37
00E3:  MOVLW  02
00E4:  MOVWF  38
00E5:  CALL   0B4
00E6:  GOTO   0F1
....................      #endif
....................      
....................       case '\b'   : lcd_send_byte(0,0x10);  break;
00E7:  CLRF   3B
00E8:  MOVLW  10
00E9:  MOVWF  3C
00EA:  CALL   038
00EB:  GOTO   0F1
....................      
....................      #if defined(LCD_EXTENDED_NEWLINE)
....................       default     : 
....................          if (g_LcdX < LCD_LINE_LENGTH)
....................          {
....................             lcd_send_byte(1, c);
....................             g_LcdX++;
....................          }
....................          break;
....................      #else
....................       default     : lcd_send_byte(1,c);     break;
00EC:  MOVLW  01
00ED:  MOVWF  3B
00EE:  MOVF   36,W
00EF:  MOVWF  3C
00F0:  CALL   038
....................      #endif
....................    }
00F1:  RETURN
.................... }
....................  
.................... char lcd_getc(unsigned int8 x, unsigned int8 y)
.................... {
....................    char value;
.................... 
....................    lcd_gotoxy(x,y);
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low
....................    lcd_output_rs(1);
....................    value = lcd_read_byte();
....................    lcd_output_rs(0);
....................    
....................    return(value);
.................... }
.................... 
.................... // write a custom character to the ram
.................... // which is 0-7 and specifies which character array we are modifying.
.................... // ptr points to an array of 8 bytes, where each byte is the next row of
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and
.................... //    usually you will want to leave this byte 0x00.
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr)
.................... {
....................    unsigned int i;
.................... 
....................    which <<= 3;
....................    which &= 0x38;
.................... 
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address
.................... 
....................    for(i=0; i<8; i++)
....................    {
....................       lcd_send_byte(1, *ptr++);
....................    }
....................   
....................    #if defined(LCD_EXTENDED_NEWLINE)
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address
....................    #endif
.................... }
.................... 
.................... void lcd_cursor_on(int1 on)
.................... {
....................    if (on)
....................    {
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON
....................    }
....................    else
....................    {
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF
....................    }
.................... }
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... void main()
*
042E:  MOVF   03,W
042F:  ANDLW  1F
0430:  MOVWF  03
0431:  BSF    03.5
0432:  BSF    1F.0
0433:  BSF    1F.1
0434:  BSF    1F.2
0435:  BCF    1F.3
0436:  MOVLW  07
0437:  MOVWF  1C
.................... {
....................    lcd_init();
0438:  BCF    03.5
0439:  GOTO   078
....................    setup_adc_ports(AN0);
043A:  BSF    03.5
043B:  BCF    1F.0
043C:  BSF    1F.1
043D:  BSF    1F.2
043E:  BSF    1F.3
....................    setup_adc(ADC_CLOCK_INTERNAL);
043F:  BCF    1F.6
0440:  BCF    03.5
0441:  BSF    1F.6
0442:  BSF    1F.7
0443:  BSF    03.5
0444:  BCF    1F.7
0445:  BCF    03.5
0446:  BSF    1F.0
....................    int16 lectura_ADC;
....................    float volt;
....................    
....................    while(TRUE)
....................    {
....................       set_adc_channel(0);
0447:  MOVLW  00
0448:  MOVWF  21
0449:  MOVF   1F,W
044A:  ANDLW  C7
044B:  IORWF  21,W
044C:  MOVWF  1F
....................       delay_us(20);
044D:  MOVLW  06
044E:  MOVWF  20
044F:  DECFSZ 20,F
0450:  GOTO   44F
0451:  NOP
....................       lectura_ADC = read_adc();
0452:  BSF    1F.2
0453:  BTFSC  1F.2
0454:  GOTO   453
0455:  BSF    03.5
0456:  MOVF   1E,W
0457:  BCF    03.5
0458:  MOVWF  21
0459:  MOVF   1E,W
045A:  MOVWF  26
045B:  MOVF   21,W
045C:  MOVWF  25
....................       
....................       lcd_gotoxy(1,1);
045D:  MOVLW  01
045E:  MOVWF  37
045F:  MOVWF  38
0460:  CALL   0B4
....................       printf(lcd_putc,"ADC = %6lu", lectura_ADC);
0461:  MOVLW  04
0462:  BSF    03.6
0463:  MOVWF  0D
0464:  MOVLW  00
0465:  MOVWF  0F
0466:  BCF    03.0
0467:  MOVLW  06
0468:  BCF    03.6
0469:  MOVWF  2B
046A:  CALL   0F2
046B:  MOVLW  01
046C:  MOVWF  2B
046D:  MOVLW  20
046E:  MOVWF  36
046F:  CALL   0C6
0470:  DECFSZ 2B,F
0471:  GOTO   46D
0472:  MOVLW  00
0473:  MOVWF  04
0474:  MOVF   26,W
0475:  MOVWF  2C
0476:  MOVF   25,W
0477:  MOVWF  2B
0478:  GOTO   149
....................       delay_ms(100);
0479:  MOVLW  64
047A:  MOVWF  37
047B:  CALL   012
....................       volt = (lectura_ADC*5.0)/65536;
047C:  MOVF   26,W
047D:  MOVWF  2C
047E:  MOVF   25,W
047F:  MOVWF  2B
0480:  GOTO   1A2
0481:  MOVF   23,W
0482:  MOVWF  39
0483:  MOVF   22,W
0484:  MOVWF  38
0485:  MOVF   21,W
0486:  MOVWF  37
0487:  MOVF   20,W
0488:  MOVWF  36
0489:  CLRF   3D
048A:  CLRF   3C
048B:  MOVLW  20
048C:  MOVWF  3B
048D:  MOVLW  81
048E:  MOVWF  3A
048F:  CALL   1C0
0490:  MOVF   23,W
0491:  MOVWF  2E
0492:  MOVF   22,W
0493:  MOVWF  2D
0494:  MOVF   21,W
0495:  MOVWF  2C
0496:  MOVF   20,W
0497:  MOVWF  2B
0498:  MOVF   23,W
0499:  MOVWF  32
049A:  MOVF   22,W
049B:  MOVWF  31
049C:  MOVF   21,W
049D:  MOVWF  30
049E:  MOVF   20,W
049F:  MOVWF  2F
04A0:  CLRF   36
04A1:  CLRF   35
04A2:  CLRF   34
04A3:  MOVLW  8F
04A4:  MOVWF  33
04A5:  GOTO   235
04A6:  MOVF   23,W
04A7:  MOVWF  2A
04A8:  MOVF   22,W
04A9:  MOVWF  29
04AA:  MOVF   21,W
04AB:  MOVWF  28
04AC:  MOVF   20,W
04AD:  MOVWF  27
....................       lcd_gotoxy(1,2);
04AE:  MOVLW  01
04AF:  MOVWF  37
04B0:  MOVLW  02
04B1:  MOVWF  38
04B2:  CALL   0B4
....................       printf(lcd_putc,"Volts = %01.2f", volt);
04B3:  MOVLW  0A
04B4:  BSF    03.6
04B5:  MOVWF  0D
04B6:  MOVLW  00
04B7:  MOVWF  0F
04B8:  BCF    03.0
04B9:  MOVLW  08
04BA:  BCF    03.6
04BB:  MOVWF  2B
04BC:  CALL   0F2
04BD:  MOVLW  C9
04BE:  MOVWF  04
04BF:  MOVF   2A,W
04C0:  MOVWF  2E
04C1:  MOVF   29,W
04C2:  MOVWF  2D
04C3:  MOVF   28,W
04C4:  MOVWF  2C
04C5:  MOVF   27,W
04C6:  MOVWF  2B
04C7:  MOVLW  02
04C8:  MOVWF  2F
04C9:  GOTO   34E
....................       delay_ms(100);
04CA:  MOVLW  64
04CB:  MOVWF  37
04CC:  CALL   012
04CD:  GOTO   447
....................    }
.................... 
.................... }
04CE:  SLEEP

Configuration Fuses:
   Word  1: 3F71   XT NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
